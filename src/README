
This is the source code distribution for PLT Scheme (MzScheme and/or
MrEd with DrScheme). For license information, please see the file
plt/notes/COPYING.LIB.

Compiled binaries, documentation, and up-to-date information are
available at
  http://www.plt-scheme.org/software/drscheme/
  http://www.plt-scheme.org/software/mzscheme/
  http://www.plt-scheme.org/software/mred/

The MzScheme source code should compile and execute on any Windows,
Mac OS, or Unix (Linux) platform. The MrEd source code should compile
and execute on any Windows, Mac OS, or Unix (Linux) platform, but not
using Cygwin or Borland with Windows.

Per-platform instructions are below.

Please report bugs via one of the following:
  - Help Desk's "submit bug report" link  (preferred)
  - http://bugs.plt-scheme.org/
  - bugs@plt-scheme.org                   (last resort)

-Matthew Flatt
 PLT
 mflatt@cs.utah.edu

========================================================================
 Compiling for Windows
========================================================================

To compile with Microsoft Visual C, read the instructions in
plt\src\worksp\README.

To compile MzScheme with Cygwin tools, follow the Unix instructions
below.

To compile with Borland C, read the instructions in
plt\src\borland\README.

Regardless of the compiler used to build MzScheme, compatible
extensions can be built with any of the other compilers. For example,
to support Borland-built extensions after compiling MzScheme with MSVC
or Cygwin, cd to plt\src\mzscheme\dynsrc and run mkbordyn.bat. (The
mkbordyn.bat script requires bcc23.exe.)

========================================================================
 Compiling for Mac OS (OS X or Classic)
========================================================================

OS X:

Read the instructions in the following section, then follow the 
instructions in plt/src/mac/README.

Classic:

Follow the instructions in plt/src/mac/README.


========================================================================
 Compiling for supported Unix variants (including Linux)
               or Cygwin (MzScheme only)
========================================================================

 0. If you have an old PLT installation in the target directory,
    remove it (unless you are using CVS with an "in-place" build).

 1. Run the script `configure' (which is in the same directory as this
    README), usually with a --prefix=TARGETDIR command-line argument,
    and optionally with --enable-dynlib.

    For example, if you want to install into /usr/local/plt using
    dynamic libraries, then run

        configure --prefix=/usr/local/plt --enable-dynlib

    The TARGETDIR must be an absolute path.

    If the --prefix flag is omitted, the binaries are built for an
    in-place installation (i.e., the plt directory containing this
    README will be used directly). Unless --enable-dynlib is used, the
    plt directory can be moved later.

    The `configure' script generates the makefiles for building
    MzScheme and/or MrEd. The current directory at the time
    `configure' is run will be used as working space for building the
    executables (independent of --prefix). This build directory does
    not have to be in the plt/ tree, even for an "in-place" build, as
    long as you use GNU make when building MrEd. It's ok to run
    `configure' from its own directory, but it's usually better to
    pick a separate build directory.

    The --enable-dynlib flag works only when `configure' is called
    using an absolute path, or when an absolute path is provided with
    --prefix.

    The `configure' script accepts many other flags that adjust the
    build process. Run `configure --help' for more information. In
    addition, a specific compiler can be selected through environment
    variables. For example, to select the SGI compilers for Irix
    instead of gcc, run configure as

         env CC=cc CXX=CC configure

    For cross compilation, set the compiler variables to a compiler
    for the target platform compiler, but also set CC_FOR_BUILD to a
    compiler for the host platform (for building binaries to execute
    during the build process).

 2. Run `make'.

    With Cygwin, use `make --unix'.

    Binaries and libraries are placed in subdirectories of the build
    directory. For example, the `mzscheme' binary appears in the
    `mzscheme' directory.

 3. Run `make install'.

    This step copies binaries and libraries into place within the plt
    tree. For example, the `mzscheme' binary is copied for Unix into
    the directory plt/bin/mzscheme. For a --prefix, build, the rest of
    the plt tree is also copied to the target directory.

    In addition, this step runs the plt/install script, which updates
    script paths and builds .zo files.

    If the installation fails because the target directory cannot be
    created, or because the target directory is not the one you
    wanted, then you can run `configure' again with a new --prefix
    value, then try step 3 again. After changing the --prefix value,
    it is not necessary to repeat steps 1 or 2.

 4a. ONLY Cygwin: Create the other executables (besides mred.exe and
     mzscheme.exe) by running
        mzscheme.exe -mvqL- setup.ss setup
    in the plt directory (one directory up from here). The above makes
    the .zo files, too, but add -n to the end of the command to skip
    the .zo-compiling step. Afterwards, `plt/Setup PLT.exe' and
    `plt/mzc.exe' work.

 4b. ONLY CVS users with in-place builds: the `make install' step does
    not run plt/install for an in-place build, because old .zo files
    typically need to be deleted, first. After an initial in-place
    build, manually run ./install in the plt directory. For later
    builds, manually run plt/bin/setup-plt with the -c flag.

After an "in-place" install without CVS, the plt/src directory is no
longer needed, and it can be safely deleted.

If you move the plt tree (for a build without dynamic libraries), run
the script ./install in the relocated plt directory.

========================================================================
 Compiling the OSKit-based kernel
========================================================================

To build the OSKit-based MzScheme kernel, run the configure script
with the --enable-oskit or --enable-smalloskit flag. The result of
compiling will be `mzscheme.multiboot' in the `mzscheme' build
directory. It is a kernel in multiboot format.

Before building the MzScheme kernel, you must first install OSKit,
which is available from the Flux Research Group at Utah:
     http://www.cs.utah.edu/projects/flux/oskit/

By default, configure assumes that OSKit is installed in
/usr/local. To specify a different location for OSKit, define the
OSKHOME environment variable.

For simplicity, the MzScheme kernel uses SGC rather than Boehm's
conservative garbage collector.

The --enable-smalloskit configuration produces a kernel without
networking or filesystem support. The kernel created by
--enable--oskit accepts filesystem and networking configuration
information on its multiboot command line via the --fs and --net
flags:

  --fs <drive> <partition> : mounts the given partition as the root
   directory. For example, to mount the seventh parition on main disk,
   supply: --fs hda f. Many filesystem formats are supported,
   including EXT2, MSDOS, and VFAT (all of the ones supported by
   Linux; see OSKit for details). The standard kernel can only mount
   one filesystem per run; hack main.c to get more.

  --net <address> <netmask> <gateway> : initializes ethernet support
   for MzScheme's TCP primitives. Example: --net 128.42.6.101
   255.255.255.0 128.42.6.254. Many types of ethernet cards are
   supported (the ones supported by FreeBSD; see OSKit for details).

Each of --fs and --net should be used once at most. The --fs and --net
flags must appear before any other command-line arguments, which are
handled by MzScheme in the usual way.

To access a filesystem or the network from non-multiboot kernels
(e.g., a LILO-compatible kernel), you must hardwire filesystem and
networking parameters in oskglue.inc when compiling the kernel; see
oskglue.inc for details (grep for `hardwire').

========================================================================
 Porting to New Platforms
========================================================================

At a mininum, to port MzScheme to a new platform, edit
mzscheme/sconfig.h to provide a platform-specific compilation
information. As dsitributed, mzscheme/sconfig.h contains
configurations for the following platforms:

              Windows
              Mac OS (PPC and 68k)
              Linux (x86, PPC, and 68k)
              Cygwin
              Solaris (x86 and Sparc)
              SunOS4 (Sparc)
              IBM AIX (RS6000)
              SGI IRIX (Mips)
              DEC Ultrix
              HP/UX
              FreeBSD
              OpenBSD
              OSF1 (Alpha)
              SCO Unix (x86)

If your platfrom is not supported by the Boehm garbage collector
(distributed with PLT source), provide the `--enable-sgc' flag to
`configure'.

========================================================================
 Additional Compilation Notes
========================================================================

Garbage Collector
-----------------

The conservative garbage collector distributed with MzScheme (in the
gc directory) has been modified slightly from Boehm's standard
distribution. Mostly, the change modify the way that object
finalization is handled.

Precise GC
----------

MzScheme and MrEd can be compiled to an experimental form that uses a
mmemory-moving garbage collector with precise tracking of pointers (as
opposed to "conservation garbage collection") on some Unix platforms,
including Linux, FreeBSD, and Solaris. The experimental forms are
called MzScheme3m and MrEd3m, repsectively, where the "3m" stands for
"moving memory manager".

To build MzScheme3m and MrEd3m in Unix, run `make 3m'. Building
MzScheme3m and MrEd3m first builds the normal MzScheme and MrEd
executables, then uses them to build the 3m versions.

To build MzScheme3m for Windows with Microsoft Visual C, first build
and install the normal MzScheme executable, and make sure that cl.exe
is in your shell path. Then, in a shell, change directories to
plt\src\mzscheme\gc2 and run
  mzscheme -r winmake.ss
Move the resulting mzscheme3m.exe binary to your PLT directory.

Configuration Options
---------------------

By default, MzScheme is compiled:

 * without image dumps (since the application will probably be linked
   dynamically); and

 * without support for single-precision floating point numbers.

These options can be modified by setting flags in mzscheme/sconfig.h.

Modifying MzScheme
------------------

If you modify MzScheme and change any primitive syntax or the
collection of built-in identifers, be sure to turn off
USE_COMPILED_MACROS in schminc.h. Otherwise, MzScheme won't start.
See schminc.h for details.

Guile Compatibility Library
---------------------------

In the mzscheme/ directory, `make libguile' produces a libguile.a
library that implements an ancient high-level guile interface. See
mzscheme/libguile/README.

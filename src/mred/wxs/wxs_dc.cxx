/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_dc.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_dccan.h"
#include "wx_dcmem.h"
#include "wx_dcps.h"
#ifndef wx_mac
#include "wx_dcpan.h"
#endif
#ifdef wx_msw
#include "wx_mf.h"
#endif
#include "wx_types.h"
#ifdef wx_mac
#include "wx_dcpr.h"
#endif
#include "wx_rgn.h"




#include "wxscheme.h"
#include "wxs_dc.h"
#include "wxscomon.h"


static Scheme_Object *solidity_wxTRANSPARENT_sym = NULL;
static Scheme_Object *solidity_wxSOLID_sym = NULL;

static void init_symset_solidity(void) {
  solidity_wxTRANSPARENT_sym = scheme_intern_symbol("transparent");
  solidity_wxSOLID_sym = scheme_intern_symbol("solid");
}

static int unbundle_symset_solidity(Scheme_Object *v, const char *where) {
  if (!solidity_wxSOLID_sym) init_symset_solidity();
  if (0) { }
  else if (v == solidity_wxTRANSPARENT_sym) { return wxTRANSPARENT; }
  else if (v == solidity_wxSOLID_sym) { return wxSOLID; }
  if (where) scheme_wrong_type(where, "solidity symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_solidity(Scheme_Object *v, const char *where) {
  if (!solidity_wxSOLID_sym) init_symset_solidity();
  if (0) { }
  else if (v == solidity_wxTRANSPARENT_sym) { return 1; }
  else if (v == solidity_wxSOLID_sym) { return 1; }
  if (where) scheme_wrong_type(where, "solidity symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_solidity(int v) {
  if (!solidity_wxSOLID_sym) init_symset_solidity();
  switch (v) {
  case wxTRANSPARENT: return solidity_wxTRANSPARENT_sym;
  case wxSOLID: return solidity_wxSOLID_sym;
  default: return NULL;
  }
}


static Scheme_Object *bitmapDrawStyle_wxSOLID_sym = NULL;
static Scheme_Object *bitmapDrawStyle_wxSTIPPLE_sym = NULL;
static Scheme_Object *bitmapDrawStyle_wxXOR_sym = NULL;

static void init_symset_bitmapDrawStyle(void) {
  bitmapDrawStyle_wxSOLID_sym = scheme_intern_symbol("solid");
  bitmapDrawStyle_wxSTIPPLE_sym = scheme_intern_symbol("opaque");
  bitmapDrawStyle_wxXOR_sym = scheme_intern_symbol("xor");
}

static int unbundle_symset_bitmapDrawStyle(Scheme_Object *v, const char *where) {
  if (!bitmapDrawStyle_wxXOR_sym) init_symset_bitmapDrawStyle();
  if (0) { }
  else if (v == bitmapDrawStyle_wxSOLID_sym) { return wxSOLID; }
  else if (v == bitmapDrawStyle_wxSTIPPLE_sym) { return wxSTIPPLE; }
  else if (v == bitmapDrawStyle_wxXOR_sym) { return wxXOR; }
  if (where) scheme_wrong_type(where, "bitmapDrawStyle symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_bitmapDrawStyle(Scheme_Object *v, const char *where) {
  if (!bitmapDrawStyle_wxXOR_sym) init_symset_bitmapDrawStyle();
  if (0) { }
  else if (v == bitmapDrawStyle_wxSOLID_sym) { return 1; }
  else if (v == bitmapDrawStyle_wxSTIPPLE_sym) { return 1; }
  else if (v == bitmapDrawStyle_wxXOR_sym) { return 1; }
  if (where) scheme_wrong_type(where, "bitmapDrawStyle symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_bitmapDrawStyle(int v) {
  if (!bitmapDrawStyle_wxXOR_sym) init_symset_bitmapDrawStyle();
  switch (v) {
  case wxSOLID: return bitmapDrawStyle_wxSOLID_sym;
  case wxSTIPPLE: return bitmapDrawStyle_wxSTIPPLE_sym;
  case wxXOR: return bitmapDrawStyle_wxXOR_sym;
  default: return NULL;
  }
}



static Scheme_Object *fillKind_wxODDEVEN_RULE_sym = NULL;
static Scheme_Object *fillKind_wxWINDING_RULE_sym = NULL;

static void init_symset_fillKind(void) {
  fillKind_wxODDEVEN_RULE_sym = scheme_intern_symbol("odd-even");
  fillKind_wxWINDING_RULE_sym = scheme_intern_symbol("winding");
}

static int unbundle_symset_fillKind(Scheme_Object *v, const char *where) {
  if (!fillKind_wxWINDING_RULE_sym) init_symset_fillKind();
  if (0) { }
  else if (v == fillKind_wxODDEVEN_RULE_sym) { return wxODDEVEN_RULE; }
  else if (v == fillKind_wxWINDING_RULE_sym) { return wxWINDING_RULE; }
  if (where) scheme_wrong_type(where, "fillKind symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_fillKind(Scheme_Object *v, const char *where) {
  if (!fillKind_wxWINDING_RULE_sym) init_symset_fillKind();
  if (0) { }
  else if (v == fillKind_wxODDEVEN_RULE_sym) { return 1; }
  else if (v == fillKind_wxWINDING_RULE_sym) { return 1; }
  if (where) scheme_wrong_type(where, "fillKind symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_fillKind(int v) {
  if (!fillKind_wxWINDING_RULE_sym) init_symset_fillKind();
  switch (v) {
  case wxODDEVEN_RULE: return fillKind_wxODDEVEN_RULE_sym;
  case wxWINDING_RULE: return fillKind_wxWINDING_RULE_sym;
  default: return NULL;
  }
}



static wxColour* dcGetTextBackground(wxDC *dc)
{
  wxColour *c = new wxColour();
  *c = dc->GetTextBackground();
  return c;
}

static wxColour* dcGetTextForeground(wxDC *dc)
{
  wxColour *c = new wxColour();
  *c = dc->GetTextForeground();
  return c;
}

static bool DrawBitmap(wxDC *dc, wxBitmap *bm, float x, float y, int mode, wxColour *c)
{
  if (bm->Ok()) {
    return dc->Blit(x, y, bm->GetWidth(), bm->GetHeight(), bm, 0, 0, mode, c);
  } else
    return FALSE;
}

static bool DrawBitmapRegion(wxDC *dc, wxBitmap *bm, float x, float y, float dx, float dy, float dw, float dh, int mode, wxColour *c)
{
  if (bm->Ok()) {
    return dc->Blit(x, y, dw, dh, bm, dx, dy, mode, c);
  } else
    return FALSE;
}




#undef DO_OK_CHECK
#ifdef DrawsForCanvas
#define DO_OK_CHECK(v)
#else
#define DO_OK_CHECK(v) if (!((wxDC *)((Scheme_Class_Object *)obj)->primdata)->Ok()) return v;
#endif


extern Scheme_Object *objscheme_bundle_wxPoint(wxPoint *);
extern wxPoint *objscheme_unbundle_wxPoint(Scheme_Object *, const char *, int);

#undef l_ADDRESS
#undef l_DEREF
#undef l_TEST
#undef l_POINT
#undef l_TYPE
#undef l_LIST_ITEM_BUNDLE
#undef l_LIST_ITEM_UNBUNDLE
#undef l_MAKE_LIST
#undef l_MAKE_ARRAY
#undef l_EXTRA
#undef l_TERMINATE
#undef l_COPY
#undef l_OKTEST
#undef l_INTTYPE

#define l_ADDRESS &
#define l_DEREF *
#define l_NULLOK 0
#define l_TEST , l_NULLOK
#define l_POINT 
#define l_EXTRA 0
#define l_TERMINATE 
#define l_COPY l_COPYDEST.x=l_COPYSRC.x; l_COPYDEST.y=l_COPYSRC.y;
#define l_OKTEST 
#define l_INTTYPE int

#define l_TYPE wxPoint
#define l_LIST_ITEM_BUNDLE objscheme_bundle_wxPoint
#define l_LIST_ITEM_UNBUNDLE objscheme_unbundle_wxPoint
#define l_MAKE_LIST __MakewxPointList
#define l_MAKE_ARRAY __MakewxPointArray





static Scheme_Object *l_MAKE_LIST(l_TYPE l_POINT *f, l_INTTYPE c)
{
  Scheme_Object *cdr = scheme_null, *obj;

  while (c--) {
    obj = l_LIST_ITEM_BUNDLE(l_ADDRESS f[c]);
    cdr = scheme_make_pair(obj, cdr);
  }
  
  return cdr;
}

static l_TYPE l_POINT *l_MAKE_ARRAY(Scheme_Object *l, l_INTTYPE *c, char *who)
{
  Scheme_Object *orig_l = l;
  int i = 0;
  long len;

  len = scheme_proper_list_length(l);
  if (len < 0) scheme_wrong_type(who, "proper-list", -1, 0, &l);
  if (c) *c = len;

  if (!(len + l_EXTRA))
    return NULL;

  l_TYPE l_POINT *f = new l_TYPE l_POINT[len + l_EXTRA];

  while (!SCHEME_NULLP(l)) {
    if (!SCHEME_LISTP(l))
     scheme_arg_mismatch(who, "expected a proper list: ", orig_l);

#define l_COPYDEST f[i]
#define l_COPYSRC (l_DEREF l_LIST_ITEM_UNBUNDLE(SCHEME_CAR(l), who l_TEST))

    l_COPY

    l_OKTEST

    i++;

    l = SCHEME_CDR(l);
  }
  l_TERMINATE

  return f;
}


/* The methods are here: */










// Also in wxWindow:


#ifndef wx_mac
#define HIDETHISSTATEMENT(x) x
#else
#define HIDETHISSTATEMENT(x) 
#endif


// @ "set-optimization" : void SetOptimization(bool); : : /IFNOTMAC/ENDIF/

#ifndef wx_mac
#define CHECKTHISONE(x) x
#else
#define CHECKTHISONE(x) 1
#endif








class os_wxDC : public wxDC {
 public:

  ~os_wxDC();
};

Scheme_Object *os_wxDC_class;

Scheme_Object *os_wxDC_interface;

os_wxDC::~os_wxDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxDCEndPage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->EndPage();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCEndDoc(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->EndDoc();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCStartPage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->StartPage();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCStartDoc(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "start-doc in dc<%>");

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->StartDoc(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDCOk(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->Ok();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDCGetSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  nnfloat _x0;
  nnfloat* x0 = &_x0;
  nnfloat _x1;
  nnfloat* x1 = &_x1;

  
      *x0 = objscheme_unbundle_nonnegative_float(objscheme_unbox(p[0], "get-size in dc<%>"), "get-size in dc<%>"", extracting boxed argument");
      *x1 = objscheme_unbundle_nonnegative_float(objscheme_unbox(p[1], "get-size in dc<%>"), "get-size in dc<%>"", extracting boxed argument");

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetSize(x0, x1);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCdcGetTextForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = dcGetTextForeground(((wxDC *)((Scheme_Class_Object *)obj)->primdata));

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxDCdcGetTextBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = dcGetTextBackground(((wxDC *)((Scheme_Class_Object *)obj)->primdata));

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetPen(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxPen* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetPen();

  
  
  return objscheme_bundle_wxPen(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxFont* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetFont();

  
  
  return objscheme_bundle_wxFont(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetBrush(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBrush* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetBrush();

  
  
  return objscheme_bundle_wxBrush(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetBackgroundMode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetBackgroundMode();

  
  
  return bundle_symset_solidity(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetBackground();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxDCSetDeviceOrigin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "set-origin in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "set-origin in dc<%>");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetDeviceOrigin(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetUserScale(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  nnfloat x0;
  nnfloat x1;

  
  x0 = objscheme_unbundle_nonnegative_float(p[0], "set-scale in dc<%>");
  x1 = objscheme_unbundle_nonnegative_float(p[1], "set-scale in dc<%>");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetUserScale(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetBackgroundMode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = unbundle_symset_solidity(p[0], "set-background-mode in dc<%>");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetBackgroundMode(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCTryColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;
  class wxColour* x1;

  
  x0 = objscheme_unbundle_wxColour(p[0], "try-color in dc<%>", 0);
  x1 = objscheme_unbundle_wxColour(p[1], "try-color in dc<%>", 0);

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->TryColour(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawBitmap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxBitmap* x0;
  float x1;
  float x2;
  int x3;
  class wxColour* x4;

  
  x0 = objscheme_unbundle_wxBitmap(p[0], "draw-bitmap in dc<%>", 0);
  x1 = objscheme_unbundle_float(p[1], "draw-bitmap in dc<%>");
  x2 = objscheme_unbundle_float(p[2], "draw-bitmap in dc<%>");
  if (n > 3) {
    x3 = unbundle_symset_bitmapDrawStyle(p[3], "draw-bitmap in dc<%>");
  } else
    x3 = wxSOLID;
  if (n > 4) {
    x4 = objscheme_unbundle_wxColour(p[4], "draw-bitmap in dc<%>", 0);
  } else
    x4 = NULL;

  
  r = DrawBitmap(((wxDC *)((Scheme_Class_Object *)obj)->primdata), x0, x1, x2, x3, x4);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDCDrawBitmapRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxBitmap* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  nnfloat x5;
  nnfloat x6;
  int x7;
  class wxColour* x8;

  
  x0 = objscheme_unbundle_wxBitmap(p[0], "draw-bitmap-section in dc<%>", 0);
  x1 = objscheme_unbundle_float(p[1], "draw-bitmap-section in dc<%>");
  x2 = objscheme_unbundle_float(p[2], "draw-bitmap-section in dc<%>");
  x3 = objscheme_unbundle_float(p[3], "draw-bitmap-section in dc<%>");
  x4 = objscheme_unbundle_float(p[4], "draw-bitmap-section in dc<%>");
  x5 = objscheme_unbundle_nonnegative_float(p[5], "draw-bitmap-section in dc<%>");
  x6 = objscheme_unbundle_nonnegative_float(p[6], "draw-bitmap-section in dc<%>");
  if (n > 7) {
    x7 = unbundle_symset_bitmapDrawStyle(p[7], "draw-bitmap-section in dc<%>");
  } else
    x7 = wxSOLID;
  if (n > 8) {
    x8 = objscheme_unbundle_wxColour(p[8], "draw-bitmap-section in dc<%>", 0);
  } else
    x8 = NULL;

  DO_OK_CHECK(scheme_false)if (!x0->Ok()) return scheme_false;
  r = DrawBitmapRegion(((wxDC *)((Scheme_Class_Object *)obj)->primdata), x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDCGetCharWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetCharWidth();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetCharHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetCharHeight();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetTextExtent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  nnfloat _x1;
  nnfloat* x1 = &_x1;
  nnfloat _x2;
  nnfloat* x2 = &_x2;
  nnfloat _x3;
  nnfloat* x3 = &_x3;
  nnfloat _x4;
  nnfloat* x4 = &_x4;
  class wxFont* x5;
  Bool x6;

  
  x0 = (string)objscheme_unbundle_string(p[0], "get-text-extent in dc<%>");
      *x1 = objscheme_unbundle_nonnegative_float(objscheme_unbox(p[1], "get-text-extent in dc<%>"), "get-text-extent in dc<%>"", extracting boxed argument");
      *x2 = objscheme_unbundle_nonnegative_float(objscheme_unbox(p[2], "get-text-extent in dc<%>"), "get-text-extent in dc<%>"", extracting boxed argument");
  if (n > 3) {
    if (XC_SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_nonnegative_float(objscheme_nullable_unbox(p[3], "get-text-extent in dc<%>"), "get-text-extent in dc<%>"", extracting boxed argument");
  } else
    x3 = NULL;
  if (n > 4) {
    if (XC_SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_nonnegative_float(objscheme_nullable_unbox(p[4], "get-text-extent in dc<%>"), "get-text-extent in dc<%>"", extracting boxed argument");
  } else
    x4 = NULL;
  if (n > 5) {
    x5 = objscheme_unbundle_wxFont(p[5], "get-text-extent in dc<%>", 1);
  } else
    x5 = NULL;
  if (n > 6) {
    x6 = objscheme_unbundle_bool(p[6], "get-text-extent in dc<%>");
  } else
    x6 = FALSE;

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetTextExtent(x0, x1, x2, x3, x4, x5, x6);

  
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_double(_x2));
  if (n > 3 && !XC_SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  if (n > 4 && !XC_SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetTextForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "set-text-foreground in dc<%>", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetTextForeground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetTextBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "set-text-background in dc<%>", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetTextBackground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetPen(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxPen* x0;

  
  x0 = objscheme_unbundle_wxPen(p[0], "set-pen in dc<%>", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetPen(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxFont* x0;

  
  x0 = objscheme_unbundle_wxFont(p[0], "set-font in dc<%>", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetFont(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetBrush(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBrush* x0;

  
  x0 = objscheme_unbundle_wxBrush(p[0], "set-brush in dc<%>", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetBrush(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "set-background in dc<%>", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetBackground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCGetClippingRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxRegion* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetClippingRegion();

  
  
  return objscheme_bundle_wxRegion(r);
}

#pragma argsused
static Scheme_Object *os_wxDCSetClippingRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxRegion* x0;

  
  x0 = objscheme_unbundle_wxRegion(p[0], "set-clipping-region in dc<%>", 1);

  if (x0 && (x0->GetDC() != ((wxDC *)((Scheme_Class_Object *)obj)->primdata))) scheme_arg_mismatch(METHODNAME("dc<%>","set-clipping-region"), "provided a different dc's region: ", p[0]);
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetClippingRegion(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetClippingRect(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "set-clipping-rect in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "set-clipping-rect in dc<%>");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "set-clipping-rect in dc<%>");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "set-clipping-rect in dc<%>");

  if (x2 < 0) x2 = 0;if (x3 < 0) x3 = 0;DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetClippingRect(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawPolygon(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  class wxPoint* x1;
  float x2;
  float x3;
  int x4;

  
  x1 = NULL;
  if (n > 1) {
    x2 = objscheme_unbundle_float(p[1], "draw-polygon in dc<%>");
  } else
    x2 = 0;
  if (n > 2) {
    x3 = objscheme_unbundle_float(p[2], "draw-polygon in dc<%>");
  } else
    x3 = 0;
  if (n > 3) {
    x4 = unbundle_symset_fillKind(p[3], "draw-polygon in dc<%>");
  } else
    x4 = wxODDEVEN_RULE;

  x1 = __MakewxPointArray((0 < n) ? p[0] : scheme_null, &x0, METHODNAME("dc<%>","draw-polygon"));DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawPolygon(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawLines(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  class wxPoint* x1;
  float x2;
  float x3;

  
  x1 = NULL;
  if (n > 1) {
    x2 = objscheme_unbundle_float(p[1], "draw-lines in dc<%>");
  } else
    x2 = 0;
  if (n > 2) {
    x3 = objscheme_unbundle_float(p[2], "draw-lines in dc<%>");
  } else
    x3 = 0;

  x1 = __MakewxPointArray((0 < n) ? p[0] : scheme_null, &x0, METHODNAME("dc<%>","draw-lines"));DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawLines(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawEllipse(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "draw-ellipse in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "draw-ellipse in dc<%>");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "draw-ellipse in dc<%>");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "draw-ellipse in dc<%>");

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawEllipse(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawArc(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;
  float x4;
  float x5;

  
  x0 = objscheme_unbundle_float(p[0], "draw-arc in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "draw-arc in dc<%>");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "draw-arc in dc<%>");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "draw-arc in dc<%>");
  x4 = objscheme_unbundle_float(p[4], "draw-arc in dc<%>");
  x5 = objscheme_unbundle_float(p[5], "draw-arc in dc<%>");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawArc(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  float x1;
  float x2;
  Bool x3;

  
  x0 = (string)objscheme_unbundle_string(p[0], "draw-text in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "draw-text in dc<%>");
  x2 = objscheme_unbundle_float(p[2], "draw-text in dc<%>");
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "draw-text in dc<%>");
  } else
    x3 = FALSE;

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawText(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawSpline(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;

  
  x0 = objscheme_unbundle_float(p[0], "draw-spline in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "draw-spline in dc<%>");
  x2 = objscheme_unbundle_float(p[2], "draw-spline in dc<%>");
  x3 = objscheme_unbundle_float(p[3], "draw-spline in dc<%>");
  x4 = objscheme_unbundle_float(p[4], "draw-spline in dc<%>");
  x5 = objscheme_unbundle_float(p[5], "draw-spline in dc<%>");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawSpline(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawRoundedRectangle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;
  float x4;

  
  x0 = objscheme_unbundle_float(p[0], "draw-rounded-rectangle in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "draw-rounded-rectangle in dc<%>");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "draw-rounded-rectangle in dc<%>");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "draw-rounded-rectangle in dc<%>");
  if (n > 4) {
    x4 = objscheme_unbundle_float(p[4], "draw-rounded-rectangle in dc<%>");
  } else
    x4 = 20;

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawRoundedRectangle(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawRectangle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "draw-rectangle in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "draw-rectangle in dc<%>");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "draw-rectangle in dc<%>");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "draw-rectangle in dc<%>");

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawRectangle(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawPoint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "draw-point in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "draw-point in dc<%>");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawPoint(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;

  
  x0 = objscheme_unbundle_float(p[0], "draw-line in dc<%>");
  x1 = objscheme_unbundle_float(p[1], "draw-line in dc<%>");
  x2 = objscheme_unbundle_float(p[2], "draw-line in dc<%>");
  x3 = objscheme_unbundle_float(p[3], "draw-line in dc<%>");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawLine(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCClear(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->Clear();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCEndDrawing(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->EndDrawing();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCBeginDrawing(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->BeginDrawing();

  
  
  return scheme_void;
}

void objscheme_setup_wxDC(void *env)
{
if (os_wxDC_class) {
    objscheme_add_global_class(os_wxDC_class, "dc%", env);
    objscheme_add_global_interface(os_wxDC_interface, "dc" "<%>", env);
} else {
  os_wxDC_class = objscheme_def_prim_class(env, "dc%", "object%", NULL, 44);

 scheme_add_method_w_arity(os_wxDC_class, "end-page", os_wxDCEndPage, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "end-doc", os_wxDCEndDoc, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "start-page", os_wxDCStartPage, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "start-doc", os_wxDCStartDoc, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "ok?", os_wxDCOk, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-size", os_wxDCGetSize, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "get-text-foreground", os_wxDCdcGetTextForeground, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-text-background", os_wxDCdcGetTextBackground, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-pen", os_wxDCGetPen, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-font", os_wxDCGetFont, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-brush", os_wxDCGetBrush, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-background-mode", os_wxDCGetBackgroundMode, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-background", os_wxDCGetBackground, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "set-origin", os_wxDCSetDeviceOrigin, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "set-scale", os_wxDCSetUserScale, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "set-background-mode", os_wxDCSetBackgroundMode, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "try-color", os_wxDCTryColour, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "draw-bitmap", os_wxDCDrawBitmap, 3, 5);
 scheme_add_method_w_arity(os_wxDC_class, "draw-bitmap-section", os_wxDCDrawBitmapRegion, 7, 9);
 scheme_add_method_w_arity(os_wxDC_class, "get-char-width", os_wxDCGetCharWidth, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-char-height", os_wxDCGetCharHeight, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-text-extent", os_wxDCGetTextExtent, 3, 7);
 scheme_add_method_w_arity(os_wxDC_class, "set-text-foreground", os_wxDCSetTextForeground, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-text-background", os_wxDCSetTextBackground, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-pen", os_wxDCSetPen, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-font", os_wxDCSetFont, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-brush", os_wxDCSetBrush, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-background", os_wxDCSetBackground, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "get-clipping-region", os_wxDCGetClippingRegion, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "set-clipping-region", os_wxDCSetClippingRegion, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-clipping-rect", os_wxDCSetClippingRect, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-polygon", os_wxDCDrawPolygon, 1, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-lines", os_wxDCDrawLines, 1, 3);
 scheme_add_method_w_arity(os_wxDC_class, "draw-ellipse", os_wxDCDrawEllipse, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-arc", os_wxDCDrawArc, 6, 6);
 scheme_add_method_w_arity(os_wxDC_class, "draw-text", os_wxDCDrawText, 3, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-spline", os_wxDCDrawSpline, 6, 6);
 scheme_add_method_w_arity(os_wxDC_class, "draw-rounded-rectangle", os_wxDCDrawRoundedRectangle, 4, 5);
 scheme_add_method_w_arity(os_wxDC_class, "draw-rectangle", os_wxDCDrawRectangle, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-point", os_wxDCDrawPoint, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "draw-line", os_wxDCDrawLine, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "clear", os_wxDCClear, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "end-drawing", os_wxDCEndDrawing, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "begin-drawing", os_wxDCBeginDrawing, 0, 0);


  scheme_made_class(os_wxDC_class);

  os_wxDC_interface = scheme_class_to_interface(os_wxDC_class, "dc" "<%>");

  objscheme_add_global_interface(os_wxDC_interface, "dc" "<%>", env);
  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxDC, wxTYPE_DC);

}
}

int objscheme_istype_wxDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "dc% object or " XC_NULL_STR: "dc% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxDC(class wxDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxDC *objscheme_unbundle_wxDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxDC *)o->primdata;
  else
    return (wxDC *)o->primdata;
}






class os_wxCanvasDC : public wxCanvasDC {
 public:

  ~os_wxCanvasDC();
};

Scheme_Object *os_wxCanvasDC_class;

Scheme_Object *os_wxCanvasDC_interface;

os_wxCanvasDC::~os_wxCanvasDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxCanvasDCSetPixel(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  class wxColour* x2;

  
  x0 = objscheme_unbundle_float(p[0], "set-pixel in pixel-dc<%>");
  x1 = objscheme_unbundle_float(p[1], "set-pixel in pixel-dc<%>");
  x2 = objscheme_unbundle_wxColour(p[2], "set-pixel in pixel-dc<%>", 1);

  
  ((wxCanvasDC *)((Scheme_Class_Object *)obj)->primdata)->SetPixel(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDCEndSetPixel(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxCanvasDC *)((Scheme_Class_Object *)obj)->primdata)->EndSetPixel();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDCBeginSetPixel(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxCanvasDC *)((Scheme_Class_Object *)obj)->primdata)->BeginSetPixel();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDCGetPixel(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;
  class wxColour* x2;

  
  x0 = objscheme_unbundle_float(p[0], "get-pixel in pixel-dc<%>");
  x1 = objscheme_unbundle_float(p[1], "get-pixel in pixel-dc<%>");
  x2 = objscheme_unbundle_wxColour(p[2], "get-pixel in pixel-dc<%>", 1);

  
  r = ((wxCanvasDC *)((Scheme_Class_Object *)obj)->primdata)->GetPixel(x0, x1, x2);

  
  
  return (r ? scheme_true : scheme_false);
}

void objscheme_setup_wxCanvasDC(void *env)
{
if (os_wxCanvasDC_class) {
    objscheme_add_global_class(os_wxCanvasDC_class, "pixel-dc%", env);
    objscheme_add_global_interface(os_wxCanvasDC_interface, "pixel-dc" "<%>", env);
} else {
  os_wxCanvasDC_class = objscheme_def_prim_class(env, "pixel-dc%", "dc%", NULL, 4);

 scheme_add_method_w_arity(os_wxCanvasDC_class, "set-pixel", os_wxCanvasDCSetPixel, 3, 3);
 scheme_add_method_w_arity(os_wxCanvasDC_class, "end-set-pixel", os_wxCanvasDCEndSetPixel, 0, 0);
 scheme_add_method_w_arity(os_wxCanvasDC_class, "begin-set-pixel", os_wxCanvasDCBeginSetPixel, 0, 0);
 scheme_add_method_w_arity(os_wxCanvasDC_class, "get-pixel", os_wxCanvasDCGetPixel, 3, 3);


  scheme_made_class(os_wxCanvasDC_class);

  os_wxCanvasDC_interface = scheme_class_to_interface(os_wxCanvasDC_class, "pixel-dc" "<%>");

  objscheme_add_global_interface(os_wxCanvasDC_interface, "pixel-dc" "<%>", env);
  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxCanvasDC, wxTYPE_DC_CANVAS);

}
}

int objscheme_istype_wxCanvasDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxCanvasDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "pixel-dc% object or " XC_NULL_STR: "pixel-dc% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxCanvasDC(class wxCanvasDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_CANVAS) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxCanvasDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxCanvasDC *objscheme_unbundle_wxCanvasDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxCanvasDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxCanvasDC *)o->primdata;
  else
    return (wxCanvasDC *)o->primdata;
}







class os_wxMemoryDC : public wxMemoryDC {
 public:

  os_wxMemoryDC(Scheme_Object * obj);
  ~os_wxMemoryDC();
};

Scheme_Object *os_wxMemoryDC_class;

os_wxMemoryDC::os_wxMemoryDC(Scheme_Object * o)
: wxMemoryDC()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMemoryDC::~os_wxMemoryDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxMemoryDCGetObject(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBitmap* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMemoryDC *)((Scheme_Class_Object *)obj)->primdata)->GetObject();

  
  
  return objscheme_bundle_wxBitmap(r);
}

#pragma argsused
static Scheme_Object *os_wxMemoryDCSelectObject(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBitmap* x0;

  
  x0 = objscheme_unbundle_wxBitmap(p[0], "set-bitmap in bitmap-dc%", 1);

  
  ((wxMemoryDC *)((Scheme_Class_Object *)obj)->primdata)->SelectObject(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMemoryDC_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMemoryDC *realobj;

  
  if (n != 0) 
    scheme_wrong_count("initialization in bitmap-dc%", 0, 0, n, p);

  
  realobj = new os_wxMemoryDC(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

void objscheme_setup_wxMemoryDC(void *env)
{
if (os_wxMemoryDC_class) {
    objscheme_add_global_class(os_wxMemoryDC_class, "bitmap-dc%", env);
} else {
  os_wxMemoryDC_class = objscheme_def_prim_class(env, "bitmap-dc%", "pixel-dc%", os_wxMemoryDC_ConstructScheme, 2);

 scheme_add_method_w_arity(os_wxMemoryDC_class, "get-bitmap", os_wxMemoryDCGetObject, 0, 0);
 scheme_add_method_w_arity(os_wxMemoryDC_class, "set-bitmap", os_wxMemoryDCSelectObject, 1, 1);


  scheme_made_class(os_wxMemoryDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMemoryDC, wxTYPE_DC_MEMORY);

}
}

int objscheme_istype_wxMemoryDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMemoryDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "bitmap-dc% object or " XC_NULL_STR: "bitmap-dc% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMemoryDC(class wxMemoryDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_MEMORY) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMemoryDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMemoryDC *objscheme_unbundle_wxMemoryDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMemoryDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMemoryDC *)o->primdata;
  else
    return (wxMemoryDC *)o->primdata;
}







class os_wxPostScriptDC : public wxPostScriptDC {
 public:

  os_wxPostScriptDC(Scheme_Object * obj, Bool x0 = TRUE);
  ~os_wxPostScriptDC();
};

Scheme_Object *os_wxPostScriptDC_class;

os_wxPostScriptDC::os_wxPostScriptDC(Scheme_Object * o, Bool x0)
: wxPostScriptDC(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPostScriptDC::~os_wxPostScriptDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxPostScriptDC_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxPostScriptDC *realobj;
  Bool x0;

  
  if ((n > 1)) 
    scheme_wrong_count("initialization in post-script-dc%", 0, 1, n, p);
  if (n > 0) {
    x0 = objscheme_unbundle_bool(p[0], "initialization in post-script-dc%");
  } else
    x0 = TRUE;

  
  realobj = new os_wxPostScriptDC(obj, x0);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

void objscheme_setup_wxPostScriptDC(void *env)
{
if (os_wxPostScriptDC_class) {
    objscheme_add_global_class(os_wxPostScriptDC_class, "post-script-dc%", env);
} else {
  os_wxPostScriptDC_class = objscheme_def_prim_class(env, "post-script-dc%", "dc%", os_wxPostScriptDC_ConstructScheme, 0);



  scheme_made_class(os_wxPostScriptDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxPostScriptDC, wxTYPE_DC_POSTSCRIPT);

}
}

int objscheme_istype_wxPostScriptDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxPostScriptDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "post-script-dc% object or " XC_NULL_STR: "post-script-dc% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxPostScriptDC(class wxPostScriptDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_POSTSCRIPT) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxPostScriptDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxPostScriptDC *objscheme_unbundle_wxPostScriptDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxPostScriptDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxPostScriptDC *)o->primdata;
  else
    return (wxPostScriptDC *)o->primdata;
}


#ifdef wx_x

class basePrinterDC : public wxObject
{
public:
  basePrinterDC()
  {
    scheme_raise_exn(MZEXN_MISC_UNSUPPORTED,
		     "%s", 
		     METHODNAME("printer-dc%","initialization")": not supported for X Windows");
  }
};

#else

class basePrinterDC : public wxPrinterDC
{
public:
  basePrinterDC()
    : wxPrinterDC( )
  {
  }
};

#endif




class os_basePrinterDC : public basePrinterDC {
 public:

  os_basePrinterDC(Scheme_Object * obj);
  ~os_basePrinterDC();
};

Scheme_Object *os_basePrinterDC_class;

os_basePrinterDC::os_basePrinterDC(Scheme_Object * o)
: basePrinterDC()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_basePrinterDC::~os_basePrinterDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_basePrinterDC_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_basePrinterDC *realobj;

  
  if (n != 0) 
    scheme_wrong_count("initialization in printer-dc%", 0, 0, n, p);

  
  realobj = new os_basePrinterDC(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

void objscheme_setup_basePrinterDC(void *env)
{
if (os_basePrinterDC_class) {
    objscheme_add_global_class(os_basePrinterDC_class, "printer-dc%", env);
} else {
  os_basePrinterDC_class = objscheme_def_prim_class(env, "printer-dc%", "dc%", os_basePrinterDC_ConstructScheme, 0);



  scheme_made_class(os_basePrinterDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_basePrinterDC, wxTYPE_DC_PRINTER);

}
}

int objscheme_istype_basePrinterDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_basePrinterDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "printer-dc% object or " XC_NULL_STR: "printer-dc% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_basePrinterDC(class basePrinterDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_PRINTER) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_basePrinterDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class basePrinterDC *objscheme_unbundle_basePrinterDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_basePrinterDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_basePrinterDC *)o->primdata;
  else
    return (basePrinterDC *)o->primdata;
}






/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_dc.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_dccan.h"
#include "wx_dcmem.h"
#include "wx_dcps.h"
#ifndef wx_mac
#include "wx_dcpan.h"
#endif
#ifdef wx_msw
#include "wx_mf.h"
#endif
#include "wx_types.h"
#ifdef wx_mac
#include "wx_dcpr.h"
#endif





#include "wxscheme.h"
#include "wxs_dc.h"
#include "wxscomon.h"




// "U" for undefined (pure virtual); don't think we'll need it
// @SETMARK q = v

#undef DO_OK_CHECK
#ifdef DrawsForCanvas
#define DO_OK_CHECK(v)
#else
#define DO_OK_CHECK(v) if (!((wxDC *)((Scheme_Class_Object *)obj)->primdata)->Ok()) return v;
#endif



extern Scheme_Object *objscheme_bundle_wxPoint(wxPoint *);
extern wxPoint *objscheme_unbundle_wxPoint(Scheme_Object *, const char *, int);
extern Scheme_Object *objscheme_bundle_wxIntPoint(wxIntPoint *);
extern wxIntPoint *objscheme_unbundle_wxIntPoint(Scheme_Object *, const char *, int);

#undef l_ADDRESS
#undef l_DEREF
#undef l_TEST
#undef l_POINT
#undef l_TYPE
#undef l_LIST_ITEM_BUNDLE
#undef l_LIST_ITEM_UNBUNDLE
#undef l_MAKE_LIST
#undef l_MAKE_ARRAY
#undef l_EXTRA
#undef l_TERMINATE
#undef l_COPY
#undef l_OKTEST
#undef l_INTTYPE

#define l_ADDRESS &
#define l_DEREF *
#define l_NULLOK 0
#define l_TEST , l_NULLOK
#define l_POINT 
#define l_EXTRA 0
#define l_TERMINATE 
#define l_COPY l_COPYDEST.x=l_COPYSRC.x; l_COPYDEST.y=l_COPYSRC.y;
#define l_OKTEST 
#define l_INTTYPE int

#define l_TYPE wxPoint
#define l_LIST_ITEM_BUNDLE objscheme_bundle_wxPoint
#define l_LIST_ITEM_UNBUNDLE objscheme_unbundle_wxPoint
#define l_MAKE_LIST __MakewxPointList
#define l_MAKE_ARRAY __MakewxPointArray





static Scheme_Object *l_MAKE_LIST(l_TYPE l_POINT *f, l_INTTYPE c)
{
  Scheme_Object *cdr = scheme_null, *obj;

  while (c--) {
    obj = l_LIST_ITEM_BUNDLE(l_ADDRESS f[c]);
    cdr = scheme_make_pair(obj, cdr);
  }
  
  return cdr;
}

static l_TYPE l_POINT *l_MAKE_ARRAY(Scheme_Object *l, l_INTTYPE *c, char *who)
{
  int i = 0;
  long len;

  len = scheme_proper_list_length(l);
  if (len < 0) scheme_wrong_type(who, "proper-list", -1, 0, &l);
  if (c) *c = len;

  if (!(len + l_EXTRA))
    return NULL;

  l_TYPE l_POINT *f = new l_TYPE l_POINT[len + l_EXTRA];

  while (!SCHEME_NULLP(l)) {
    if (!SCHEME_LISTP(l))
     scheme_signal_error("%s: expected a proper list", who);

#define l_COPYDEST f[i]
#define l_COPYSRC (l_DEREF l_LIST_ITEM_UNBUNDLE(SCHEME_CAR(l), who l_TEST))

    l_COPY

    l_OKTEST

    i++;

    l = SCHEME_CDR(l);
  }
  l_TERMINATE

  return f;
}


#undef l_ADDRESS
#undef l_DEREF
#undef l_TEST
#undef l_POINT
#undef l_TYPE
#undef l_LIST_ITEM_BUNDLE
#undef l_LIST_ITEM_UNBUNDLE
#undef l_MAKE_LIST
#undef l_MAKE_ARRAY
#undef l_EXTRA
#undef l_TERMINATE
#undef l_COPY
#undef l_OKTEST
#undef l_INTTYPE

#define l_ADDRESS &
#define l_DEREF *
#define l_NULLOK 0
#define l_TEST , l_NULLOK
#define l_POINT 
#define l_EXTRA 0
#define l_TERMINATE 
#define l_COPY l_COPYDEST.x=l_COPYSRC.x; l_COPYDEST.y=l_COPYSRC.y;
#define l_OKTEST 
#define l_INTTYPE int

#define l_TYPE wxIntPoint
#define l_LIST_ITEM_BUNDLE objscheme_bundle_wxIntPoint
#define l_LIST_ITEM_UNBUNDLE objscheme_unbundle_wxIntPoint
#define l_MAKE_LIST __MakewxIntPointList
#define l_MAKE_ARRAY __MakewxIntPointArray





static Scheme_Object *l_MAKE_LIST(l_TYPE l_POINT *f, l_INTTYPE c)
{
  Scheme_Object *cdr = scheme_null, *obj;

  while (c--) {
    obj = l_LIST_ITEM_BUNDLE(l_ADDRESS f[c]);
    cdr = scheme_make_pair(obj, cdr);
  }
  
  return cdr;
}

static l_TYPE l_POINT *l_MAKE_ARRAY(Scheme_Object *l, l_INTTYPE *c, char *who)
{
  int i = 0;
  long len;

  len = scheme_proper_list_length(l);
  if (len < 0) scheme_wrong_type(who, "proper-list", -1, 0, &l);
  if (c) *c = len;

  if (!(len + l_EXTRA))
    return NULL;

  l_TYPE l_POINT *f = new l_TYPE l_POINT[len + l_EXTRA];

  while (!SCHEME_NULLP(l)) {
    if (!SCHEME_LISTP(l))
     scheme_signal_error("%s: expected a proper list", who);

#define l_COPYDEST f[i]
#define l_COPYSRC (l_DEREF l_LIST_ITEM_UNBUNDLE(SCHEME_CAR(l), who l_TEST))

    l_COPY

    l_OKTEST

    i++;

    l = SCHEME_CDR(l);
  }
  l_TERMINATE

  return f;
}


/* The methods are here: */




// @ Q "int-draw-line" : void IntDrawLine(int,int,int,int); : : /CheckOk
// @ q "draw-spline" : void DrawSpline(wxList!); : : /CheckOk



// Undefined?
//@ "int-draw-lines" : void IntDrawLines(-int,wxIntPoint!/bList/ubList/cList,float=0,float=0); : / methListSet[wxIntPoint.0.1.0]// : /CheckOk|glueListSet[wxIntPoint.0.1.0]//



// Also in wxWindow:


#ifndef wx_mac
#define HIDETHISSTATEMENT(x) x
#else
#define HIDETHISSTATEMENT(x) 
#endif



#ifndef wx_mac
#define CHECKTHISONE(x) x
#else
#define CHECKTHISONE(x) 1
#endif








// @ Q "device-to-logical-x" : float DeviceToLogicalX(int); : : : rZERO
// @ Q "device-to-logical-y" : float DeviceToLogicalY(int); : : : rZERO
// @ Q "logical-to-device-x" : float LogicalToDeviceX(int); : : : rZERO
// @ Q "logical-to-device-y" : float LogicalToDeviceY(int); : : : rZERO







class os_wxDC : public wxDC {
 public:

  ~os_wxDC();
};

Scheme_Object *os_wxDC_class;

os_wxDC::~os_wxDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxDCEndPage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->EndPage();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCEndDoc(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->EndDoc();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCStartPage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->StartPage();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCStartDoc(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:dc%::start-doc");

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->StartDoc(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDCOk(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->Ok();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDCMinY(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->MinY();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxDCMinX(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->MinX();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxDCMaxY(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->MaxY();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxDCMaxX(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->MaxX();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:dc%::get-size", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:dc%::get-size"), "wx:dc%::get-size");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:dc%::get-size", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:dc%::get-size"), "wx:dc%::get-size");

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetSize(x0, x1);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCGetTextForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = &((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetTextForeground();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetTextBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = &((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetTextBackground();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetPen(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxPen* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetPen();

  
  
  return objscheme_bundle_wxPen(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetMapMode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetMapMode();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetLogicalFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetLogicalFunction();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxFont* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetFont();

  
  
  return objscheme_bundle_wxFont(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetBrush(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBrush* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetBrush();

  
  
  return objscheme_bundle_wxBrush(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBrush* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetBackground();

  
  
  return objscheme_bundle_wxBrush(r);
}

#pragma argsused
static Scheme_Object *os_wxDCSetDeviceOrigin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::set-device-origin");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::set-device-origin");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetDeviceOrigin(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetUserScale(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  nnfloat x0;
  nnfloat x1;

  
  x0 = objscheme_unbundle_nonnegative_float(p[0], "wx:dc%::set-user-scale");
  x1 = objscheme_unbundle_nonnegative_float(p[1], "wx:dc%::set-user-scale");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetUserScale(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetColourMap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColourMap* x0;

  
  x0 = objscheme_unbundle_wxColourMap(p[0], "wx:dc%::set-colour-map", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetColourMap(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetBackgroundMode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:dc%::set-background-mode");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetBackgroundMode(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetMapMode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:dc%::set-map-mode");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetMapMode(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCTryColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;
  class wxColour* x1;

  
  x0 = objscheme_unbundle_wxColour(p[0], "wx:dc%::try-colour", 0);
  x1 = objscheme_unbundle_wxColour(p[1], "wx:dc%::try-colour", 0);

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->TryColour(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCBlit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  class wxCanvasDC* x4;
  float x5;
  float x6;
  int x7;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::blit");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::blit");
  x2 = objscheme_unbundle_float(p[2], "wx:dc%::blit");
  x3 = objscheme_unbundle_float(p[3], "wx:dc%::blit");
  x4 = objscheme_unbundle_wxCanvasDC(p[4], "wx:dc%::blit", 0);
  x5 = objscheme_unbundle_float(p[5], "wx:dc%::blit");
  x6 = objscheme_unbundle_float(p[6], "wx:dc%::blit");
  if (n > 7) {
    x7 = objscheme_unbundle_integer(p[7], "wx:dc%::blit");
  } else
    x7 = wxCOPY;

  switch (x7) { case wxAND: case wxAND_INVERT: case wxAND_REVERSE: case wxCLEAR: case wxCOPY: case wxEQUIV: case wxINVERT: case wxNAND: case wxNOR: case wxNO_OP: case wxOR: case wxOR_INVERT: case wxOR_REVERSE: case wxSET: case wxSRC_INVERT: case wxXOR: break; case wxCOLOR: if (x7 == wxCOLOR) break; default: scheme_wrong_type("wx:dc::blit", "logicalfunction integer", 7, n, p); }DO_OK_CHECK(scheme_false)if (!x4->Ok()) return scheme_false;
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->Blit(x0, x1, x2, x3, x4, x5, x6, x7);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDCDrawIcon(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxIcon* x0;
  float x1;
  float x2;

  
  x0 = objscheme_unbundle_wxIcon(p[0], "wx:dc%::draw-icon", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-icon");
  x2 = objscheme_unbundle_float(p[2], "wx:dc%::draw-icon");

  DO_OK_CHECK(scheme_void)if (!CHECKTHISONE(x0->Ok())) return scheme_void;
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawIcon(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetOptimization(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:dc%::set-optimization");

  HIDETHISSTATEMENT(
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetOptimization(x0);

  )
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCGetCharWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetCharWidth();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetCharHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetCharHeight();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxDCGetTextExtent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  float _x3;
  float* x3 = &_x3;
  float _x4;
  float* x4 = &_x4;
  class wxFont* x5;
  Bool x6;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:dc%::get-text-extent");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:dc%::get-text-extent", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:dc%::get-text-extent"), "wx:dc%::get-text-extent");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:dc%::get-text-extent", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:dc%::get-text-extent"), "wx:dc%::get-text-extent");
  if (n > 3) {
    if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:dc%::get-text-extent"), "wx:dc%::get-text-extent");
  } else
    x3 = NULL;
  if (n > 4) {
    if (SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:dc%::get-text-extent"), "wx:dc%::get-text-extent");
  } else
    x4 = NULL;
  if (n > 5) {
    x5 = objscheme_unbundle_wxFont(p[5], "wx:dc%::get-text-extent", 1);
  } else
    x5 = NULL;
  if (n > 6) {
    x6 = objscheme_unbundle_bool(p[6], "wx:dc%::get-text-extent");
  } else
    x6 = FALSE;

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetTextExtent(x0, x1, x2, x3, x4, x5, x6);

  
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_double(_x2));
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  if (n > 4 && !SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetTextForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "wx:dc%::set-text-foreground", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetTextForeground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetTextBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "wx:dc%::set-text-background", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetTextBackground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetPen(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxPen* x0;

  
  x0 = objscheme_unbundle_wxPen(p[0], "wx:dc%::set-pen", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetPen(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetLogicalFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:dc%::set-logical-function");

  switch (x0) { case wxAND: case wxAND_INVERT: case wxAND_REVERSE: case wxCLEAR: case wxCOPY: case wxEQUIV: case wxINVERT: case wxNAND: case wxNOR: case wxNO_OP: case wxOR: case wxOR_INVERT: case wxOR_REVERSE: case wxSET: case wxSRC_INVERT: case wxXOR: break; case wxCOLOR: if (x0 == wxCOPY) break; default: scheme_wrong_type("wx:dc::set-logical-function", "logicalfunction integer", 0, n, p); }DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetLogicalFunction(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxFont* x0;

  
  x0 = objscheme_unbundle_wxFont(p[0], "wx:dc%::set-font", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetFont(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetBrush(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBrush* x0;

  
  x0 = objscheme_unbundle_wxBrush(p[0], "wx:dc%::set-brush", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetBrush(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBrush* x0;

  
  x0 = objscheme_unbundle_wxBrush(p[0], "wx:dc%::set-background", 0);

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetBackground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCGetClippingRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  float _x3;
  float* x3 = &_x3;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:dc%::get-clipping-region", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:dc%::get-clipping-region"), "wx:dc%::get-clipping-region");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:dc%::get-clipping-region", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:dc%::get-clipping-region"), "wx:dc%::get-clipping-region");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:dc%::get-clipping-region", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:dc%::get-clipping-region"), "wx:dc%::get-clipping-region");
  if (SCHEME_NULLP(p[3]))
    scheme_wrong_type("wx:dc%::get-clipping-region", "non-null", (3 - 0), n, p);
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:dc%::get-clipping-region"), "wx:dc%::get-clipping-region");

  
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->GetClippingRegion(x0, x1, x2, x3);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_double(_x2));
  if (n > 3)
    objscheme_set_box(p[3], scheme_make_double(_x3));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCSetClippingRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::set-clipping-region");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::set-clipping-region");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "wx:dc%::set-clipping-region");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "wx:dc%::set-clipping-region");

  DO_OK_CHECK(scheme_void)if (x2 < 0) x2 = 0;if (x3 < 0) x3 = 0;
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->SetClippingRegion(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDestroyClippingRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DestroyClippingRegion();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawPolygon(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  class wxPoint* x1;
  float x2;
  float x3;
  int x4;

  
  x1 = NULL;
  if (n > 1) {
    x2 = objscheme_unbundle_float(p[1], "wx:dc%::draw-polygon");
  } else
    x2 = 0;
  if (n > 2) {
    x3 = objscheme_unbundle_float(p[2], "wx:dc%::draw-polygon");
  } else
    x3 = 0;
  if (n > 3) {
    x4 = objscheme_unbundle_integer(p[3], "wx:dc%::draw-polygon");
  } else
    x4 = wxODDEVEN_RULE;

  DO_OK_CHECK(scheme_void)x1 = __MakewxPointArray((0 < n) ? p[0] : scheme_null, &x0, "wx:dc%::draw-polygon");
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawPolygon(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawLines(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  class wxPoint* x1;
  float x2;
  float x3;

  
  x1 = NULL;
  if (n > 1) {
    x2 = objscheme_unbundle_float(p[1], "wx:dc%::draw-lines");
  } else
    x2 = 0;
  if (n > 2) {
    x3 = objscheme_unbundle_float(p[2], "wx:dc%::draw-lines");
  } else
    x3 = 0;

  DO_OK_CHECK(scheme_void)x1 = __MakewxPointArray((0 < n) ? p[0] : scheme_null, &x0, "wx:dc%::draw-lines");
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawLines(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawEllipse(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::draw-ellipse");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-ellipse");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "wx:dc%::draw-ellipse");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "wx:dc%::draw-ellipse");

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawEllipse(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawArc(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::draw-arc");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-arc");
  x2 = objscheme_unbundle_float(p[2], "wx:dc%::draw-arc");
  x3 = objscheme_unbundle_float(p[3], "wx:dc%::draw-arc");
  x4 = objscheme_unbundle_float(p[4], "wx:dc%::draw-arc");
  x5 = objscheme_unbundle_float(p[5], "wx:dc%::draw-arc");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawArc(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  float x1;
  float x2;
  Bool x3;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:dc%::draw-text");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-text");
  x2 = objscheme_unbundle_float(p[2], "wx:dc%::draw-text");
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:dc%::draw-text");
  } else
    x3 = FALSE;

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawText(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawSpline(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::draw-spline");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-spline");
  x2 = objscheme_unbundle_float(p[2], "wx:dc%::draw-spline");
  x3 = objscheme_unbundle_float(p[3], "wx:dc%::draw-spline");
  x4 = objscheme_unbundle_float(p[4], "wx:dc%::draw-spline");
  x5 = objscheme_unbundle_float(p[5], "wx:dc%::draw-spline");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawSpline(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawRoundedRectangle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;
  float x4;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::draw-rounded-rectangle");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-rounded-rectangle");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "wx:dc%::draw-rounded-rectangle");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "wx:dc%::draw-rounded-rectangle");
  if (n > 4) {
    x4 = objscheme_unbundle_float(p[4], "wx:dc%::draw-rounded-rectangle");
  } else
    x4 = 20;

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawRoundedRectangle(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawRectangle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::draw-rectangle");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-rectangle");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "wx:dc%::draw-rectangle");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "wx:dc%::draw-rectangle");

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawRectangle(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawPoint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::draw-point");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-point");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawPoint(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCDrawLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:dc%::draw-line");
  x1 = objscheme_unbundle_float(p[1], "wx:dc%::draw-line");
  x2 = objscheme_unbundle_float(p[2], "wx:dc%::draw-line");
  x3 = objscheme_unbundle_float(p[3], "wx:dc%::draw-line");

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->DrawLine(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCClear(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->Clear();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCEndDrawing(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->EndDrawing();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDCBeginDrawing(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxDC *)((Scheme_Class_Object *)obj)->primdata)->BeginDrawing();

  
  
  return scheme_void;
}

static Scheme_Object *objscheme_classname_os_wxDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:dc%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:dc%");
}

void objscheme_setup_wxDC(void *env)
{
if (os_wxDC_class) {
    objscheme_add_global_class(os_wxDC_class,  "wx:dc%", env);
} else {
  os_wxDC_class = objscheme_def_prim_class(env, "wx:dc%", "wx:object%", NULL, 54);

  scheme_add_method_w_arity(os_wxDC_class,"get-class-name",objscheme_classname_os_wxDC, 0, 0);

 scheme_add_method_w_arity(os_wxDC_class, "end-page", os_wxDCEndPage, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "end-doc", os_wxDCEndDoc, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "start-page", os_wxDCStartPage, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "start-doc", os_wxDCStartDoc, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "ok?", os_wxDCOk, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "min-y", os_wxDCMinY, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "min-x", os_wxDCMinX, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "max-y", os_wxDCMaxY, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "max-x", os_wxDCMaxX, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-size", os_wxDCGetSize, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "get-text-foreground", os_wxDCGetTextForeground, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-text-background", os_wxDCGetTextBackground, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-pen", os_wxDCGetPen, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-map-mode", os_wxDCGetMapMode, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-logical-function", os_wxDCGetLogicalFunction, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-font", os_wxDCGetFont, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-brush", os_wxDCGetBrush, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-background", os_wxDCGetBackground, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "set-device-origin", os_wxDCSetDeviceOrigin, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "set-user-scale", os_wxDCSetUserScale, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "set-colour-map", os_wxDCSetColourMap, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-background-mode", os_wxDCSetBackgroundMode, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-map-mode", os_wxDCSetMapMode, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "try-colour", os_wxDCTryColour, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "blit", os_wxDCBlit, 7, 8);
 scheme_add_method_w_arity(os_wxDC_class, "draw-icon", os_wxDCDrawIcon, 3, 3);
 scheme_add_method_w_arity(os_wxDC_class, "set-optimization", os_wxDCSetOptimization, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "get-char-width", os_wxDCGetCharWidth, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-char-height", os_wxDCGetCharHeight, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "get-text-extent", os_wxDCGetTextExtent, 3, 7);
 scheme_add_method_w_arity(os_wxDC_class, "set-text-foreground", os_wxDCSetTextForeground, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-text-background", os_wxDCSetTextBackground, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-pen", os_wxDCSetPen, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-logical-function", os_wxDCSetLogicalFunction, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-font", os_wxDCSetFont, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-brush", os_wxDCSetBrush, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "set-background", os_wxDCSetBackground, 1, 1);
 scheme_add_method_w_arity(os_wxDC_class, "get-clipping-region", os_wxDCGetClippingRegion, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "set-clipping-region", os_wxDCSetClippingRegion, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "destroy-clipping-region", os_wxDCDestroyClippingRegion, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "draw-polygon", os_wxDCDrawPolygon, 1, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-lines", os_wxDCDrawLines, 1, 3);
 scheme_add_method_w_arity(os_wxDC_class, "draw-ellipse", os_wxDCDrawEllipse, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-arc", os_wxDCDrawArc, 6, 6);
 scheme_add_method_w_arity(os_wxDC_class, "draw-text", os_wxDCDrawText, 3, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-spline", os_wxDCDrawSpline, 6, 6);
 scheme_add_method_w_arity(os_wxDC_class, "draw-rounded-rectangle", os_wxDCDrawRoundedRectangle, 4, 5);
 scheme_add_method_w_arity(os_wxDC_class, "draw-rectangle", os_wxDCDrawRectangle, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "draw-point", os_wxDCDrawPoint, 2, 2);
 scheme_add_method_w_arity(os_wxDC_class, "draw-line", os_wxDCDrawLine, 4, 4);
 scheme_add_method_w_arity(os_wxDC_class, "clear", os_wxDCClear, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "end-drawing", os_wxDCEndDrawing, 0, 0);
 scheme_add_method_w_arity(os_wxDC_class, "begin-drawing", os_wxDCBeginDrawing, 0, 0);


  scheme_made_class(os_wxDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxDC, wxTYPE_DC);

}
  scheme_install_xc_global("wx:const-oddeven-rule", scheme_make_integer(wxODDEVEN_RULE), env);
  scheme_install_xc_global("wx:const-winding-rule", scheme_make_integer(wxWINDING_RULE), env);
  scheme_install_xc_global("wx:const-and", scheme_make_integer(wxAND), env);
  scheme_install_xc_global("wx:const-and-invert", scheme_make_integer(wxAND_INVERT), env);
  scheme_install_xc_global("wx:const-and-reverse", scheme_make_integer(wxAND_REVERSE), env);
  scheme_install_xc_global("wx:const-clear", scheme_make_integer(wxCLEAR), env);
  scheme_install_xc_global("wx:const-copy", scheme_make_integer(wxCOPY), env);
  scheme_install_xc_global("wx:const-equiv", scheme_make_integer(wxEQUIV), env);
  scheme_install_xc_global("wx:const-invert", scheme_make_integer(wxINVERT), env);
  scheme_install_xc_global("wx:const-nand", scheme_make_integer(wxNAND), env);
  scheme_install_xc_global("wx:const-nor", scheme_make_integer(wxNOR), env);
  scheme_install_xc_global("wx:const-no-op", scheme_make_integer(wxNO_OP), env);
  scheme_install_xc_global("wx:const-or", scheme_make_integer(wxOR), env);
  scheme_install_xc_global("wx:const-or-invert", scheme_make_integer(wxOR_INVERT), env);
  scheme_install_xc_global("wx:const-or-reverse", scheme_make_integer(wxOR_REVERSE), env);
  scheme_install_xc_global("wx:const-set", scheme_make_integer(wxSET), env);
  scheme_install_xc_global("wx:const-src-invert", scheme_make_integer(wxSRC_INVERT), env);
  scheme_install_xc_global("wx:const-xor", scheme_make_integer(wxXOR), env);
  scheme_install_xc_global("wx:const-colour", scheme_make_integer(wxCOLOR), env);
  scheme_install_xc_global("wx:const-mm-twips", scheme_make_integer(MM_TWIPS), env);
  scheme_install_xc_global("wx:const-mm-points", scheme_make_integer(MM_POINTS), env);
  scheme_install_xc_global("wx:const-mm-metric", scheme_make_integer(MM_METRIC), env);
  scheme_install_xc_global("wx:const-mm-lometric", scheme_make_integer(MM_LOMETRIC), env);
  scheme_install_xc_global("wx:const-mm-text", scheme_make_integer(MM_TEXT), env);
}

int objscheme_istype_wxDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:dc%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxDC(class wxDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxDC *objscheme_unbundle_wxDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxDC *)o->primdata;
  else
    return (wxDC *)o->primdata;
}





// @SETMARK Q = d
// @SETMARK q = d
// @INCLUDE wxs_drwf.xci



class os_wxCanvasDC : public wxCanvasDC {
 public:

  os_wxCanvasDC(Scheme_Object * obj);
  ~os_wxCanvasDC();
};

Scheme_Object *os_wxCanvasDC_class;

os_wxCanvasDC::os_wxCanvasDC(Scheme_Object * o)
: wxCanvasDC()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxCanvasDC::~os_wxCanvasDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxCanvasDCSetPixel(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  class wxColour* x2;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas-dc%::set-pixel");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas-dc%::set-pixel");
  x2 = objscheme_unbundle_wxColour(p[2], "wx:canvas-dc%::set-pixel", 1);

  
  ((wxCanvasDC *)((Scheme_Class_Object *)obj)->primdata)->SetPixel(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDCEndSetPixel(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxCanvasDC *)((Scheme_Class_Object *)obj)->primdata)->EndSetPixel();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDCBeginSetPixel(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxCanvasDC *)((Scheme_Class_Object *)obj)->primdata)->BeginSetPixel();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDCGetPixel(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;
  class wxColour* x2;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas-dc%::get-pixel");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas-dc%::get-pixel");
  x2 = objscheme_unbundle_wxColour(p[2], "wx:canvas-dc%::get-pixel", 1);

  
  r = ((wxCanvasDC *)((Scheme_Class_Object *)obj)->primdata)->GetPixel(x0, x1, x2);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxCanvasDC_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxCanvasDC *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:canvas-dc%::initialization", 0, 0, n, p);

  
  realobj = new os_wxCanvasDC(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxCanvasDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:canvas-dc%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:canvas-dc%");
}

void objscheme_setup_wxCanvasDC(void *env)
{
if (os_wxCanvasDC_class) {
    objscheme_add_global_class(os_wxCanvasDC_class,  "wx:canvas-dc%", env);
} else {
  os_wxCanvasDC_class = objscheme_def_prim_class(env, "wx:canvas-dc%", "wx:dc%", os_wxCanvasDC_ConstructScheme, 5);

  scheme_add_method_w_arity(os_wxCanvasDC_class,"get-class-name",objscheme_classname_os_wxCanvasDC, 0, 0);

 scheme_add_method_w_arity(os_wxCanvasDC_class, "set-pixel", os_wxCanvasDCSetPixel, 3, 3);
 scheme_add_method_w_arity(os_wxCanvasDC_class, "end-set-pixel", os_wxCanvasDCEndSetPixel, 0, 0);
 scheme_add_method_w_arity(os_wxCanvasDC_class, "begin-set-pixel", os_wxCanvasDCBeginSetPixel, 0, 0);
 scheme_add_method_w_arity(os_wxCanvasDC_class, "get-pixel", os_wxCanvasDCGetPixel, 3, 3);


  scheme_made_class(os_wxCanvasDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxCanvasDC, wxTYPE_DC_CANVAS);

}
}

int objscheme_istype_wxCanvasDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxCanvasDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:canvas-dc%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxCanvasDC(class wxCanvasDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_CANVAS) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxCanvasDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxCanvasDC *objscheme_unbundle_wxCanvasDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxCanvasDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxCanvasDC *)o->primdata;
  else
    return (wxCanvasDC *)o->primdata;
}







class os_wxMemoryDC : public wxMemoryDC {
 public:

  os_wxMemoryDC(Scheme_Object * obj);
  os_wxMemoryDC(Scheme_Object * obj, class wxCanvasDC* x0);
  ~os_wxMemoryDC();
};

Scheme_Object *os_wxMemoryDC_class;

os_wxMemoryDC::os_wxMemoryDC(Scheme_Object * o)
: wxMemoryDC()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMemoryDC::os_wxMemoryDC(Scheme_Object * o, class wxCanvasDC* x0)
: wxMemoryDC(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMemoryDC::~os_wxMemoryDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxMemoryDCSelectObject(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBitmap* x0;

  
  x0 = objscheme_unbundle_wxBitmap(p[0], "wx:memory-dc%::select-object", 1);

  
  ((wxMemoryDC *)((Scheme_Class_Object *)obj)->primdata)->SelectObject(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMemoryDC_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMemoryDC *realobj;
  if ((n >= 1) && objscheme_istype_wxCanvasDC(p[0], NULL, 0)) {
    class wxCanvasDC* x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:memory-dc%::initialization (wx:canvas-dc% case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxCanvasDC(p[0], "wx:memory-dc%::initialization (wx:canvas-dc% case)", 0);

    
    realobj = new os_wxMemoryDC(obj, x0);
    
    
  } else  {

    
    if (n != 0) 
      scheme_wrong_count("wx:memory-dc%::initialization (no argument case)", 0, 0, n, p);

    
    realobj = new os_wxMemoryDC(obj);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxMemoryDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:memory-dc%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:memory-dc%");
}

void objscheme_setup_wxMemoryDC(void *env)
{
if (os_wxMemoryDC_class) {
    objscheme_add_global_class(os_wxMemoryDC_class,  "wx:memory-dc%", env);
} else {
  os_wxMemoryDC_class = objscheme_def_prim_class(env, "wx:memory-dc%", "wx:canvas-dc%", os_wxMemoryDC_ConstructScheme, 2);

  scheme_add_method_w_arity(os_wxMemoryDC_class,"get-class-name",objscheme_classname_os_wxMemoryDC, 0, 0);

 scheme_add_method_w_arity(os_wxMemoryDC_class, "select-object", os_wxMemoryDCSelectObject, 1, 1);


  scheme_made_class(os_wxMemoryDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMemoryDC, wxTYPE_DC_MEMORY);

}
}

int objscheme_istype_wxMemoryDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMemoryDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:memory-dc%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMemoryDC(class wxMemoryDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_MEMORY) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMemoryDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMemoryDC *objscheme_unbundle_wxMemoryDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMemoryDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMemoryDC *)o->primdata;
  else
    return (wxMemoryDC *)o->primdata;
}







// @SETMARK Q = d
// @SETMARK q = d
// @INCLUDE wxs_drwf.xci

class os_wxPostScriptDC : public wxPostScriptDC {
 public:

  os_wxPostScriptDC(Scheme_Object * obj, npathname x0, Bool x1 = TRUE, class wxWindow* x2 = NULL);
  ~os_wxPostScriptDC();
};

Scheme_Object *os_wxPostScriptDC_class;

os_wxPostScriptDC::os_wxPostScriptDC(Scheme_Object * o, npathname x0, Bool x1, class wxWindow* x2)
: wxPostScriptDC(x0, x1, x2)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPostScriptDC::~os_wxPostScriptDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxPostScriptDC_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxPostScriptDC *realobj;
  npathname x0;
  Bool x1;
  class wxWindow* x2;

  
  if ((n < 1) ||(n > 3)) 
    scheme_wrong_count("wx:post-script-dc%::initialization", 1, 3, n, p);
  x0 = (npathname)objscheme_unbundle_nullable_pathname(p[0], "wx:post-script-dc%::initialization");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:post-script-dc%::initialization");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_wxWindow(p[2], "wx:post-script-dc%::initialization", 1);
  } else
    x2 = NULL;

  if (x2 && !wxSubType(((wxObject *)x2)->__type, wxTYPE_FRAME) && !wxSubType(((wxObject *)x2)->__type, wxTYPE_DIALOG_BOX)) scheme_wrong_type("wx:post-script-dc::initialization", "frame or dialog box", 2, n, p);
  realobj = new os_wxPostScriptDC(obj, x0, x1, x2);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxPostScriptDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:post-script-dc%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:post-script-dc%");
}

void objscheme_setup_wxPostScriptDC(void *env)
{
if (os_wxPostScriptDC_class) {
    objscheme_add_global_class(os_wxPostScriptDC_class,  "wx:post-script-dc%", env);
} else {
  os_wxPostScriptDC_class = objscheme_def_prim_class(env, "wx:post-script-dc%", "wx:dc%", os_wxPostScriptDC_ConstructScheme, 1);

  scheme_add_method_w_arity(os_wxPostScriptDC_class,"get-class-name",objscheme_classname_os_wxPostScriptDC, 0, 0);



  scheme_made_class(os_wxPostScriptDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxPostScriptDC, wxTYPE_DC_POSTSCRIPT);

}
}

int objscheme_istype_wxPostScriptDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxPostScriptDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:post-script-dc%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxPostScriptDC(class wxPostScriptDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_POSTSCRIPT) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxPostScriptDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxPostScriptDC *objscheme_unbundle_wxPostScriptDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxPostScriptDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxPostScriptDC *)o->primdata;
  else
    return (wxPostScriptDC *)o->primdata;
}


#ifdef wx_x

class basePrinterDC : public wxObject
{
public:
  basePrinterDC(char *, char *, char *, Bool = TRUE)
  {
    scheme_signal_error("wx:printer-dc%::initialization: not supported for X Windows");
  }
};

#else

class basePrinterDC : public wxPrinterDC
{
public:
  basePrinterDC(char *a, char *b, char *c, Bool d = TRUE)
    : wxPrinterDC(
#ifndef wx_mac
		  a, b, c, d
#endif
		  )
  {
  }
};

#endif



// @SETMARK Q = d
// @SETMARK q = d
// @INCLUDE wxs_drwf.xci


class os_basePrinterDC : public basePrinterDC {
 public:

  os_basePrinterDC(Scheme_Object * obj, nstring x0, nstring x1, nstring x2, Bool x3 = TRUE);
  ~os_basePrinterDC();
};

Scheme_Object *os_basePrinterDC_class;

os_basePrinterDC::os_basePrinterDC(Scheme_Object * o, nstring x0, nstring x1, nstring x2, Bool x3)
: basePrinterDC(x0, x1, x2, x3)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_basePrinterDC::~os_basePrinterDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_basePrinterDC_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_basePrinterDC *realobj;
  nstring x0;
  nstring x1;
  nstring x2;
  Bool x3;

  
  if ((n < 3) ||(n > 4)) 
    scheme_wrong_count("wx:printer-dc%::initialization", 3, 4, n, p);
  x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:printer-dc%::initialization");
  x1 = (nstring)objscheme_unbundle_nullable_string(p[1], "wx:printer-dc%::initialization");
  x2 = (nstring)objscheme_unbundle_nullable_string(p[2], "wx:printer-dc%::initialization");
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:printer-dc%::initialization");
  } else
    x3 = TRUE;

  
  realobj = new os_basePrinterDC(obj, x0, x1, x2, x3);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_basePrinterDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:printer-dc%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:printer-dc%");
}

void objscheme_setup_basePrinterDC(void *env)
{
if (os_basePrinterDC_class) {
    objscheme_add_global_class(os_basePrinterDC_class,  "wx:printer-dc%", env);
} else {
  os_basePrinterDC_class = objscheme_def_prim_class(env, "wx:printer-dc%", "wx:dc%", os_basePrinterDC_ConstructScheme, 1);

  scheme_add_method_w_arity(os_basePrinterDC_class,"get-class-name",objscheme_classname_os_basePrinterDC, 0, 0);



  scheme_made_class(os_basePrinterDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_basePrinterDC, wxTYPE_DC_PRINTER);

}
}

int objscheme_istype_basePrinterDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_basePrinterDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:printer-dc%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_basePrinterDC(class basePrinterDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_PRINTER) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_basePrinterDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class basePrinterDC *objscheme_unbundle_basePrinterDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_basePrinterDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_basePrinterDC *)o->primdata;
  else
    return (basePrinterDC *)o->primdata;
}



#ifdef wx_msw

class baseMetaFileDC : public wxMetaFileDC {
public:
  baseMetaFileDC(char *s = NULL);
};

baseMetaFileDC::baseMetaFileDC(char *s)
    : wxMetaFileDC(s)
{
}

#else

class baseMetaFileDC : public wxObject 
{
public:
  baseMetaFileDC(char * = NULL) {
    scheme_signal_error("wx:meta-file-dc%::initialization: only supported for Windows");
  }
};

#endif




// @SETMARK Q = d
// @SETMARK q = d
// @INCLUDE wxs_drwf.xci

class os_baseMetaFileDC : public baseMetaFileDC {
 public:

  os_baseMetaFileDC(Scheme_Object * obj, string x0 = NULL);
  ~os_baseMetaFileDC();
};

Scheme_Object *os_baseMetaFileDC_class;

os_baseMetaFileDC::os_baseMetaFileDC(Scheme_Object * o, string x0)
: baseMetaFileDC(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_baseMetaFileDC::~os_baseMetaFileDC()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_baseMetaFileDC_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_baseMetaFileDC *realobj;
  string x0;

  
  if ((n > 1)) 
    scheme_wrong_count("wx:meta-file-dc%::initialization", 0, 1, n, p);
  if (n > 0) {
    x0 = (string)objscheme_unbundle_string(p[0], "wx:meta-file-dc%::initialization");
  } else
    x0 = NULL;

  
  realobj = new os_baseMetaFileDC(obj, x0);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_baseMetaFileDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:meta-file-dc%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:meta-file-dc%");
}

void objscheme_setup_baseMetaFileDC(void *env)
{
if (os_baseMetaFileDC_class) {
    objscheme_add_global_class(os_baseMetaFileDC_class,  "wx:meta-file-dc%", env);
} else {
  os_baseMetaFileDC_class = objscheme_def_prim_class(env, "wx:meta-file-dc%", "wx:dc%", os_baseMetaFileDC_ConstructScheme, 1);

  scheme_add_method_w_arity(os_baseMetaFileDC_class,"get-class-name",objscheme_classname_os_baseMetaFileDC, 0, 0);



  scheme_made_class(os_baseMetaFileDC_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_baseMetaFileDC, wxTYPE_DC_METAFILE);

}
}

int objscheme_istype_baseMetaFileDC(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_baseMetaFileDC_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:meta-file-dc%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_baseMetaFileDC(class baseMetaFileDC *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DC_METAFILE) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_baseMetaFileDC_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class baseMetaFileDC *objscheme_unbundle_baseMetaFileDC(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_baseMetaFileDC(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_baseMetaFileDC *)o->primdata;
  else
    return (baseMetaFileDC *)o->primdata;
}



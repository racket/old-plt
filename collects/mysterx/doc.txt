
MysterX
=======

MysterX is a toolkit for building Windows applications from
ActiveX and COM components.  Dynamic HTML is used for
component presentation and event handling.

 Installation
 ------------

 Two Windows .DLL's support low-level operations in MysterX.  
 One of them, myspage.dll, must be installed in the Registry, by entering
 `regsvr32 myspage.dll'.  The other, mysterx.dll, is loaded as 
 a MzScheme extension by the file `mysterx.ss' in the mysterx collection. 

 Documents
 ---------

 A MysterX application consists of one or more documents, which are
 instances of the class mx-document%. 

> (make-object mx-document% label width height x y style-list)

  Creates an instance of a MysterX document.  `label' is a string for the document 
  caption, with default "MysterX".  `width', `height', `x', and `y' give the size and 
  placement of the document on the desktop, with defaults provided by Windows if omitted.
  `style-list' may contain any of the symbols 'iconize, 'maximize, 'no-caption,
  'no-system-menu, and 'no-thick-border.

  Methods
  -------

> (send an-mx-document show b)

  If `b' is #f, the document window is hidden.  Otherwise, the window is shown.

> (send an-mx-document insert-html html)

  Inserts the specified HTML string at the beginning of the document.

> (send an-mx-document append-html html)

  Append the specified HTML string at the end of the document.

> (send an-mx-document replace-html html)

  Replace the current HTML in the document with the specified HTML string.

> (send an-mx-document objects)

  Returns a list of COM objects, including ActiveX controls, that occur in the
  document.  The order of the objects is the same as in the document.

> (send an-mx-document register-event-handler tag id f)

  Registers an event handler `f', a procedure of one argument, for an 
  HTML element in the document.  `tag' is a symbol denoting the HTML tag 
  for the element, and `id' is a symbol denoting the identifier for the element.  
  When an event occurs in the document matching `tag' and `id', the procedure `f' 
  is applied to the event.
  
> (send an-mx-document unregister-event-handler tag id)

  Unregisters an event handler for an HTML element in the document.

> (send an-mx-document handle-events)

  Handles events using the registered event handlers.  The event handlers
  are called in a thread separate from the main MzScheme REPL.

> (send an-mx-document stop-handling-events)

  Kills the thread currently handling events for the document.

> (send an-mx-document append-object coclass)

  Append a COM object with class `coclass' to the end of the document.  An 
  instance of <com-object> is returned.

> (send an-mx-document insert-object coclass)

  Inserts a COM object with class `coclass' at the beginning of the document.  An 
  instance of <com-object> is returned.

  Events
  ------

  MysterX events are generated by mouse and keyboard interaction with HTML 
  elements in a document.  Events are instances of the class mx-event%.  
  The action that generated an event can be determined by the following 
  predicates, only one of which may hold:

> (send an-mx-event keypress?)
> (send an-mx-event event-keydown?) 
> (send an-mx-event keyup?)
> (send an-mx-event mousedown?)
> (send an-mx-event mousemove?)
> (send an-mx-event mouseover?)
> (send an-mx-event mouseout?)
> (send an-mx-event mouseup?)
> (send an-mx-event click?)
> (send an-mx-event dblclick?)
> (send an-mx-event error?)
  
  Events have attributes that give detail about the event.

> (send an-mx-event tag)

  Returns a string indicating the HTML tag of the element where the 
  event occurred.

> (send an-mx-event id)

  Returns a string indicating the identifier of the HTML element where
  the event occurred.

> (send an-mx-event from-tag)

  Returns a string indicating the tag of the HTML element where
  the mouse is being moved from.  Return value is valid only for
  events for which `event-mouseover' or `event-mouseout' hold.

> (send an-mx-event from-id)

  Returns a string indicating the identifier of the HTML element where
  the mouse is being moved from.  Return value is valid only for
  events for which `event-mouseover' or `event-mouseout' hold.

> (send an-mx-event to-tag)

  Returns a string indicating the tag of the target HTML element where
  the mouse is being moved to.  Return value is valid only for
  events for which `event-mouseover' or `event-mouseout' hold.

> (send an-mx-event to-id)

  Returns a string indicating the identifier of the target HTML element 
  where the mouse is being moved from.  Return value is valid only for
  events for which `event-mouseover' or `event-mouseout' hold.

> (send an-mx-event x)

  Returns an integer indicating the x-coordinate within the document 
  where the event occurred.

> (send an-mx-event y)

  Returns an integer indicating the y-coordinate within the document 
  where the event occurred.

  COM methods and properties
  --------------------------

  MysterX allows scripting of most COM components from Scheme.  A COM
component can be scripted in MysterX if 1) it supports OLE Automation, 
that is, the IDispatch interface, and 2) publishes type information using
the ITypeInfo interface.

> (all-com-classes)

  Returns a list of strings for all COM classes registered on a system.

> (all-controls)

  Returns a list of strings for all COM classes registered on a system
  that have the "Control" subkey. 

> (methods a-com-object)

  `a-com-object' is a COM object.  Returns a list of strings indicating 
  the names of methods.

> (method-type a-com-object method-name)

  `obj' is a <com-object>, and `method-name' is a string.  Returns a list 
  of symbols indicating the type of the specified method.

> (invoke-method a-com-object method-name ...)

  `a-com-object' is a <com-object>, and `method-name' is a string.  Invokes the requested method
  using the arguments given.

> (get-properties a-com-object)

  `a-com-object' has type <com-object>.  Returns a list of strings indicating the names
  of readable properties in the object.

> (get-property-type a-com-object property-name)

  `a-com-object' is a <com-object>, and `property-name' is a string.  Returns a list of symbols indicating
  the type of the specified property.

> (get-property a-com-object property-name)

  `a-com-object' is a <com-object>, and `property-name' is a string.  Returns the value of
  the requested property.

> (set-properties a-com-object)

  `a-com-object' has type <com-object>.  Returns a list of strings 
  indicating the names of writable properties in the object.

> (set-property-type a-com-object property-name)

  `a-com-object' is a <com-object>, and `property-name' is a string.  Returns a list of symbols indicating
  the type of the specified property.

> (set-property! a-com-object property-name val)

  `a-com-object' is a <com-object>, `property-name' is a string, and 
  `val' is a value of suitable type.  Sets the value of the specified property.

  MysterX types
  -------------

  There are a few special types that appear in the types of COM component
  methods and properties.  

> boolean

  A boolean.  When a boolean is required in argument position, MysterX will interpret 
  #f as false, and any other value as true.

> short-int

  A 16-bit integer, with value -32768 <= n <= 32767.

> mx-currency

  A currency value.  Currently, there is no way to construct such values,
  though they may be returned by COM objects.
  
> mx-date

  A date value.  Currently, there is no way to construct such values,
  though they may be returned by COM objects.
  
> mx-scode

  An error value.  Currently, there is no way to construct such values,
  though they may be returned by COM objects.
  
> mx-unknown-com-object

  An interface pointer for a COM object.  Currently, there is no way to 
  construct such values, though they may be returned by COM objects.
  
> mx-any

  A method or property requiring a value of mx-any will accept values 
  of any of these Scheme types: char, int, float, real, and string,
  as well as the values #t and #f, as well as values of the COM-specific
  types <mx-currency>, <mx-date>, <mx-scode>, and <mx-unknown-com-object>.

  Miscellaneous
  -------------

> (coclass->html name)

  Returns a string containing HTML which when inserted into a document loads
  the COM object given by `name'.  This procedure is suitable for placing
  ActiveX controls within complex HTML.

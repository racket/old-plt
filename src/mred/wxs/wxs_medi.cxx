/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_medi.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_media.h"





#include "wxscheme.h"
#include "wxs_medi.h"
#include "wxscomon.h"


static void *cconvert(wxMediaBuffer *b, double x, double y, int todc)
{
  double dcx, dcy;
  wxMediaAdmin *admin;
  Scheme_Object *a[2];

  admin = b->GetAdmin();
  if (admin) {
    float dx, dy;
    admin->GetDC(&dx, &dy);
    if (!todc) {
      dcx = dx + x;
      dcy = dy + y;
    } else {
      dcx = x - dx;
      dcy = y - dy;
    }
  } else {
    dcx = x;
    dcy = y;
  }

  a[0] = objscheme_bundle_double(dcx);
  a[1] = objscheme_bundle_double(dcy);

  return scheme_values(2, a);
}

static void *wxbBufferToDC(wxMediaBuffer *b, double x, double y)
{
  return cconvert(b, x, y, 1);
}

static void *wxbDCToBuffer(wxMediaBuffer *b, double x, double y)
{
  return cconvert(b, x, y, 0);
}

static void DoEditCommand(wxMediaBuffer *b, int cmd, Bool bl, long t)
{
  b->DoEdit(cmd, bl, t);
}



static Scheme_Object *bufferType_wxEDIT_BUFFER_sym = NULL;
static Scheme_Object *bufferType_wxPASTEBOARD_BUFFER_sym = NULL;

static void init_symset_bufferType(void) {
  bufferType_wxEDIT_BUFFER_sym = scheme_intern_symbol("edit-buffer");
  bufferType_wxPASTEBOARD_BUFFER_sym = scheme_intern_symbol("pasteboard-buffer");
}

static int unbundle_symset_bufferType(Scheme_Object *v, const char *where) {
  if (!bufferType_wxPASTEBOARD_BUFFER_sym) init_symset_bufferType();
  if (0) { }
  else if (v == bufferType_wxEDIT_BUFFER_sym) { return wxEDIT_BUFFER; }
  else if (v == bufferType_wxPASTEBOARD_BUFFER_sym) { return wxPASTEBOARD_BUFFER; }
  if (where) scheme_wrong_type(where, "bufferType symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_bufferType(Scheme_Object *v, const char *where) {
  if (!bufferType_wxPASTEBOARD_BUFFER_sym) init_symset_bufferType();
  if (0) { }
  else if (v == bufferType_wxEDIT_BUFFER_sym) { return 1; }
  else if (v == bufferType_wxPASTEBOARD_BUFFER_sym) { return 1; }
  if (where) scheme_wrong_type(where, "bufferType symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_bufferType(int v) {
  if (!bufferType_wxPASTEBOARD_BUFFER_sym) init_symset_bufferType();
  switch (v) {
  case wxEDIT_BUFFER: return bufferType_wxEDIT_BUFFER_sym;
  case wxPASTEBOARD_BUFFER: return bufferType_wxPASTEBOARD_BUFFER_sym;
  default: return NULL;
  }
}


static Scheme_Object *fileType_wxMEDIA_FF_GUESS_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_STD_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_TEXT_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_SAME_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_COPY_sym = NULL;

static void init_symset_fileType(void) {
  fileType_wxMEDIA_FF_GUESS_sym = scheme_intern_symbol("media-ff-guess");
  fileType_wxMEDIA_FF_STD_sym = scheme_intern_symbol("media-ff-std");
  fileType_wxMEDIA_FF_TEXT_sym = scheme_intern_symbol("media-ff-text");
  fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym = scheme_intern_symbol("media-ff-text-force-cr");
  fileType_wxMEDIA_FF_SAME_sym = scheme_intern_symbol("media-ff-same");
  fileType_wxMEDIA_FF_COPY_sym = scheme_intern_symbol("media-ff-copy");
}

static int unbundle_symset_fileType(Scheme_Object *v, const char *where) {
  if (!fileType_wxMEDIA_FF_COPY_sym) init_symset_fileType();
  if (0) { }
  else if (v == fileType_wxMEDIA_FF_GUESS_sym) { return wxMEDIA_FF_GUESS; }
  else if (v == fileType_wxMEDIA_FF_STD_sym) { return wxMEDIA_FF_STD; }
  else if (v == fileType_wxMEDIA_FF_TEXT_sym) { return wxMEDIA_FF_TEXT; }
  else if (v == fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym) { return wxMEDIA_FF_TEXT_FORCE_CR; }
  else if (v == fileType_wxMEDIA_FF_SAME_sym) { return wxMEDIA_FF_SAME; }
  else if (v == fileType_wxMEDIA_FF_COPY_sym) { return wxMEDIA_FF_COPY; }
  if (where) scheme_wrong_type(where, "fileType symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_fileType(Scheme_Object *v, const char *where) {
  if (!fileType_wxMEDIA_FF_COPY_sym) init_symset_fileType();
  if (0) { }
  else if (v == fileType_wxMEDIA_FF_GUESS_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_STD_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_TEXT_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_SAME_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_COPY_sym) { return 1; }
  if (where) scheme_wrong_type(where, "fileType symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_fileType(int v) {
  if (!fileType_wxMEDIA_FF_COPY_sym) init_symset_fileType();
  switch (v) {
  case wxMEDIA_FF_GUESS: return fileType_wxMEDIA_FF_GUESS_sym;
  case wxMEDIA_FF_STD: return fileType_wxMEDIA_FF_STD_sym;
  case wxMEDIA_FF_TEXT: return fileType_wxMEDIA_FF_TEXT_sym;
  case wxMEDIA_FF_TEXT_FORCE_CR: return fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym;
  case wxMEDIA_FF_SAME: return fileType_wxMEDIA_FF_SAME_sym;
  case wxMEDIA_FF_COPY: return fileType_wxMEDIA_FF_COPY_sym;
  default: return NULL;
  }
}


static Scheme_Object *focus_wxFOCUS_IMMEDIATE_sym = NULL;
static Scheme_Object *focus_wxFOCUS_DISPLAY_sym = NULL;
static Scheme_Object *focus_wxFOCUS_GLOBAL_sym = NULL;

static void init_symset_focus(void) {
  focus_wxFOCUS_IMMEDIATE_sym = scheme_intern_symbol("focus-immediate");
  focus_wxFOCUS_DISPLAY_sym = scheme_intern_symbol("focus-display");
  focus_wxFOCUS_GLOBAL_sym = scheme_intern_symbol("focus-global");
}

static int unbundle_symset_focus(Scheme_Object *v, const char *where) {
  if (!focus_wxFOCUS_GLOBAL_sym) init_symset_focus();
  if (0) { }
  else if (v == focus_wxFOCUS_IMMEDIATE_sym) { return wxFOCUS_IMMEDIATE; }
  else if (v == focus_wxFOCUS_DISPLAY_sym) { return wxFOCUS_DISPLAY; }
  else if (v == focus_wxFOCUS_GLOBAL_sym) { return wxFOCUS_GLOBAL; }
  if (where) scheme_wrong_type(where, "focus symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_focus(Scheme_Object *v, const char *where) {
  if (!focus_wxFOCUS_GLOBAL_sym) init_symset_focus();
  if (0) { }
  else if (v == focus_wxFOCUS_IMMEDIATE_sym) { return 1; }
  else if (v == focus_wxFOCUS_DISPLAY_sym) { return 1; }
  else if (v == focus_wxFOCUS_GLOBAL_sym) { return 1; }
  if (where) scheme_wrong_type(where, "focus symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_focus(int v) {
  if (!focus_wxFOCUS_GLOBAL_sym) init_symset_focus();
  switch (v) {
  case wxFOCUS_IMMEDIATE: return focus_wxFOCUS_IMMEDIATE_sym;
  case wxFOCUS_DISPLAY: return focus_wxFOCUS_DISPLAY_sym;
  case wxFOCUS_GLOBAL: return focus_wxFOCUS_GLOBAL_sym;
  default: return NULL;
  }
}


static Scheme_Object *caret_wxSNIP_DRAW_NO_CARET_sym = NULL;
static Scheme_Object *caret_wxSNIP_DRAW_SHOW_CARET_sym = NULL;
static Scheme_Object *caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym = NULL;

static void init_symset_caret(void) {
  caret_wxSNIP_DRAW_NO_CARET_sym = scheme_intern_symbol("snip-draw-no-caret");
  caret_wxSNIP_DRAW_SHOW_CARET_sym = scheme_intern_symbol("snip-draw-show-caret");
  caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym = scheme_intern_symbol("snip-draw-show-inactive-caret");
}

static int unbundle_symset_caret(Scheme_Object *v, const char *where) {
  if (!caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) init_symset_caret();
  if (0) { }
  else if (v == caret_wxSNIP_DRAW_NO_CARET_sym) { return wxSNIP_DRAW_NO_CARET; }
  else if (v == caret_wxSNIP_DRAW_SHOW_CARET_sym) { return wxSNIP_DRAW_SHOW_CARET; }
  else if (v == caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) { return wxSNIP_DRAW_SHOW_INACTIVE_CARET; }
  if (where) scheme_wrong_type(where, "caret symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_caret(Scheme_Object *v, const char *where) {
  if (!caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) init_symset_caret();
  if (0) { }
  else if (v == caret_wxSNIP_DRAW_NO_CARET_sym) { return 1; }
  else if (v == caret_wxSNIP_DRAW_SHOW_CARET_sym) { return 1; }
  else if (v == caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) { return 1; }
  if (where) scheme_wrong_type(where, "caret symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_caret(int v) {
  if (!caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) init_symset_caret();
  switch (v) {
  case wxSNIP_DRAW_NO_CARET: return caret_wxSNIP_DRAW_NO_CARET_sym;
  case wxSNIP_DRAW_SHOW_CARET: return caret_wxSNIP_DRAW_SHOW_CARET_sym;
  case wxSNIP_DRAW_SHOW_INACTIVE_CARET: return caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym;
  default: return NULL;
  }
}


static Scheme_Object *editOp_wxEDIT_UNDO_sym = NULL;
static Scheme_Object *editOp_wxEDIT_REDO_sym = NULL;
static Scheme_Object *editOp_wxEDIT_CLEAR_sym = NULL;
static Scheme_Object *editOp_wxEDIT_CUT_sym = NULL;
static Scheme_Object *editOp_wxEDIT_COPY_sym = NULL;
static Scheme_Object *editOp_wxEDIT_PASTE_sym = NULL;
static Scheme_Object *editOp_wxEDIT_KILL_sym = NULL;
static Scheme_Object *editOp_wxEDIT_INSERT_TEXT_BOX_sym = NULL;
static Scheme_Object *editOp_wxEDIT_INSERT_GRAPHIC_BOX_sym = NULL;
static Scheme_Object *editOp_wxEDIT_INSERT_IMAGE_sym = NULL;
static Scheme_Object *editOp_wxEDIT_SELECT_ALL_sym = NULL;

static void init_symset_editOp(void) {
  editOp_wxEDIT_UNDO_sym = scheme_intern_symbol("edit-undo");
  editOp_wxEDIT_REDO_sym = scheme_intern_symbol("edit-redo");
  editOp_wxEDIT_CLEAR_sym = scheme_intern_symbol("edit-clear");
  editOp_wxEDIT_CUT_sym = scheme_intern_symbol("edit-cut");
  editOp_wxEDIT_COPY_sym = scheme_intern_symbol("edit-copy");
  editOp_wxEDIT_PASTE_sym = scheme_intern_symbol("edit-paste");
  editOp_wxEDIT_KILL_sym = scheme_intern_symbol("edit-kill");
  editOp_wxEDIT_INSERT_TEXT_BOX_sym = scheme_intern_symbol("edit-insert-text-box");
  editOp_wxEDIT_INSERT_GRAPHIC_BOX_sym = scheme_intern_symbol("edit-insert-graphic-box");
  editOp_wxEDIT_INSERT_IMAGE_sym = scheme_intern_symbol("edit-insert-image");
  editOp_wxEDIT_SELECT_ALL_sym = scheme_intern_symbol("edit-select-all");
}

static int unbundle_symset_editOp(Scheme_Object *v, const char *where) {
  if (!editOp_wxEDIT_SELECT_ALL_sym) init_symset_editOp();
  if (0) { }
  else if (v == editOp_wxEDIT_UNDO_sym) { return wxEDIT_UNDO; }
  else if (v == editOp_wxEDIT_REDO_sym) { return wxEDIT_REDO; }
  else if (v == editOp_wxEDIT_CLEAR_sym) { return wxEDIT_CLEAR; }
  else if (v == editOp_wxEDIT_CUT_sym) { return wxEDIT_CUT; }
  else if (v == editOp_wxEDIT_COPY_sym) { return wxEDIT_COPY; }
  else if (v == editOp_wxEDIT_PASTE_sym) { return wxEDIT_PASTE; }
  else if (v == editOp_wxEDIT_KILL_sym) { return wxEDIT_KILL; }
  else if (v == editOp_wxEDIT_INSERT_TEXT_BOX_sym) { return wxEDIT_INSERT_TEXT_BOX; }
  else if (v == editOp_wxEDIT_INSERT_GRAPHIC_BOX_sym) { return wxEDIT_INSERT_GRAPHIC_BOX; }
  else if (v == editOp_wxEDIT_INSERT_IMAGE_sym) { return wxEDIT_INSERT_IMAGE; }
  else if (v == editOp_wxEDIT_SELECT_ALL_sym) { return wxEDIT_SELECT_ALL; }
  if (where) scheme_wrong_type(where, "editOp symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_editOp(Scheme_Object *v, const char *where) {
  if (!editOp_wxEDIT_SELECT_ALL_sym) init_symset_editOp();
  if (0) { }
  else if (v == editOp_wxEDIT_UNDO_sym) { return 1; }
  else if (v == editOp_wxEDIT_REDO_sym) { return 1; }
  else if (v == editOp_wxEDIT_CLEAR_sym) { return 1; }
  else if (v == editOp_wxEDIT_CUT_sym) { return 1; }
  else if (v == editOp_wxEDIT_COPY_sym) { return 1; }
  else if (v == editOp_wxEDIT_PASTE_sym) { return 1; }
  else if (v == editOp_wxEDIT_KILL_sym) { return 1; }
  else if (v == editOp_wxEDIT_INSERT_TEXT_BOX_sym) { return 1; }
  else if (v == editOp_wxEDIT_INSERT_GRAPHIC_BOX_sym) { return 1; }
  else if (v == editOp_wxEDIT_INSERT_IMAGE_sym) { return 1; }
  else if (v == editOp_wxEDIT_SELECT_ALL_sym) { return 1; }
  if (where) scheme_wrong_type(where, "editOp symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_editOp(int v) {
  if (!editOp_wxEDIT_SELECT_ALL_sym) init_symset_editOp();
  switch (v) {
  case wxEDIT_UNDO: return editOp_wxEDIT_UNDO_sym;
  case wxEDIT_REDO: return editOp_wxEDIT_REDO_sym;
  case wxEDIT_CLEAR: return editOp_wxEDIT_CLEAR_sym;
  case wxEDIT_CUT: return editOp_wxEDIT_CUT_sym;
  case wxEDIT_COPY: return editOp_wxEDIT_COPY_sym;
  case wxEDIT_PASTE: return editOp_wxEDIT_PASTE_sym;
  case wxEDIT_KILL: return editOp_wxEDIT_KILL_sym;
  case wxEDIT_INSERT_TEXT_BOX: return editOp_wxEDIT_INSERT_TEXT_BOX_sym;
  case wxEDIT_INSERT_GRAPHIC_BOX: return editOp_wxEDIT_INSERT_GRAPHIC_BOX_sym;
  case wxEDIT_INSERT_IMAGE: return editOp_wxEDIT_INSERT_IMAGE_sym;
  case wxEDIT_SELECT_ALL: return editOp_wxEDIT_SELECT_ALL_sym;
  default: return NULL;
  }
}


static Scheme_Object *printMethod_0_sym = NULL;
static Scheme_Object *printMethod_1_sym = NULL;
static Scheme_Object *printMethod_2_sym = NULL;

static void init_symset_printMethod(void) {
  printMethod_0_sym = scheme_intern_symbol("print-standard");
  printMethod_1_sym = scheme_intern_symbol("print-postscript");
  printMethod_2_sym = scheme_intern_symbol("print-ask");
}

static int unbundle_symset_printMethod(Scheme_Object *v, const char *where) {
  if (!printMethod_2_sym) init_symset_printMethod();
  if (0) { }
  else if (v == printMethod_0_sym) { return 0; }
  else if (v == printMethod_1_sym) { return 1; }
  else if (v == printMethod_2_sym) { return 2; }
  if (where) scheme_wrong_type(where, "printMethod symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_printMethod(Scheme_Object *v, const char *where) {
  if (!printMethod_2_sym) init_symset_printMethod();
  if (0) { }
  else if (v == printMethod_0_sym) { return 1; }
  else if (v == printMethod_1_sym) { return 1; }
  else if (v == printMethod_2_sym) { return 1; }
  if (where) scheme_wrong_type(where, "printMethod symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_printMethod(int v) {
  if (!printMethod_2_sym) init_symset_printMethod();
  switch (v) {
  case 0: return printMethod_0_sym;
  case 1: return printMethod_1_sym;
  case 2: return printMethod_2_sym;
  default: return NULL;
  }
}






/* 
   X = Not meant for virtual, defined in wxMediaEdit/wxMediaPasteboard
       and overloaded there
   Y = Virtual, defined in wxMediaEdit/wxMediaPasteboard
   Z = Virtual, defined in wxMediaBuffer 
*/























// X are Methods not intended to be overriden by the user,
// but acutally are implemented with virtual

// These don't use `pathname' because they expand internally





























 

class os_wxMediaBuffer : public wxMediaBuffer {
 public:

  ~os_wxMediaBuffer();
  void GetViewSize(float* x0, float* x1);
  class wxDC* GetDC();
  nstring PutFile(nstring x0, nstring x1);
  nstring GetFile(nstring x0);
  void AfterEditSequence();
  void OnEditSequence();
  void AfterLoadFile(Bool x0);
  Bool OnLoadFile(string x0, int x1);
  void AfterSaveFile(Bool x0);
  Bool OnSaveFile(string x0, int x1);
  class wxSnip* OnNewBox(int x0);
  class wxImageSnip* OnNewImageSnip(nstring x0, long x1, Bool x2, Bool x3);
  void InvalidateBitmapCache(float x0 = 0.0, float x1 = 0.0, float x2 = -1.0, float x3 = -1.0);
  void OnPaint(Bool x0, class wxDC* x1, float x2, float x3, float x4, float x5, float x6, float x7, int x8);
  Bool WriteFootersToFile(class wxMediaStreamOut& x0);
  Bool WriteHeadersToFile(class wxMediaStreamOut& x0);
  Bool ReadFooterFromFile(class wxMediaStreamIn& x0, string x1);
  Bool ReadHeaderFromFile(class wxMediaStreamIn& x0, string x1);
  void SetFilename(string x0, Bool x1 = FALSE);
  Bool ReleaseSnip(class wxSnip* x0);
  void SetModified(Bool x0);
  void SetSnipData(class wxSnip* x0, class wxBufferData* x1);
  class wxBufferData* GetSnipData(class wxSnip* x0);
  void NeedsUpdate(class wxSnip* x0, float x1, float x2, float x3, float x4);
  void Resized(class wxSnip* x0, Bool x1);
  void SetCaretOwner(class wxSnip* x0, int x1 = wxFOCUS_IMMEDIATE);
  Bool ScrollTo(class wxSnip* x0, float x1, float x2, float x3, float x4, Bool x5);
  void OnChange();
  void OnFocus(Bool x0);
  void OnDefaultChar(class wxKeyEvent& x0);
  void OnDefaultEvent(class wxMouseEvent& x0);
  void OnLocalChar(class wxKeyEvent& x0);
  void OnLocalEvent(class wxMouseEvent& x0);
  void SizeCacheInvalid();
  void OwnCaret(Bool x0);
  void Refresh(float x0, float x1, float x2, float x3, Bool x4);
  class wxCursor* AdjustCursor(class wxMouseEvent& x0);
  void OnChar(class wxKeyEvent& x0);
  void OnEvent(class wxMouseEvent& x0);
  void CopySelfTo(class wxMediaBuffer* x0);
  class wxMediaBuffer* CopySelf();
};

Scheme_Object *os_wxMediaBuffer_class;

os_wxMediaBuffer::~os_wxMediaBuffer()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxMediaBuffer::GetViewSize(float* x0, float* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "get-view-size", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::GetViewSize(x0, x1);
  } else {
  
  p[0] = ((x0) ? objscheme_box(scheme_make_double((*x0))) : scheme_null);
  p[1] = ((x1) ? objscheme_box(scheme_make_double((*x1))) : scheme_null);
  

  v = scheme_apply(method, 2, p);
  
  if (x0) *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-buffer%::get-view-size"", extracting return value via box"), "wx:media-buffer%::get-view-size"", extracting return value via box");
  if (x1) *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-buffer%::get-view-size"", extracting return value via box"), "wx:media-buffer%::get-view-size"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxDC* os_wxMediaBuffer::GetDC()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "get-dc", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::GetDC();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxDC(v, "wx:media-buffer%::get-dc"", extracting return value", 0);
  }
}

nstring os_wxMediaBuffer::PutFile(nstring x0, nstring x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "put-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::PutFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = objscheme_bundle_string((char *)x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (nstring)objscheme_unbundle_nullable_string(v, "wx:media-buffer%::put-file"", extracting return value");
  }
}

nstring os_wxMediaBuffer::GetFile(nstring x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "get-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::GetFile(x0);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (nstring)objscheme_unbundle_nullable_string(v, "wx:media-buffer%::get-file"", extracting return value");
  }
}

void os_wxMediaBuffer::AfterEditSequence()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "after-edit-sequence", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::AfterEditSequence();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OnEditSequence()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-edit-sequence", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::OnEditSequence();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::AfterLoadFile(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "after-load-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::AfterLoadFile(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaBuffer::OnLoadFile(string x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-load-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::OnLoadFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = bundle_symset_fileType(x1);;
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-buffer%::on-load-file"", extracting return value");
  }
}

void os_wxMediaBuffer::AfterSaveFile(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "after-save-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::AfterSaveFile(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaBuffer::OnSaveFile(string x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-save-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::OnSaveFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = bundle_symset_fileType(x1);;
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-buffer%::on-save-file"", extracting return value");
  }
}

class wxSnip* os_wxMediaBuffer::OnNewBox(int x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-new-box", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::OnNewBox(x0);
  } else {
  
  p[0] = bundle_symset_bufferType(x0);;
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:media-buffer%::on-new-box"", extracting return value", 0);
  }
}

class wxImageSnip* os_wxMediaBuffer::OnNewImageSnip(nstring x0, long x1, Bool x2, Bool x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-new-image-snip", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::OnNewImageSnip(x0, x1, x2, x3);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = scheme_make_integer(x1);
  p[2] = (x2 ? scheme_true : scheme_false);
  p[3] = (x3 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxImageSnip(v, "wx:media-buffer%::on-new-image-snip"", extracting return value", 0);
  }
}

void os_wxMediaBuffer::InvalidateBitmapCache(float x0, float x1, float x2, float x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "invalidate-bitmap-cache", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OnPaint(Bool x0, class wxDC* x1, float x2, float x3, float x4, float x5, float x6, float x7, int x8)
{
  Scheme_Object *p[9];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-paint", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::OnPaint(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  p[1] = objscheme_bundle_wxDC(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = scheme_make_double(x5);
  p[6] = scheme_make_double(x6);
  p[7] = scheme_make_double(x7);
  p[8] = bundle_symset_caret(x8);;
  

  v = scheme_apply(method, 9, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaBuffer::WriteFootersToFile(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "write-footers-to-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::WriteFootersToFile(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-buffer%::write-footers-to-file"", extracting return value");
  }
}

Bool os_wxMediaBuffer::WriteHeadersToFile(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "write-headers-to-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::WriteHeadersToFile(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-buffer%::write-headers-to-file"", extracting return value");
  }
}

Bool os_wxMediaBuffer::ReadFooterFromFile(class wxMediaStreamIn& x0, string x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "read-footer-from-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::ReadFooterFromFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamIn(&x0);
  p[1] = objscheme_bundle_string((char *)x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-buffer%::read-footer-from-file"", extracting return value");
  }
}

Bool os_wxMediaBuffer::ReadHeaderFromFile(class wxMediaStreamIn& x0, string x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "read-header-from-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaBuffer::ReadHeaderFromFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamIn(&x0);
  p[1] = objscheme_bundle_string((char *)x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-buffer%::read-header-from-file"", extracting return value");
  }
}

void os_wxMediaBuffer::SetFilename(string x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "set-filename", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaBuffer::ReleaseSnip(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "release-snip", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return 0;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-buffer%::release-snip"", extracting return value");
  }
}

void os_wxMediaBuffer::SetModified(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "set-modified", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::SetModified(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::SetSnipData(class wxSnip* x0, class wxBufferData* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "set-snip-data", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = objscheme_bundle_wxBufferData(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxBufferData* os_wxMediaBuffer::GetSnipData(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "get-snip-data", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return 0;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxBufferData(v, "wx:media-buffer%::get-snip-data"", extracting return value", 1);
  }
}

void os_wxMediaBuffer::NeedsUpdate(class wxSnip* x0, float x1, float x2, float x3, float x4)
{
  Scheme_Object *p[5];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "needs-update", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  

  v = scheme_apply(method, 5, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::Resized(class wxSnip* x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "resized", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::SetCaretOwner(class wxSnip* x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "set-caret-owner", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = bundle_symset_focus(x1);;
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaBuffer::ScrollTo(class wxSnip* x0, float x1, float x2, float x3, float x4, Bool x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "scroll-to", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return 0;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = (x5 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-buffer%::scroll-to"", extracting return value");
  }
}

void os_wxMediaBuffer::OnChange()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-change", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OnFocus(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::OnFocus(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OnDefaultChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-default-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OnDefaultEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-default-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OnLocalChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-local-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::OnLocalChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OnLocalEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-local-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaBuffer::OnLocalEvent(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::SizeCacheInvalid()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "size-cache-invalid", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OwnCaret(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "own-caret", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::Refresh(float x0, float x1, float x2, float x3, Bool x4)
{
  Scheme_Object *p[5];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "refresh", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = (x4 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 5, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxCursor* os_wxMediaBuffer::AdjustCursor(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "adjust-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return NULL;
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxCursor(v, "wx:media-buffer%::adjust-cursor"", extracting return value", 1);
  }
}

void os_wxMediaBuffer::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::OnEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaBuffer::CopySelfTo(class wxMediaBuffer* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "copy-self-to", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxMediaBuffer(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxMediaBuffer* os_wxMediaBuffer::CopySelf()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaBuffer_class, "copy-self", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return 0;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxMediaBuffer(v, "wx:media-buffer%::copy-self"", extracting return value", 0);
  }
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferwxbDCToBuffer(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  void* r;
  objscheme_check_valid(obj);
  double x0;
  double x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::dc-location-to-buffer-location");
  x1 = objscheme_unbundle_float(p[1], "wx:media-buffer%::dc-location-to-buffer-location");

  
  r = wxbDCToBuffer(((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata), x0, x1);

  
  
  return ((Scheme_Object *)r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferwxbBufferToDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  void* r;
  objscheme_check_valid(obj);
  double x0;
  double x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::buffer-location-to-dc-location");
  x1 = objscheme_unbundle_float(p[1], "wx:media-buffer%::buffer-location-to-dc-location");

  
  r = wxbBufferToDC(((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata), x0, x1);

  
  
  return ((Scheme_Object *)r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetInactiveCaretThreshold(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-buffer%::set-inactive-caret-threshold");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetInactiveCaretThreshold(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetInactiveCaretThreshold(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetInactiveCaretThreshold();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetFocusSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetFocusSnip();

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferEndWriteHeaderFooterToFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;
  long x1;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-buffer%::end-write-header-footer-to-file", 0);
  x1 = objscheme_unbundle_integer(p[1], "wx:media-buffer%::end-write-header-footer-to-file");

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->EndWriteHeaderFooterToFile(*x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferBeginWriteHeaderFooterToFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;
  string x1;
  long _x2;
  long* x2 = &_x2;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-buffer%::begin-write-header-footer-to-file", 0);
  x1 = (string)objscheme_unbundle_string(p[1], "wx:media-buffer%::begin-write-header-footer-to-file");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:media-buffer%::begin-write-header-footer-to-file", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_integer(objscheme_unbox(p[2], "wx:media-buffer%::begin-write-header-footer-to-file"), "wx:media-buffer%::begin-write-header-footer-to-file");

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->BeginWriteHeaderFooterToFile(*x0, x1, x2);

  
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_integer(_x2));
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferPrint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  nstring x0;
  Bool x1;
  Bool x2;
  int x3;

  
  if (n > 0) {
    x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-buffer%::print");
  } else
    x0 = NULL;
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-buffer%::print");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-buffer%::print");
  } else
    x2 = FALSE;
  if (n > 3) {
    x3 = unbundle_symset_printMethod(p[3], "wx:media-buffer%::print");;
  } else
    x3 = 0;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Print(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferInsertImage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  nstring x0;
  long x1;
  Bool x2;
  Bool x3;

  
  if (n > 0) {
    x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-buffer%::insert-image");
  } else
    x0 = NULL;
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-buffer%::insert-image");
  } else
    x1 = -1;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-buffer%::insert-image");
  } else
    x2 = FALSE;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:media-buffer%::insert-image");
  } else
    x3 = TRUE;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->InsertImage(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferInsertBox(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  if (n > 0) {
    x0 = unbundle_symset_bufferType(p[0], "wx:media-buffer%::insert-box");;
  } else
    x0 = wxEDIT_BUFFER;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->InsertBox(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetFilename(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  Bool _x0;
  Bool* x0 = &_x0;

  
  if (n > 0) {
    if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_bool(objscheme_unbox(p[0], "wx:media-buffer%::get-filename"), "wx:media-buffer%::get-filename");
  } else
    x0 = NULL;

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetFilename(x0);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], (_x0 ? scheme_true : scheme_false));
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferModified(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Modified();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferLock(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::lock");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Lock(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxCursor* x0;
  Bool x1;

  
  x0 = objscheme_unbundle_wxCursor(p[0], "wx:media-buffer%::set-cursor", 1);
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-buffer%::set-cursor");
  } else
    x1 = TRUE;

  if (x0 && !x0->Ok()) return scheme_void;
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetCursor(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetLoadOverwritesStyles(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetLoadOverwritesStyles();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetLoadOverwritesStyles(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::set-load-overwrites-styles");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetLoadOverwritesStyles(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetStyleList(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleList* x0;

  
  x0 = objscheme_unbundle_wxStyleList(p[0], "wx:media-buffer%::set-style-list", 0);

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetStyleList(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetStyleList(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleList* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetStyleList();

  
  
  return objscheme_bundle_wxStyleList(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferAddBufferFunctions(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeymap* x0;

  
  x0 = objscheme_unbundle_wxKeymap(p[0], "wx:media-buffer%::add-buffer-functions", 0);

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->AddBufferFunctions(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetKeymap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxKeymap* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetKeymap();

  
  
  return objscheme_bundle_wxKeymap(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetKeymap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeymap* x0;

  
  if (n > 0) {
    x0 = objscheme_unbundle_wxKeymap(p[0], "wx:media-buffer%::set-keymap", 1);
  } else
    x0 = NULL;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetKeymap(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferDoEditCommand(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;
  long x2;

  
  x0 = unbundle_symset_editOp(p[0], "wx:media-buffer%::do-edit-command");;
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-buffer%::do-edit-command");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:media-buffer%::do-edit-command");
  } else
    x2 = 0;

  
  DoEditCommand(((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata), x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferDoFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-buffer%::do-font");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-buffer%::do-font");
  } else
    x1 = TRUE;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->DoFont(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferDoEdit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;
  long x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-buffer%::do-edit");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-buffer%::do-edit");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:media-buffer%::do-edit");
  } else
    x2 = 0;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->DoEdit(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferAppendFontItems(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  class wxMenu* x0;
  int x1;

  
  x0 = objscheme_unbundle_wxMenu(p[0], "wx:media-buffer%::append-font-items", 0);
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-buffer%::append-font-items");
  } else
    x1 = 0;

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->AppendFontItems(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferAppendEditItems(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  class wxMenu* x0;
  int x1;

  
  x0 = objscheme_unbundle_wxMenu(p[0], "wx:media-buffer%::append-edit-items", 0);
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-buffer%::append-edit-items");
  } else
    x1 = 0;

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->AppendEditItems(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetMaxUndoHistory(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetMaxUndoHistory();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetMaxUndoHistory(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-buffer%::set-max-undo-history");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetMaxUndoHistory(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferClearUndos(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ClearUndos();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferRedo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Redo();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferUndo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Undo();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSelectAll(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SelectAll();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferClear(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Clear();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetViewSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-buffer%::get-view-size"), "wx:media-buffer%::get-view-size");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-buffer%::get-view-size"), "wx:media-buffer%::get-view-size");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::GetViewSize(x0, x1);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetViewSize(x0, x1);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxDC* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::GetDC();
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetDC();

  
  
  return objscheme_bundle_wxDC(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferLocalToGlobal(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:media-buffer%::local-to-global", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-buffer%::local-to-global"), "wx:media-buffer%::local-to-global");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:media-buffer%::local-to-global", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-buffer%::local-to-global"), "wx:media-buffer%::local-to-global");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->LocalToGlobal(x0, x1);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGlobalToLocal(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:media-buffer%::global-to-local", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-buffer%::global-to-local"), "wx:media-buffer%::global-to-local");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:media-buffer%::global-to-local", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-buffer%::global-to-local"), "wx:media-buffer%::global-to-local");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GlobalToLocal(x0, x1);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaAdmin* x0;

  
  x0 = objscheme_unbundle_wxMediaAdmin(p[0], "wx:media-buffer%::set-admin", 1);

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetAdmin(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaAdmin* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetAdmin();

  
  
  return objscheme_bundle_wxMediaAdmin(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferPrintToDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:media-buffer%::print-to-dc", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:media-buffer%::print-to-dc");
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->PrintToDC(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferFindScrollLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::find-scroll-line");

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->FindScrollLine(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferNumScrollLines(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->NumScrollLines();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferScrollLineLocation(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-buffer%::scroll-line-location");

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ScrollLineLocation(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetSnipLocation(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  Bool x3;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::get-snip-location", 0);
  if (n > 1) {
    if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-buffer%::get-snip-location"), "wx:media-buffer%::get-snip-location");
  } else
    x1 = NULL;
  if (n > 2) {
    if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:media-buffer%::get-snip-location"), "wx:media-buffer%::get-snip-location");
  } else
    x2 = NULL;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:media-buffer%::get-snip-location");
  } else
    x3 = FALSE;

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetSnipLocation(x0, x1, x2, x3);

  
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], scheme_make_double(_x2));
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferRefreshDelayed(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->RefreshDelayed();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferEndEditSequence(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->EndEditSequence();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferBeginEditSequence(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  if (n > 0) {
    x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::begin-edit-sequence");
  } else
    x0 = TRUE;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->BeginEditSequence(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferStyleHasChanged(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "wx:media-buffer%::style-has-changed", 1);

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->StyleHasChanged(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferWriteToFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-buffer%::write-to-file", 0);

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->WriteToFile(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferReadFromFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamIn* x0;
  Bool x1;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-buffer%::read-from-file", 0);
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-buffer%::read-from-file");
  } else
    x1 = FALSE;

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ReadFromFile(*x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetMinHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::set-min-height");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetMinHeight(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetMaxHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::set-max-height");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetMaxHeight(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetMinHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetMinHeight();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetMaxHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetMaxHeight();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetMinWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::set-min-width");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetMinWidth(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetMaxWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::set-max-width");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetMaxWidth(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetMinWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetMinWidth();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetMaxWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetMaxWidth();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetSpace(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetSpace();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetDescent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetDescent();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetExtent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-buffer%::get-extent"), "wx:media-buffer%::get-extent");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-buffer%::get-extent"), "wx:media-buffer%::get-extent");

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetExtent(x0, x1);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferInsertFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  string x0;
  int x1;
  Bool x2;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-buffer%::insert-file");
  if (n > 1) {
    x1 = unbundle_symset_fileType(p[1], "wx:media-buffer%::insert-file");;
  } else
    x1 = wxMEDIA_FF_GUESS;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-buffer%::insert-file");
  } else
    x2 = TRUE;

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->InsertFile(x0, x1, x2);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSaveFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  nstring x0;
  int x1;
  Bool x2;

  
  if (n > 0) {
    x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-buffer%::save-file");
  } else
    x0 = NULL;
  if (n > 1) {
    x1 = unbundle_symset_fileType(p[1], "wx:media-buffer%::save-file");;
  } else
    x1 = wxMEDIA_FF_SAME;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-buffer%::save-file");
  } else
    x2 = TRUE;

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SaveFile(x0, x1, x2);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferLoadFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  nstring x0;
  int x1;
  Bool x2;

  
  if (n > 0) {
    x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-buffer%::load-file");
  } else
    x0 = NULL;
  if (n > 1) {
    x1 = unbundle_symset_fileType(p[1], "wx:media-buffer%::load-file");;
  } else
    x1 = wxMEDIA_FF_GUESS;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-buffer%::load-file");
  } else
    x2 = TRUE;

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->LoadFile(x0, x1, x2);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetFlattenedText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  long _x0;
  long* x0 = &_x0;

  

  
  r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetFlattenedText(x0);

  
  
  return scheme_make_sized_string(r, _x0, 0);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferPutFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  nstring x0;
  nstring x1;

  
  x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-buffer%::put-file");
  x1 = (nstring)objscheme_unbundle_nullable_string(p[1], "wx:media-buffer%::put-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::PutFile(x0, x1);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->PutFile(x0, x1);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  nstring x0;

  
  x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-buffer%::get-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::GetFile(x0);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetFile(x0);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferAfterEditSequence(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::AfterEditSequence();
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->AfterEditSequence();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnEditSequence(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnEditSequence();
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnEditSequence();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferAfterLoadFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::after-load-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::AfterLoadFile(x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->AfterLoadFile(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnLoadFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  string x0;
  int x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-buffer%::on-load-file");
  x1 = unbundle_symset_fileType(p[1], "wx:media-buffer%::on-load-file");;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnLoadFile(x0, x1);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnLoadFile(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferAfterSaveFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::after-save-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::AfterSaveFile(x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->AfterSaveFile(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnSaveFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  string x0;
  int x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-buffer%::on-save-file");
  x1 = unbundle_symset_fileType(p[1], "wx:media-buffer%::on-save-file");;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnSaveFile(x0, x1);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnSaveFile(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnNewBox(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = unbundle_symset_bufferType(p[0], "wx:media-buffer%::on-new-box");;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnNewBox(x0);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnNewBox(x0);

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnNewImageSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxImageSnip* r;
  objscheme_check_valid(obj);
  nstring x0;
  long x1;
  Bool x2;
  Bool x3;

  
  x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-buffer%::on-new-image-snip");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-buffer%::on-new-image-snip");
  x2 = objscheme_unbundle_bool(p[2], "wx:media-buffer%::on-new-image-snip");
  x3 = objscheme_unbundle_bool(p[3], "wx:media-buffer%::on-new-image-snip");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnNewImageSnip(x0, x1, x2, x3);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnNewImageSnip(x0, x1, x2, x3);

  
  
  return objscheme_bundle_wxImageSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferInvalidateBitmapCache(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;

  
  if (n > 0) {
    x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::invalidate-bitmap-cache");
  } else
    x0 = 0.0;
  if (n > 1) {
    x1 = objscheme_unbundle_float(p[1], "wx:media-buffer%::invalidate-bitmap-cache");
  } else
    x1 = 0.0;
  if (n > 2) {
    x2 = objscheme_unbundle_float(p[2], "wx:media-buffer%::invalidate-bitmap-cache");
  } else
    x2 = -1.0;
  if (n > 3) {
    x3 = objscheme_unbundle_float(p[3], "wx:media-buffer%::invalidate-bitmap-cache");
  } else
    x3 = -1.0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->InvalidateBitmapCache(x0, x1, x2, x3);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->InvalidateBitmapCache(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnPaint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;
  class wxDC* x1;
  float x2;
  float x3;
  float x4;
  float x5;
  float x6;
  float x7;
  int x8;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::on-paint");
  x1 = objscheme_unbundle_wxDC(p[1], "wx:media-buffer%::on-paint", 0);
  x2 = objscheme_unbundle_float(p[2], "wx:media-buffer%::on-paint");
  x3 = objscheme_unbundle_float(p[3], "wx:media-buffer%::on-paint");
  x4 = objscheme_unbundle_float(p[4], "wx:media-buffer%::on-paint");
  x5 = objscheme_unbundle_float(p[5], "wx:media-buffer%::on-paint");
  x6 = objscheme_unbundle_float(p[6], "wx:media-buffer%::on-paint");
  x7 = objscheme_unbundle_float(p[7], "wx:media-buffer%::on-paint");
  x8 = unbundle_symset_caret(p[8], "wx:media-buffer%::on-paint");;

  if (x1 && !x1->Ok()) scheme_signal_error("%s: bad bitmap", "wx:media-buffer%::on-paint");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnPaint(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnPaint(x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferWriteFootersToFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-buffer%::write-footers-to-file", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::WriteFootersToFile(*x0);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->WriteFootersToFile(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferWriteHeadersToFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-buffer%::write-headers-to-file", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::WriteHeadersToFile(*x0);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->WriteHeadersToFile(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferReadFooterFromFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamIn* x0;
  string x1;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-buffer%::read-footer-from-file", 0);
  x1 = (string)objscheme_unbundle_string(p[1], "wx:media-buffer%::read-footer-from-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::ReadFooterFromFile(*x0, x1);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ReadFooterFromFile(*x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferReadHeaderFromFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamIn* x0;
  string x1;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-buffer%::read-header-from-file", 0);
  x1 = (string)objscheme_unbundle_string(p[1], "wx:media-buffer%::read-header-from-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::ReadHeaderFromFile(*x0, x1);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ReadHeaderFromFile(*x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetFilename(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  Bool x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-buffer%::set-filename");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-buffer%::set-filename");
  } else
    x1 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetFilename(x0, x1);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetFilename(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferReleaseSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::release-snip", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ReleaseSnip(x0);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ReleaseSnip(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetModified(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::set-modified");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::SetModified(x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetModified(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetSnipData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  class wxBufferData* x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::set-snip-data", 0);
  x1 = objscheme_unbundle_wxBufferData(p[1], "wx:media-buffer%::set-snip-data", 1);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetSnipData(x0, x1);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetSnipData(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferGetSnipData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBufferData* r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::get-snip-data", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetSnipData(x0);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->GetSnipData(x0);

  
  
  return objscheme_bundle_wxBufferData(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferNeedsUpdate(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  float x1;
  float x2;
  float x3;
  float x4;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::needs-update", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-buffer%::needs-update");
  x2 = objscheme_unbundle_float(p[2], "wx:media-buffer%::needs-update");
  x3 = objscheme_unbundle_float(p[3], "wx:media-buffer%::needs-update");
  x4 = objscheme_unbundle_float(p[4], "wx:media-buffer%::needs-update");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->NeedsUpdate(x0, x1, x2, x3, x4);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->NeedsUpdate(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferResized(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  Bool x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::resized", 0);
  x1 = objscheme_unbundle_bool(p[1], "wx:media-buffer%::resized");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Resized(x0, x1);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Resized(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSetCaretOwner(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  int x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::set-caret-owner", 1);
  if (n > 1) {
    x1 = unbundle_symset_focus(p[1], "wx:media-buffer%::set-caret-owner");;
  } else
    x1 = wxFOCUS_IMMEDIATE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetCaretOwner(x0, x1);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SetCaretOwner(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferScrollTo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  Bool x5;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::scroll-to", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-buffer%::scroll-to");
  x2 = objscheme_unbundle_float(p[2], "wx:media-buffer%::scroll-to");
  x3 = objscheme_unbundle_float(p[3], "wx:media-buffer%::scroll-to");
  x4 = objscheme_unbundle_float(p[4], "wx:media-buffer%::scroll-to");
  x5 = objscheme_unbundle_bool(p[5], "wx:media-buffer%::scroll-to");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ScrollTo(x0, x1, x2, x3, x4, x5);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ScrollTo(x0, x1, x2, x3, x4, x5);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnChange(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnChange();
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnChange();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::on-focus");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnFocus(x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnFocus(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnDefaultChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:media-buffer%::on-default-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnDefaultChar(*x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnDefaultChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnDefaultEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-buffer%::on-default-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnDefaultEvent(*x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnDefaultEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnLocalChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:media-buffer%::on-local-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnLocalChar(*x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnLocalChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnLocalEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-buffer%::on-local-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->wxMediaBuffer::OnLocalEvent(*x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnLocalEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferSizeCacheInvalid(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SizeCacheInvalid();
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->SizeCacheInvalid();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOwnCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::own-caret");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OwnCaret(x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OwnCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferRefresh(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  Bool x4;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-buffer%::refresh");
  x1 = objscheme_unbundle_float(p[1], "wx:media-buffer%::refresh");
  x2 = objscheme_unbundle_float(p[2], "wx:media-buffer%::refresh");
  x3 = objscheme_unbundle_float(p[3], "wx:media-buffer%::refresh");
  x4 = objscheme_unbundle_bool(p[4], "wx:media-buffer%::refresh");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Refresh(x0, x1, x2, x3, x4);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Refresh(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferAdjustCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxCursor* r;
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-buffer%::adjust-cursor", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->AdjustCursor(*x0);
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->AdjustCursor(*x0);

  
  
  return objscheme_bundle_wxCursor(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:media-buffer%::on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-buffer%::on-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(*x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferCopySelfTo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaBuffer* x0;

  
  x0 = objscheme_unbundle_wxMediaBuffer(p[0], "wx:media-buffer%::copy-self-to", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->CopySelfTo(x0);
  else
    ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->CopySelfTo(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferCopySelf(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaBuffer* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->CopySelf();
  else
    r = ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->CopySelf();

  
  
  return objscheme_bundle_wxMediaBuffer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferKill(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;

  
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:media-buffer%::kill");
  } else
    x0 = 0;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Kill(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferPaste(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;

  
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:media-buffer%::paste");
  } else
    x0 = 0;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Paste(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;
  long x1;

  
  if (n > 0) {
    x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::copy");
  } else
    x0 = FALSE;
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-buffer%::copy");
  } else
    x1 = 0;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Copy(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferCut(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;
  long x1;

  
  if (n > 0) {
    x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::cut");
  } else
    x0 = FALSE;
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-buffer%::cut");
  } else
    x1 = 0;

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Cut(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferInsert(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-buffer%::insert", 0);

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaBufferChangeStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "wx:media-buffer%::change-style", 1);

  
  ((wxMediaBuffer *)((Scheme_Class_Object *)obj)->primdata)->ChangeStyle(x0);

  
  
  return scheme_void;
}

static Scheme_Object *objscheme_wxMediaBuffer_GetbufferType(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-buffer-type", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMediaBuffer *)cobj->primdata)->wxMediaBuffer::bufferType;
  else
    v = ((wxMediaBuffer *)cobj->primdata)->bufferType;

  return bundle_symset_bufferType(v);;
}

static Scheme_Object *objscheme_wxMediaBuffer_SetbufferType(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-buffer-type", 1, 1, n, p);

  v = unbundle_symset_bufferType(p[0], "wx:media-buffer%::buffer-type");;
  ((wxMediaBuffer *)cobj->primdata)->bufferType = v;

  return scheme_void;
}

static Scheme_Object *objscheme_classname_os_wxMediaBuffer(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:media-buffer%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:media-buffer%");
}

void objscheme_setup_wxMediaBuffer(void *env)
{
if (os_wxMediaBuffer_class) {
    objscheme_add_global_class(os_wxMediaBuffer_class,  "wx:media-buffer%", env);
} else {
  os_wxMediaBuffer_class = objscheme_def_prim_class(env, "wx:media-buffer%", "wx:object%", NULL, 113);

  scheme_add_method_w_arity(os_wxMediaBuffer_class,"get-class-name",objscheme_classname_os_wxMediaBuffer, 0, 0);

 scheme_add_method_w_arity(os_wxMediaBuffer_class, "dc-location-to-buffer-location", os_wxMediaBufferwxbDCToBuffer, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "buffer-location-to-dc-location", os_wxMediaBufferwxbBufferToDC, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-inactive-caret-threshold", os_wxMediaBufferSetInactiveCaretThreshold, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-inactive-caret-threshold", os_wxMediaBufferGetInactiveCaretThreshold, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-focus-snip", os_wxMediaBufferGetFocusSnip, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "end-write-header-footer-to-file", os_wxMediaBufferEndWriteHeaderFooterToFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "begin-write-header-footer-to-file", os_wxMediaBufferBeginWriteHeaderFooterToFile, 3, 3);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "print", os_wxMediaBufferPrint, 0, 4);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "insert-image", os_wxMediaBufferInsertImage, 0, 4);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "insert-box", os_wxMediaBufferInsertBox, 0, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-filename", os_wxMediaBufferGetFilename, 0, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "modified?", os_wxMediaBufferModified, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "lock", os_wxMediaBufferLock, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-cursor", os_wxMediaBufferSetCursor, 1, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-load-overwrites-styles", os_wxMediaBufferGetLoadOverwritesStyles, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-load-overwrites-styles", os_wxMediaBufferSetLoadOverwritesStyles, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-style-list", os_wxMediaBufferSetStyleList, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-style-list", os_wxMediaBufferGetStyleList, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "add-buffer-functions", os_wxMediaBufferAddBufferFunctions, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-keymap", os_wxMediaBufferGetKeymap, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-keymap", os_wxMediaBufferSetKeymap, 0, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "do-edit-command", os_wxMediaBufferDoEditCommand, 1, 3);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "do-font", os_wxMediaBufferDoFont, 1, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "do-edit", os_wxMediaBufferDoEdit, 1, 3);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "append-font-items", os_wxMediaBufferAppendFontItems, 1, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "append-edit-items", os_wxMediaBufferAppendEditItems, 1, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-max-undo-history", os_wxMediaBufferGetMaxUndoHistory, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-max-undo-history", os_wxMediaBufferSetMaxUndoHistory, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "clear-undos", os_wxMediaBufferClearUndos, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "redo", os_wxMediaBufferRedo, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "undo", os_wxMediaBufferUndo, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "select-all", os_wxMediaBufferSelectAll, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "clear", os_wxMediaBufferClear, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-view-size", os_wxMediaBufferGetViewSize, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-dc", os_wxMediaBufferGetDC, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "local-to-global", os_wxMediaBufferLocalToGlobal, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "global-to-local", os_wxMediaBufferGlobalToLocal, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-admin", os_wxMediaBufferSetAdmin, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-admin", os_wxMediaBufferGetAdmin, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "print-to-dc", os_wxMediaBufferPrintToDC, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "find-scroll-line", os_wxMediaBufferFindScrollLine, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "num-scroll-lines", os_wxMediaBufferNumScrollLines, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "scroll-line-location", os_wxMediaBufferScrollLineLocation, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-snip-location", os_wxMediaBufferGetSnipLocation, 1, 4);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "refresh-delayed?", os_wxMediaBufferRefreshDelayed, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "end-edit-sequence", os_wxMediaBufferEndEditSequence, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "begin-edit-sequence", os_wxMediaBufferBeginEditSequence, 0, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "style-has-changed", os_wxMediaBufferStyleHasChanged, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "write-to-file", os_wxMediaBufferWriteToFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "read-from-file", os_wxMediaBufferReadFromFile, 1, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-min-height", os_wxMediaBufferSetMinHeight, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-max-height", os_wxMediaBufferSetMaxHeight, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-min-height", os_wxMediaBufferGetMinHeight, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-max-height", os_wxMediaBufferGetMaxHeight, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-min-width", os_wxMediaBufferSetMinWidth, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-max-width", os_wxMediaBufferSetMaxWidth, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-min-width", os_wxMediaBufferGetMinWidth, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-max-width", os_wxMediaBufferGetMaxWidth, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-space", os_wxMediaBufferGetSpace, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-descent", os_wxMediaBufferGetDescent, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-extent", os_wxMediaBufferGetExtent, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "insert-file", os_wxMediaBufferInsertFile, 1, 3);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "save-file", os_wxMediaBufferSaveFile, 0, 3);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "load-file", os_wxMediaBufferLoadFile, 0, 3);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-flattened-text", os_wxMediaBufferGetFlattenedText, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "put-file", os_wxMediaBufferPutFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-file", os_wxMediaBufferGetFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "after-edit-sequence", os_wxMediaBufferAfterEditSequence, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-edit-sequence", os_wxMediaBufferOnEditSequence, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "after-load-file", os_wxMediaBufferAfterLoadFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-load-file", os_wxMediaBufferOnLoadFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "after-save-file", os_wxMediaBufferAfterSaveFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-save-file", os_wxMediaBufferOnSaveFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-new-box", os_wxMediaBufferOnNewBox, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-new-image-snip", os_wxMediaBufferOnNewImageSnip, 4, 4);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "invalidate-bitmap-cache", os_wxMediaBufferInvalidateBitmapCache, 0, 4);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-paint", os_wxMediaBufferOnPaint, 9, 9);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "write-footers-to-file", os_wxMediaBufferWriteFootersToFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "write-headers-to-file", os_wxMediaBufferWriteHeadersToFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "read-footer-from-file", os_wxMediaBufferReadFooterFromFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "read-header-from-file", os_wxMediaBufferReadHeaderFromFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-filename", os_wxMediaBufferSetFilename, 1, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "release-snip", os_wxMediaBufferReleaseSnip, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-modified", os_wxMediaBufferSetModified, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-snip-data", os_wxMediaBufferSetSnipData, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "get-snip-data", os_wxMediaBufferGetSnipData, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "needs-update", os_wxMediaBufferNeedsUpdate, 5, 5);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "resized", os_wxMediaBufferResized, 2, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "set-caret-owner", os_wxMediaBufferSetCaretOwner, 1, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "scroll-to", os_wxMediaBufferScrollTo, 6, 6);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-change", os_wxMediaBufferOnChange, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-focus", os_wxMediaBufferOnFocus, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-default-char", os_wxMediaBufferOnDefaultChar, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-default-event", os_wxMediaBufferOnDefaultEvent, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-local-char", os_wxMediaBufferOnLocalChar, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-local-event", os_wxMediaBufferOnLocalEvent, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "size-cache-invalid", os_wxMediaBufferSizeCacheInvalid, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "own-caret", os_wxMediaBufferOwnCaret, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "refresh", os_wxMediaBufferRefresh, 5, 5);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "adjust-cursor", os_wxMediaBufferAdjustCursor, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-char", os_wxMediaBufferOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "on-event", os_wxMediaBufferOnEvent, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "copy-self-to", os_wxMediaBufferCopySelfTo, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "copy-self", os_wxMediaBufferCopySelf, 0, 0);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "kill", os_wxMediaBufferKill, 0, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "paste", os_wxMediaBufferPaste, 0, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "copy", os_wxMediaBufferCopy, 0, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "cut", os_wxMediaBufferCut, 0, 2);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "insert", os_wxMediaBufferInsert, 1, 1);
 scheme_add_method_w_arity(os_wxMediaBuffer_class, "change-style", os_wxMediaBufferChangeStyle, 1, 1);

  scheme_add_method_w_arity(os_wxMediaBuffer_class,"get-buffer-type", objscheme_wxMediaBuffer_GetbufferType, 0, 0);
  scheme_add_method_w_arity(os_wxMediaBuffer_class,"set-buffer-type", objscheme_wxMediaBuffer_SetbufferType, 1, 1);

  scheme_made_class(os_wxMediaBuffer_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMediaBuffer, wxTYPE_MEDIA_BUFFER);

}
}

int objscheme_istype_wxMediaBuffer(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMediaBuffer_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:media-buffer%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMediaBuffer(class wxMediaBuffer *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_MEDIA_BUFFER) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMediaBuffer_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMediaBuffer *objscheme_unbundle_wxMediaBuffer(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMediaBuffer(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMediaBuffer *)o->primdata;
  else
    return (wxMediaBuffer *)o->primdata;
}








#pragma argsused
static Scheme_Object *wxMediaGlobalwxGetTheBufferDataClassList(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBufferDataClassList* r;

  

  
  r = wxGetTheBufferDataClassList();

  
  
  return objscheme_bundle_wxBufferDataClassList(r);
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxGetTheSnipClassList(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnipClassList* r;

  

  
  r = wxGetTheSnipClassList();

  
  
  return objscheme_bundle_wxSnipClassList(r);
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxMediaSetXSelectionMode(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-buffer%::wx:media-set-x-selection-mode");

  
  wxMediaSetXSelectionMode(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxAddMediaPasteboardFunctions(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxKeymap* x0;

  
  x0 = objscheme_unbundle_wxKeymap(p[0], "wx:media-buffer%::wx:add-media-pasteboard-functions", 0);

  
  wxAddMediaPasteboardFunctions(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxAddMediaEditorFunctions(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxKeymap* x0;

  
  x0 = objscheme_unbundle_wxKeymap(p[0], "wx:media-buffer%::wx:add-media-editor-functions", 0);

  
  wxAddMediaEditorFunctions(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxAddMediaBufferFunctions(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxKeymap* x0;

  
  x0 = objscheme_unbundle_wxKeymap(p[0], "wx:media-buffer%::wx:add-media-buffer-functions", 0);

  
  wxAddMediaBufferFunctions(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxWriteMediaGlobalFooter(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-buffer%::wx:write-media-global-footer", 0);

  
  r = wxWriteMediaGlobalFooter(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxWriteMediaGlobalHeader(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-buffer%::wx:write-media-global-header", 0);

  
  r = wxWriteMediaGlobalHeader(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxReadMediaGlobalFooter(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  class wxMediaStreamIn* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-buffer%::wx:read-media-global-footer", 0);

  
  r = wxReadMediaGlobalFooter(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxReadMediaGlobalHeader(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  class wxMediaStreamIn* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-buffer%::wx:read-media-global-header", 0);

  
  r = wxReadMediaGlobalHeader(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxSetMediaPrintMargin(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long x0;
  long x1;

  
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:media-buffer%::wx:set-media-print-margin");
  } else
    x0 = -1;
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-buffer%::wx:set-media-print-margin");
  } else
    x1 = -1;

  
  wxSetMediaPrintMargin(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *wxMediaGlobalwxGetMediaPrintMargin(int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long _x0;
  long* x0 = &_x0;
  long _x1;
  long* x1 = &_x1;

  
  if (n > 0) {
    if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:media-buffer%::wx:get-media-print-margin"), "wx:media-buffer%::wx:get-media-print-margin");
  } else
    x0 = NULL;
  if (n > 1) {
    if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:media-buffer%::wx:get-media-print-margin"), "wx:media-buffer%::wx:get-media-print-margin");
  } else
    x1 = NULL;

  
  wxGetMediaPrintMargin(x0, x1);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

void objscheme_setup_wxMediaGlobal(void *env)
{
  scheme_install_xc_global("wx:get-the-buffer-data-class-list", scheme_make_prim_w_arity(wxMediaGlobalwxGetTheBufferDataClassList, "wx:get-the-buffer-data-class-list", 0, 0), env);
  scheme_install_xc_global("wx:get-the-snip-class-list", scheme_make_prim_w_arity(wxMediaGlobalwxGetTheSnipClassList, "wx:get-the-snip-class-list", 0, 0), env);
  scheme_install_xc_global("wx:media-set-x-selection-mode", scheme_make_prim_w_arity(wxMediaGlobalwxMediaSetXSelectionMode, "wx:media-set-x-selection-mode", 1, 1), env);
  scheme_install_xc_global("wx:add-media-pasteboard-functions", scheme_make_prim_w_arity(wxMediaGlobalwxAddMediaPasteboardFunctions, "wx:add-media-pasteboard-functions", 1, 1), env);
  scheme_install_xc_global("wx:add-media-editor-functions", scheme_make_prim_w_arity(wxMediaGlobalwxAddMediaEditorFunctions, "wx:add-media-editor-functions", 1, 1), env);
  scheme_install_xc_global("wx:add-media-buffer-functions", scheme_make_prim_w_arity(wxMediaGlobalwxAddMediaBufferFunctions, "wx:add-media-buffer-functions", 1, 1), env);
  scheme_install_xc_global("wx:write-media-global-footer", scheme_make_prim_w_arity(wxMediaGlobalwxWriteMediaGlobalFooter, "wx:write-media-global-footer", 1, 1), env);
  scheme_install_xc_global("wx:write-media-global-header", scheme_make_prim_w_arity(wxMediaGlobalwxWriteMediaGlobalHeader, "wx:write-media-global-header", 1, 1), env);
  scheme_install_xc_global("wx:read-media-global-footer", scheme_make_prim_w_arity(wxMediaGlobalwxReadMediaGlobalFooter, "wx:read-media-global-footer", 1, 1), env);
  scheme_install_xc_global("wx:read-media-global-header", scheme_make_prim_w_arity(wxMediaGlobalwxReadMediaGlobalHeader, "wx:read-media-global-header", 1, 1), env);
  scheme_install_xc_global("wx:set-media-print-margin", scheme_make_prim_w_arity(wxMediaGlobalwxSetMediaPrintMargin, "wx:set-media-print-margin", 0, 2), env);
  scheme_install_xc_global("wx:get-media-print-margin", scheme_make_prim_w_arity(wxMediaGlobalwxGetMediaPrintMargin, "wx:get-media-print-margin", 0, 2), env);
}


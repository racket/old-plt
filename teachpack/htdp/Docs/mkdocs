#!/bin/sh
string=? ; exec mzscheme -qr $0 "$@"

(current-directory
 (build-path (dynamic-require '(lib "plthome.ss" "setup") 'plthome)
             "teachpack" "htdp" "Docs"))

; for john?

; This list determines the order of libraries in the index file:
(define libraries
  '("Convert"
    "Guess"
    "Mastermind"
    "Simple Drawing Exercises"
    "Hangman"
    "Arrows"
    "Documents"
    "Directories"
    "Graphing Functions"
    "GUI"
    "Lkup GUI"
    "Arrows GUI"
    "Guess GUI"
    "Elevator"
    "Simplified Scheme Web Servlets"
    "Scheme Web Servlets"
    "Show Queen"))

(define dest-dir (build-path (collection-path "doc") "teachpack"))

(require (lib "list.ss"))

(define src-files
  (filter (lambda (x) (regexp-match #rx"[.]thtml$" x)) (directory-list)))

(unless (directory-exists? dest-dir)
  (make-directory dest-dir))

;; Get list of (cons name file) for library names
(define lib-names
  (map (lambda (s)
         (cons (cadr (or (regexp-match "\\(define *LIBNAME *\"(.*?)\"\\)"
                                       (open-input-file s))
                         (error 'mkdocs "LIBNAME not found in ~s" s)))
               s))
       (filter (lambda (f) (not (equal? f "index.thtml"))) src-files)))
;; Check library list:
(let ([file-libs (map car lib-names)])
  (define (test x) (and (pair? x) x))
  (cond
   [(test (remove* libraries lib-names (lambda (x y) (equal? x (car y))))) =>
    (lambda (libs)
      (error 'mkdocs "found libraries unlisted in mkdocs: ~s" libs))]
   [(test (remove* file-libs libraries)) =>
    (lambda (libs)
      (error 'mkdocs "non-existent libraries listed in mkdocs: ~s" libs))])
  (let loop ([libs lib-names])
    (cond [(null? libs) 'ok]
          [(assoc (caar libs) (cdr libs)) =>
           (lambda (m)
             (error 'mkdocs "library ~s has two .thtml files: ~s and ~s"
                    (caar libs) (cdar libs) (cdr m)))]
          [else (loop (cdr libs))])))

(define (thtml-name->html s)
  (regexp-replace "[.]thtml$" s ".html"))

(define |LIBLINKS|
  (map (lambda (lib)
         (let ([file (thtml-name->html (cdr (assoc lib lib-names)))])
           (format "<li> <a href=~s>~a</a>\n" file lib)))
       libraries))

;; Make html files
(require (lib "mzpp.ss" "preprocessor"))
(for-each (lambda (thtml)
            (define html (build-path dest-dir (thtml-name->html thtml)))
            (printf "Processing ~a...\n" thtml)
            (with-output-to-file html (lambda () (preprocess thtml)) 'replace))
          src-files)

;; Make hdindex file:
(let ([ifile (build-path dest-dir "hdindex")])
  (printf "Writing hdindex...\n")
  (with-output-to-file ifile
    (lambda ()
      (define (writeln x) (printf "~s\n" x))
      (printf "(\n")
      (writeln '("Teachpacks for \"How to Design Programs\""
                 "index.html" "HtDP" "Arrows GUI teachpack"))
      (for-each
       (lambda (lib-name)
         (let* ([src (cdr lib-name)]
                [title (car lib-name)]
                [filename
                 (cadr (or (regexp-match "\\(define *FILENAME *\"(.*?)\"\\)"
                                         (open-input-file src))
                           (error 'mkdocs "Didn't find FILENAME in ~s" src)))])
           (writeln `(,filename ,(thtml-name->html src) ,filename
                                ,(format "~a teachpack" title)))))
       lib-names)
      (printf ")\n"))
    'truncate))

(module beginner-defined mzscheme
  (provide defined-names)
  
  ; these names are acquired by applying the "strip" function shown here
  ; to the second element of matthew's "provide-and-document" form as
  ; taken from htdp-beginner.ss on 2002-04-29.
  
  (define (strip data)
    (map choose-name (apply append (map cdr data))))
  
  (define (choose-name x)
    (if (pair? (car x))
        (cadar x)
        (car x)))

  (define defined-names
    `(number?
      =
      <
      >
      <=
      >=
      +
      -
      *
      /
      max
      min
      quotient
      remainder
      modulo
      sqr
      sqrt
      expt
      abs
      sgn
      exp
      log
      sin
      cos
      tan
      asin
      acos
      atan
      sinh
      cosh
      exact?
      integer?
      zero?
      odd?
      even?
      add1
      sub1
      lcm
      gcd
      rational?
      numerator
      denominator
      inexact?
      real?
      floor
      ceiling
      round
      complex?
      make-polar
      real-part
      imag-part
      magnitude
      angle
      conjugate
      exact->inexact
      inexact->exact
      number->string
      integer->char
      random
      current-seconds
      e
      pi
      boolean?
      boolean=?
      not
      symbol?
      symbol=?
      cons?
      pair?
      empty?
      null?
      list?
      cons
      null
      first
      car
      rest
      cdr
      second
      cadr
      cdar
      caar
      cddr
      third
      caddr
      caadr
      caaar
      cdaar
      cdadr
      cadar
      cddar
      cdddr
      fourth
      cadddr
      fifth
      sixth
      seventh
      eighth
      list-ref
      list
      list
      list*
      append
      length
      memq
      memv
      member
      reverse
      assq
      equal?
      make-posn
      posn?
      posn-x
      posn-y
      char?
      char=?
      char<?
      char>?
      char<=?
      char>=?
      char-ci=?
      char-ci<?
      char-ci>?
      char-ci<=?
      char-ci>=?
      char-numeric?
      char-alphabetic?
      char-whitespace?
      char-upper-case?
      char-lower-case?
      char-upcase
      char-downcase
      char->integer
      string?
      string-length
      make-string
      string-ref
      substring
      string-copy
      string-append
      string=?
      string<?
      string>?
      string<=?
      string>=?
      string-ci=?
      string-ci<?
      string-ci>?
      string-ci<=?
      string-ci>=?
      string->number
      string->list
      list->string
      format
      identity
      image=?
      error
      struct?
      eq?
      eof
      eof-object?
      exit)))
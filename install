#!/bin/sh
#|
# PLT software installer
# Configures PLTHOME path within scripts
# For certain platforms and installations, adds extra
#  directory links (to reach non-standard binaries
#  through the platform's standard path)
# Creates .zo files if the user assents

if [ ! \( \( -x install \) -a \( -d collects \) \) ] ; then
  echo "install: must be run from its own directory"
  exit 1
fi

if [ ! \( -x bin/mzscheme \) ] ; then
  echo "install: cannot execute bin/mzscheme"
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!!               Install incomplete!               !!"
  echo "!!                                                 !!"
  echo "!! If you downloaded the source distribution, see  !!"
  echo "!!        src/README for build instructions.       !!"
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  exit 1
fi

exec ./bin/mzscheme -qr "$0" ${1+"$@"}
exit 1

|#

(use-compiled-file-kinds 'none)

(define release-date "August 2003")

(define plthome (current-directory))
(putenv "PLTHOME" plthome)
(putenv "PLTCOLLECTS" "")
(current-library-collection-paths
 (list (build-path plthome "collects")))

(define zos?         'ask)
(define scripts?     #t)
(define deps?        #f)
(define updates?     'ask)
(define interactive? #t)

(define in-osx-install? (getenv "OSX_PLT_INSTALL"))
(define in-rpm-install? (getenv "RPM_INSTALL_PREFIX"))
(define in-rpm-build? (and (getenv "RPM_OPT_FLAGS") (not in-rpm-install?)))

(when (or in-osx-install? in-rpm-install? in-rpm-build?) (set! updates? #f))
(when (or in-osx-install? in-rpm-install?)               (set! zos? #t))
(when in-rpm-build?                                      (set! zos? #f))

(require (lib "cmdline.ss"))
(command-line "install" argv
  (multi
   (("-z")
    "skip .zo file compilation."
    (set! zos? #f))
   (("+z")
    "compile .zo files (default: ask)."
    (set! zos? #t))
   (("-s")
    "skip modifying PLTHOME in scripts."
    (set! scripts? #f))
   (("+s")
    "modify PLTHOME setting in scripts (default)."
    (set! scripts? #f))
   (("-d")
    "skip modifying .dep files (default)."
    (set! deps? #f))
   (("+d")
    "modify .dep files paths and .zo timestamps (ignore unless `+s' and `-z')."
    (set! deps? #t))
   (("-u")
    "skip on-line updates checking."
    (set! updates? #f))
   (("+u")
    "check for on-line updates (default: ask)."
    (set! updates? #t))
   (("-i")
    "non-interactive mode."
    (set! interactive? #f))
   (("+i")
    "interactive mode (default)."
    (set! interactive? #t))
   (("-p") explicit-home
    "use explicit PLTHOME value instead of the current directory."
    (if (absolute-path? explicit-home)
      (set! plthome explicit-home)
      (error './install
             "bad value for PLTHOME, expected an absolute path, got ~s"
             explicit-home)))))

(when (and deps? (or (not scripts?) zos?))
  (printf "Warning: can't modify .dep files.\n")
  (set! deps? #f))

(define didnothing? #t)

(when in-osx-install?
  (namespace-require '(lib "mred.ss" "mred"))
  (namespace-require '(lib "class.ss")))
;; Set up GUI
(when in-osx-install?
  (let ([evt (make-eventspace)]
	[there-was-an-error? #f])
    (parameterize ([current-eventspace evt])
      (define f (make-object frame% "PLT Installer" #f 600 480))
      (define e (make-object text%))
      (define c (make-object editor-canvas% f e))
      (define b (make-object button% "Stop Installation" f
			     (lambda (b e)
			       (when (or there-was-an-error?
					 (eq? 'ok (message-box
						   "Stop Installation"
						   "Ok to stop the installation?"
						   f
						   '(ok-cancel))))
				 (exit 1)))))
      (send e lock #t)
      (send e auto-wrap #t)
      (let ([out (make-custom-output-port
		  #f
		  (lambda (string start end flush?)
		    (parameterize ([current-eventspace evt])
		      (queue-callback
		       (lambda ()
			 (send e lock #f)
			 (send e insert (substring string start end)
			       (send e last-position))
			 (send e lock #t))
		       #f))
		    (- end start))
		  void
		  void)])
	(current-output-port out)
	(current-error-port out))
      (send f show #t)
      (let ([old-exit (exit-handler)])
	(exit-handler (lambda (v)
			(unless (zero? v)
			  (parameterize ([current-eventspace evt])
			    (queue-callback
			     (lambda ()
			       (send e lock #f)
			       (let ([s (send e last-position)])
				 (send e insert "INSTALLATION FAILED" s)
				 (let ([ss (send e last-position)])
				   (send e insert "\n(click button below to continue)" ss)
				   (send e change-style 
					 (let ([d (make-object style-delta% 'change-bold)])
					   (send d set-delta-foreground "red")
					   d)
					 s ss))
				 (send e lock #t))
			       (send b set-label "Quit Installation")
			       (set! there-was-an-error? #t))
			     #f))
			  (semaphore-wait (make-semaphore)))
			(old-exit v)))))))

(define (get-y-n lines)
  (or (not interactive?)
      (begin (for-each display lines)
             (display " [y] ")
             (flush-output)
             (let ([r (read-line)])
               (not (regexp-match "^ *[nN]" r))))))

(define (update-scripts)
  (printf "setting PLTHOME to ~s in scripts:\n" plthome)
  (parameterize ((current-directory "bin"))
    (for-each
     (lambda (f)
       (cond
        [(not (file-exists? f)) '-]
        [(and (file-exists? f) (> (file-size f) 4096))
         (printf " skipping ~a\n" f)]
        [else
         (set! didnothing? #f)
         (printf " checking ~a..." f)
         (let-values ([(lines changed?)
                       (with-input-from-file f
                         (lambda ()
                           (let loop ([ls null] [changed? #f])
                             (let ([l (read-line)])
                               (cond
                                ((eof-object? l) (values (reverse ls) changed?))
                                ((regexp-match #rx"^( *)PLTHOME=(.*)$" l) =>
                                 (lambda (m)
                                   (loop (cons (format "~aPLTHOME=~s"
                                                       (cadr m) plthome)
                                               ls)
                                         #t)))
                                (else (loop (cons l ls) changed?)))))))])
           (if changed?
             (begin (printf " updating\n")
                    (with-output-to-file f
                      (lambda ()
                        (for-each (lambda (l) (display l) (newline)) lines))
                      'truncate))
             (printf " nothing to do\n")))]))
     (directory-list))))

;; ============================================================================
;; Start working here

;; ---------- update scripts ----------

(when scripts? (update-scripts))

;; ---------- on-line updates ----------

(when (eq? 'ask updates?)
  (set! updates?
        (get-y-n
         (list (format "This distribution was created in ~a.\n" release-date)
               "  Check for updates of PLT software over "
               "the Internet (y/n)?"))))

(require (lib "check-text.ss" "version"))
(when updates? (check-version))

;; ---------- make .zo files ----------

(when (eq? 'ask zos?)
  (set! zos?
        (get-y-n
         '("PLT software starts up much faster with .zo files, but\n"
           "creating .zo files now takes a few minutes and requires\n"
           "several MB of additional disk space.\n"
           "  Create .zo files now (y/n)?")))
  (unless zos?
    (printf "Skipping .zo-file creation; create .zo files later by running\n")
    (printf "  ~a/bin/setup-plt\n" plthome)))

(when zos?
  ;; Need a new namespace to ensure that all modules are compiled, including
  ;; ones we've already loaded.  We also need to re-enable compiled files,
  ;; since cm.ss checks on that flag.
  (parameterize ([current-namespace (make-namespace)]
		 [use-compiled-file-kinds 'all])
    (dynamic-require '(lib "setup.ss" "setup") #f)))

;; ---------- done ----------

(when interactive?
  (printf "PLT installation done~a.\n" (if didnothing? " (nothing to do)" ""))
  (when (file-exists? "bin/drscheme")
    (for-each display
              '("Run DrScheme as bin/drscheme.\n"
                "For Help, select `Help Desk' from DrScheme's `Help' menu,\n"
                "or run bin/help-desk.\n"))))

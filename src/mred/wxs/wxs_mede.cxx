/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_mede.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_media.h"





#include "wxscheme.h"
#include "wxs_mede.h"
#include "wxscomon.h"


#undef l_ADDRESS
#undef l_DEREF
#undef l_TEST
#undef l_POINT
#undef l_TYPE
#undef l_LIST_ITEM_BUNDLE
#undef l_LIST_ITEM_UNBUNDLE
#undef l_MAKE_LIST
#undef l_MAKE_ARRAY
#undef l_EXTRA
#undef l_TERMINATE
#undef l_COPY
#undef l_OKTEST
#undef l_INTTYPE

#define l_ADDRESS 
#define l_DEREF 
#define l_NULLOK 0
#define l_TEST 
#define l_POINT 
#define l_EXTRA 0
#define l_TERMINATE 
#define l_COPY l_COPYDEST=l_COPYSRC;
#define l_OKTEST 
#define l_INTTYPE int

#define l_TYPE float
#define l_LIST_ITEM_BUNDLE objscheme_bundle_float
#define l_LIST_ITEM_UNBUNDLE objscheme_unbundle_float
#define l_MAKE_LIST __MakefloatList
#define l_MAKE_ARRAY __MakefloatArray





static Scheme_Object *l_MAKE_LIST(l_TYPE l_POINT *f, l_INTTYPE c)
{
  Scheme_Object *cdr = scheme_null, *obj;

  while (c--) {
    obj = l_LIST_ITEM_BUNDLE(l_ADDRESS f[c]);
    cdr = scheme_make_pair(obj, cdr);
  }
  
  return cdr;
}

static l_TYPE l_POINT *l_MAKE_ARRAY(Scheme_Object *l, l_INTTYPE *c, char *who)
{
  int i = 0;
  long len;

  len = scheme_proper_list_length(l);
  if (len < 0) scheme_wrong_type(who, "proper-list", -1, 0, &l);
  if (c) *c = len;

  if (!(len + l_EXTRA))
    return NULL;

  l_TYPE l_POINT *f = new l_TYPE l_POINT[len + l_EXTRA];

  while (!SCHEME_NULLP(l)) {
    if (!SCHEME_LISTP(l))
     scheme_signal_error("%s: expected a proper list", who);

#define l_COPYDEST f[i]
#define l_COPYSRC (l_DEREF l_LIST_ITEM_UNBUNDLE(SCHEME_CAR(l), who l_TEST))

    l_COPY

    l_OKTEST

    i++;

    l = SCHEME_CDR(l);
  }
  l_TERMINATE

  return f;
}








/* 
   X = Not meant for virtual, defined in wxMediaEdit/wxMediaPasteboard
       and overloaded there
   Y = Virtual, defined in wxMediaEdit/wxMediaPasteboard
   Z = Virtual, defined in wxMediaBuffer 
*/































			








#undef l_ADDRESS
#undef l_DEREF
#undef l_TEST
#undef l_POINT
#undef l_TYPE
#undef l_LIST_ITEM_BUNDLE
#undef l_LIST_ITEM_UNBUNDLE
#undef l_MAKE_LIST
#undef l_MAKE_ARRAY
#undef l_EXTRA
#undef l_TERMINATE
#undef l_COPY
#undef l_OKTEST
#undef l_INTTYPE

#define l_ADDRESS 
#define l_DEREF 
#define l_NULLOK 0
#define l_TEST 
#define l_POINT 
#define l_EXTRA 0
#define l_TERMINATE 
#define l_COPY l_COPYDEST=l_COPYSRC;
#define l_OKTEST 
#define l_INTTYPE int

#define l_TYPE long
#define l_LIST_ITEM_BUNDLE objscheme_bundle_long
#define l_LIST_ITEM_UNBUNDLE objscheme_unbundle_long
#define l_MAKE_LIST __MakelongList
#define l_MAKE_ARRAY __MakelongArray





static Scheme_Object *l_MAKE_LIST(l_TYPE l_POINT *f, l_INTTYPE c)
{
  Scheme_Object *cdr = scheme_null, *obj;

  while (c--) {
    obj = l_LIST_ITEM_BUNDLE(l_ADDRESS f[c]);
    cdr = scheme_make_pair(obj, cdr);
  }
  
  return cdr;
}

static l_TYPE l_POINT *l_MAKE_ARRAY(Scheme_Object *l, l_INTTYPE *c, char *who)
{
  int i = 0;
  long len;

  len = scheme_proper_list_length(l);
  if (len < 0) scheme_wrong_type(who, "proper-list", -1, 0, &l);
  if (c) *c = len;

  if (!(len + l_EXTRA))
    return NULL;

  l_TYPE l_POINT *f = new l_TYPE l_POINT[len + l_EXTRA];

  while (!SCHEME_NULLP(l)) {
    if (!SCHEME_LISTP(l))
     scheme_signal_error("%s: expected a proper list", who);

#define l_COPYDEST f[i]
#define l_COPYSRC (l_DEREF l_LIST_ITEM_UNBUNDLE(SCHEME_CAR(l), who l_TEST))

    l_COPY

    l_OKTEST

    i++;

    l = SCHEME_CDR(l);
  }
  l_TERMINATE

  return f;
}




















static void WordbreakCallbackToScheme(wxMediaEdit *,long*,long*,int,Scheme_Object *);





static void WordbreakCallbackToScheme(wxMediaEdit *media,
				      long *start, long *end,
				      int reason,
				      Scheme_Object *f)
{
  Scheme_Object *p[4], *s, *e;
  jmp_buf savebuf;

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    p[0] = objscheme_bundle_wxMediaEdit(media);
    if (start)
      s = scheme_box(objscheme_bundle_integer(*start));
    else
      s = scheme_null;
    if (end)
      e = scheme_box(objscheme_bundle_integer(*end));
    else
      e = scheme_null;
    p[1] = s;
    p[2] = e;
    p[3] = scheme_make_integer(reason);

    scheme_apply_multi(f, 4, p);
    if (start)
      *start = objscheme_unbundle_integer(scheme_unbox(s), "Scheme wordbreak callback");
    if (end)
      *end = objscheme_unbundle_integer(scheme_unbox(e), "Scheme wordbreak callback");
  }

  COPY_JMPBUF(scheme_error_buf, savebuf);
}

static void ClickbackToScheme(wxMediaEdit *media,
			      long start, long end,
			      Scheme_Object *f)
{
  Scheme_Object *p[3];
  jmp_buf savebuf;

  p[0] = objscheme_bundle_wxMediaEdit(media);
  p[1] = objscheme_bundle_integer(start);
  p[2] = objscheme_bundle_integer(end);

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf))
    scheme_apply_multi(f, 3, p);

  COPY_JMPBUF(scheme_error_buf, savebuf);
}








class os_wxMediaEdit : public wxMediaEdit {
 public:
  Scheme_Object *scroll_closure;

  os_wxMediaEdit(Scheme_Object * obj, float x0 = 1.0, float* x1 = NULL, int x2 = 0);
  ~os_wxMediaEdit();
  class wxTabSnip* OnNewTabSnip();
  class wxTextSnip* OnNewTextSnip();
  void SetRegionData(long x0, long x1, class wxBufferData* x2);
  class wxBufferData* GetRegionData(long x0, long x1);
  void AfterSetSizeConstraint();
  Bool OnSetSizeConstraint();
  void AfterSetPosition();
  void AfterChangeStyle(long x0, long x1);
  Bool OnChangeStyle(long x0, long x1);
  void AfterDelete(long x0, long x1);
  Bool OnDelete(long x0, long x1);
  void AfterInsert(long x0, long x1);
  Bool OnInsert(long x0, long x1);
  void DoPaste(long x0, long x1);
  void DoCopy(long x0, long x1, long x2, Bool x3);
  void SetAnchor(Bool x0);
  nstring PutFile(nstring x0, nstring x1);
  nstring GetFile(nstring x0);
  void AfterEditSequence();
  void OnEditSequence();
  void AfterLoadFile(Bool x0);
  Bool OnLoadFile(string x0, int x1);
  void AfterSaveFile(Bool x0);
  Bool OnSaveFile(string x0, int x1);
  class wxSnip* OnNewBox(int x0);
  class wxImageSnip* OnNewImageSnip(nstring x0, long x1, Bool x2, Bool x3);
  void InvalidateBitmapCache(float x0 = 0.0, float x1 = 0.0, float x2 = -1.0, float x3 = -1.0);
  void OnPaint(Bool x0, class wxDC* x1, float x2, float x3, float x4, float x5, float x6, float x7, int x8);
  Bool WriteFootersToFile(class wxMediaStreamOut& x0);
  Bool WriteHeadersToFile(class wxMediaStreamOut& x0);
  Bool ReadFooterFromFile(class wxMediaStreamIn& x0, string x1);
  Bool ReadHeaderFromFile(class wxMediaStreamIn& x0, string x1);
  void SetFilename(string x0, Bool x1 = FALSE);
  Bool ReleaseSnip(class wxSnip* x0);
  void SetModified(Bool x0);
  void SetSnipData(class wxSnip* x0, class wxBufferData* x1);
  class wxBufferData* GetSnipData(class wxSnip* x0);
  void NeedsUpdate(class wxSnip* x0, float x1, float x2, float x3, float x4);
  void Resized(class wxSnip* x0, Bool x1);
  void SetCaretOwner(class wxSnip* x0, int x1 = wxFOCUS_IMMEDIATE);
  Bool ScrollTo(class wxSnip* x0, float x1, float x2, float x3, float x4, Bool x5);
  void OnChange();
  void OnFocus(Bool x0);
  void OnDefaultChar(class wxKeyEvent& x0);
  void OnDefaultEvent(class wxMouseEvent& x0);
  void OnLocalChar(class wxKeyEvent& x0);
  void OnLocalEvent(class wxMouseEvent& x0);
  void SizeCacheInvalid();
  void OwnCaret(Bool x0);
  void Refresh(float x0, float x1, float x2, float x3, Bool x4);
  class wxCursor* AdjustCursor(class wxMouseEvent& x0);
  void OnChar(class wxKeyEvent& x0);
  void OnEvent(class wxMouseEvent& x0);
  void CopySelfTo(class wxMediaBuffer* x0);
  class wxMediaBuffer* CopySelf();
};

Scheme_Object *os_wxMediaEdit_class;

os_wxMediaEdit::os_wxMediaEdit(Scheme_Object * o, float x0, float* x1, int x2)
: wxMediaEdit(x0, x1, x2)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMediaEdit::~os_wxMediaEdit()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

class wxTabSnip* os_wxMediaEdit::OnNewTabSnip()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-new-tab-snip", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnNewTabSnip();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxTabSnip(v, "wx:media-edit%::on-new-tab-snip"", extracting return value", 0);
  }
}

class wxTextSnip* os_wxMediaEdit::OnNewTextSnip()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-new-text-snip", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnNewTextSnip();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxTextSnip(v, "wx:media-edit%::on-new-text-snip"", extracting return value", 0);
  }
}

void os_wxMediaEdit::SetRegionData(long x0, long x1, class wxBufferData* x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "set-region-data", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::SetRegionData(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  p[2] = objscheme_bundle_wxBufferData(x2);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxBufferData* os_wxMediaEdit::GetRegionData(long x0, long x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "get-region-data", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::GetRegionData(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxBufferData(v, "wx:media-edit%::get-region-data"", extracting return value", 1);
  }
}

void os_wxMediaEdit::AfterSetSizeConstraint()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "after-set-size-constraint", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::AfterSetSizeConstraint();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::OnSetSizeConstraint()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-set-size-constraint", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnSetSizeConstraint();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::on-set-size-constraint"", extracting return value");
  }
}

void os_wxMediaEdit::AfterSetPosition()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "after-set-position", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::AfterSetPosition();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::AfterChangeStyle(long x0, long x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "after-change-style", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::AfterChangeStyle(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::OnChangeStyle(long x0, long x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-change-style", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnChangeStyle(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::on-change-style"", extracting return value");
  }
}

void os_wxMediaEdit::AfterDelete(long x0, long x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "after-delete", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::AfterDelete(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::OnDelete(long x0, long x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-delete", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnDelete(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::on-delete"", extracting return value");
  }
}

void os_wxMediaEdit::AfterInsert(long x0, long x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "after-insert", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::AfterInsert(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::OnInsert(long x0, long x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-insert", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnInsert(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::on-insert"", extracting return value");
  }
}

void os_wxMediaEdit::DoPaste(long x0, long x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "do-paste", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::DoPaste(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::DoCopy(long x0, long x1, long x2, Bool x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "do-copy", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::DoCopy(x0, x1, x2, x3);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  p[2] = scheme_make_integer(x2);
  p[3] = (x3 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::SetAnchor(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "set-anchor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::SetAnchor(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

nstring os_wxMediaEdit::PutFile(nstring x0, nstring x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "put-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::PutFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = objscheme_bundle_string((char *)x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (nstring)objscheme_unbundle_nullable_string(v, "wx:media-edit%::put-file"", extracting return value");
  }
}

nstring os_wxMediaEdit::GetFile(nstring x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "get-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::GetFile(x0);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (nstring)objscheme_unbundle_nullable_string(v, "wx:media-edit%::get-file"", extracting return value");
  }
}

void os_wxMediaEdit::AfterEditSequence()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "after-edit-sequence", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::AfterEditSequence();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OnEditSequence()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-edit-sequence", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnEditSequence();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::AfterLoadFile(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "after-load-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::AfterLoadFile(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::OnLoadFile(string x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-load-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnLoadFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::on-load-file"", extracting return value");
  }
}

void os_wxMediaEdit::AfterSaveFile(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "after-save-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::AfterSaveFile(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::OnSaveFile(string x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-save-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnSaveFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::on-save-file"", extracting return value");
  }
}

class wxSnip* os_wxMediaEdit::OnNewBox(int x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-new-box", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnNewBox(x0);
  } else {
  
  p[0] = scheme_make_integer(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:media-edit%::on-new-box"", extracting return value", 0);
  }
}

class wxImageSnip* os_wxMediaEdit::OnNewImageSnip(nstring x0, long x1, Bool x2, Bool x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-new-image-snip", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::OnNewImageSnip(x0, x1, x2, x3);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = scheme_make_integer(x1);
  p[2] = (x2 ? scheme_true : scheme_false);
  p[3] = (x3 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxImageSnip(v, "wx:media-edit%::on-new-image-snip"", extracting return value", 0);
  }
}

void os_wxMediaEdit::InvalidateBitmapCache(float x0, float x1, float x2, float x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "invalidate-bitmap-cache", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::InvalidateBitmapCache(x0, x1, x2, x3);
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OnPaint(Bool x0, class wxDC* x1, float x2, float x3, float x4, float x5, float x6, float x7, int x8)
{
  Scheme_Object *p[9];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-paint", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnPaint(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  p[1] = objscheme_bundle_wxDC(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = scheme_make_double(x5);
  p[6] = scheme_make_double(x6);
  p[7] = scheme_make_double(x7);
  p[8] = scheme_make_integer(x8);
  

  v = scheme_apply(method, 9, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::WriteFootersToFile(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "write-footers-to-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::WriteFootersToFile(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::write-footers-to-file"", extracting return value");
  }
}

Bool os_wxMediaEdit::WriteHeadersToFile(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "write-headers-to-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::WriteHeadersToFile(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::write-headers-to-file"", extracting return value");
  }
}

Bool os_wxMediaEdit::ReadFooterFromFile(class wxMediaStreamIn& x0, string x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "read-footer-from-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::ReadFooterFromFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamIn(&x0);
  p[1] = objscheme_bundle_string((char *)x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::read-footer-from-file"", extracting return value");
  }
}

Bool os_wxMediaEdit::ReadHeaderFromFile(class wxMediaStreamIn& x0, string x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "read-header-from-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::ReadHeaderFromFile(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamIn(&x0);
  p[1] = objscheme_bundle_string((char *)x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::read-header-from-file"", extracting return value");
  }
}

void os_wxMediaEdit::SetFilename(string x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "set-filename", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::SetFilename(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::ReleaseSnip(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "release-snip", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::ReleaseSnip(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::release-snip"", extracting return value");
  }
}

void os_wxMediaEdit::SetModified(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "set-modified", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::SetModified(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::SetSnipData(class wxSnip* x0, class wxBufferData* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "set-snip-data", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::SetSnipData(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = objscheme_bundle_wxBufferData(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxBufferData* os_wxMediaEdit::GetSnipData(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "get-snip-data", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::GetSnipData(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxBufferData(v, "wx:media-edit%::get-snip-data"", extracting return value", 1);
  }
}

void os_wxMediaEdit::NeedsUpdate(class wxSnip* x0, float x1, float x2, float x3, float x4)
{
  Scheme_Object *p[5];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "needs-update", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::NeedsUpdate(x0, x1, x2, x3, x4);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  

  v = scheme_apply(method, 5, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::Resized(class wxSnip* x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "resized", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::Resized(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::SetCaretOwner(class wxSnip* x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "set-caret-owner", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::SetCaretOwner(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaEdit::ScrollTo(class wxSnip* x0, float x1, float x2, float x3, float x4, Bool x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "scroll-to", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::ScrollTo(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = (x5 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-edit%::scroll-to"", extracting return value");
  }
}

void os_wxMediaEdit::OnChange()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-change", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnChange();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OnFocus(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnFocus(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OnDefaultChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-default-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnDefaultChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OnDefaultEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-default-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnDefaultEvent(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OnLocalChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-local-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnLocalChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OnLocalEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-local-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnLocalEvent(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::SizeCacheInvalid()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "size-cache-invalid", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::SizeCacheInvalid();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OwnCaret(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "own-caret", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OwnCaret(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::Refresh(float x0, float x1, float x2, float x3, Bool x4)
{
  Scheme_Object *p[5];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "refresh", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::Refresh(x0, x1, x2, x3, x4);
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = (x4 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 5, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxCursor* os_wxMediaEdit::AdjustCursor(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "adjust-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::AdjustCursor(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxCursor(v, "wx:media-edit%::adjust-cursor"", extracting return value", 1);
  }
}

void os_wxMediaEdit::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::OnEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::OnEvent(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaEdit::CopySelfTo(class wxMediaBuffer* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "copy-self-to", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMediaEdit::CopySelfTo(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaBuffer(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxMediaBuffer* os_wxMediaEdit::CopySelf()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaEdit_class, "copy-self", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return wxMediaEdit::CopySelf();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxMediaBuffer(v, "wx:media-edit%::copy-self"", extracting return value", 0);
  }
}

#pragma argsused
static Scheme_Object *os_wxMediaEditRemoveClickback(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::remove-clickback");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::remove-clickback");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->RemoveClickback(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetClickback(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;
  wxClickbackFunc x2;
  void* x3;
  class wxStyleDelta* x4;
  Bool x5;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::set-clickback");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::set-clickback");
  x2 = (wxClickbackFunc)ClickbackToScheme;
  x3 = p[2];
  if (n > 3) {
    x4 = objscheme_unbundle_wxStyleDelta(p[3], "wx:media-edit%::set-clickback", 1);
  } else
    x4 = NULL;
  if (n > 4) {
    x5 = objscheme_unbundle_bool(p[4], "wx:media-edit%::set-clickback");
  } else
    x5 = FALSE;

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetClickback(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetWordbreakFunc(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  wxWordbreakFunc x0;
  void* x1;

  
  x0 = (wxWordbreakFunc)WordbreakCallbackToScheme;
  x1 = p[0];

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetWordbreakFunc(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetAutowrapBitmap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBitmap* r;
  objscheme_check_valid(obj);
  class wxBitmap* x0;

  
  x0 = objscheme_unbundle_wxBitmap(p[0], "wx:media-edit%::set-autowrap-bitmap", 1);

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetAutowrapBitmap(x0);

  
  
  return objscheme_bundle_wxBitmap(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnNewTabSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxTabSnip* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnNewTabSnip();
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnNewTabSnip();

  
  
  return objscheme_bundle_wxTabSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnNewTextSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxTextSnip* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnNewTextSnip();
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnNewTextSnip();

  
  
  return objscheme_bundle_wxTextSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditCaretHidden(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->CaretHidden();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditHideCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::hide-caret");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->HideCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetWordbreakMap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaWordbreakMap* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetWordbreakMap();

  
  
  return objscheme_bundle_wxMediaWordbreakMap(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetWordbreakMap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaWordbreakMap* x0;

  
  x0 = objscheme_unbundle_wxMediaWordbreakMap(p[0], "wx:media-edit%::set-wordbreak-map", 1);

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetWordbreakMap(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFindWordbreak(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long _x0;
  long* x0 = &_x0;
  long _x1;
  long* x1 = &_x1;
  int x2;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:media-edit%::find-wordbreak"), "wx:media-edit%::find-wordbreak");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:media-edit%::find-wordbreak"), "wx:media-edit%::find-wordbreak");
  x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::find-wordbreak");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FindWordbreak(x0, x1, x2);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetRegionData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;
  class wxBufferData* x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::set-region-data");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::set-region-data");
  x2 = objscheme_unbundle_wxBufferData(p[2], "wx:media-edit%::set-region-data", 1);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::SetRegionData(x0, x1, x2);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetRegionData(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetRegionData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBufferData* r;
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::get-region-data");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::get-region-data");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::GetRegionData(x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetRegionData(x0, x1);

  
  
  return objscheme_bundle_wxBufferData(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAfterSetSizeConstraint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AfterSetSizeConstraint();
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AfterSetSizeConstraint();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnSetSizeConstraint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnSetSizeConstraint();
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnSetSizeConstraint();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAfterSetPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AfterSetPosition();
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AfterSetPosition();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAfterChangeStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::after-change-style");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::after-change-style");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AfterChangeStyle(x0, x1);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AfterChangeStyle(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnChangeStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::on-change-style");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::on-change-style");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnChangeStyle(x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnChangeStyle(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAfterDelete(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::after-delete");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::after-delete");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AfterDelete(x0, x1);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AfterDelete(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnDelete(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::on-delete");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::on-delete");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnDelete(x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnDelete(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAfterInsert(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::after-insert");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::after-insert");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AfterInsert(x0, x1);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AfterInsert(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnInsert(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::on-insert");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::on-insert");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnInsert(x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnInsert(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAddEditorFunctions(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeymap* x0;

  
  x0 = objscheme_unbundle_wxKeymap(p[0], "wx:media-edit%::add-editor-functions", 0);

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AddEditorFunctions(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetTabs(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float* x0;
  int x1;
  float x2;
  Bool x3;

  
  x0 = NULL;
  if (n > 1) {
    x2 = objscheme_unbundle_float(p[1], "wx:media-edit%::set-tabs");
  } else
    x2 = wxTAB_WIDTH;
  if (n > 2) {
    x3 = objscheme_unbundle_bool(p[2], "wx:media-edit%::set-tabs");
  } else
    x3 = TRUE;

  x0 = __MakefloatArray((0 < n) ? p[0] : scheme_null, &x1, "wx:media-edit%::set-tabs");
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetTabs(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetTabs(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float* r;
  objscheme_check_valid(obj);
  int _x0;
  int* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;
  Bool _x2;
  Bool* x2 = &_x2;

  
  if (n > 0) {
    if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:media-edit%::get-tabs"), "wx:media-edit%::get-tabs");
  } else
    x0 = NULL;
  if (n > 1) {
    if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-edit%::get-tabs"), "wx:media-edit%::get-tabs");
  } else
    x1 = NULL;
  if (n > 2) {
    if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_bool(objscheme_unbox(p[2], "wx:media-edit%::get-tabs"), "wx:media-edit%::get-tabs");
  } else
    x2 = NULL;

  if (!x0) x0 = &_x0;
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetTabs(x0, x1, x2);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], (_x2 ? scheme_true : scheme_false));
  
  return __MakefloatList(r, *x0);;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetOverwriteMode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::set-overwrite-mode");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetOverwriteMode(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetOverwriteMode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetOverwriteMode();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetFileFormat(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::set-file-format");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetFileFormat(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetFileFormat(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetFileFormat();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditWriteToFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  if ((n >= 2) && objscheme_istype_wxMediaStreamOut(p[0], NULL, 0) && objscheme_istype_number(p[1], NULL)) {
    class wxMediaStreamOut* x0;
    long x1;
    long x2;

    
    if ((n < 2) ||(n > 3)) 
      scheme_wrong_count("wx:media-edit%::write-to-file (with position case)", 2, 3, n, p);
    x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-edit%::write-to-file (with position case)", 0);
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::write-to-file (with position case)");
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::write-to-file (with position case)");
    } else
      x2 = -1;

    
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->WriteToFile(*x0, x1, x2);

    
    
  } else  {
    class wxMediaStreamOut* x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:media-edit%::write-to-file (without position case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-edit%::write-to-file (without position case)", 0);

    
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->WriteToFile(*x0);

    
    
  }

  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditReadFromFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  if ((n >= 2) && objscheme_istype_wxMediaStreamIn(p[0], NULL, 0) && objscheme_istype_number(p[1], NULL)) {
    class wxMediaStreamIn* x0;
    long x1;
    Bool x2;

    
    if ((n < 2) ||(n > 3)) 
      scheme_wrong_count("wx:media-edit%::read-from-file (with position case)", 2, 3, n, p);
    x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-edit%::read-from-file (with position case)", 0);
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::read-from-file (with position case)");
    if (n > 2) {
      x2 = objscheme_unbundle_bool(p[2], "wx:media-edit%::read-from-file (with position case)");
    } else
      x2 = FALSE;

    
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ReadFromFile(*x0, x1, x2);

    
    
  } else  {
    class wxMediaStreamIn* x0;
    Bool x1;

    
    if ((n < 1) ||(n > 2)) 
      scheme_wrong_count("wx:media-edit%::read-from-file (without position case)", 1, 2, n, p);
    x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-edit%::read-from-file (without position case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::read-from-file (without position case)");
    } else
      x1 = FALSE;

    
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ReadFromFile(*x0, x1);

    
    
  }

  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditInsertFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  string x0;
  int x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-edit%::insert-file");
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::insert-file");
  } else
    x1 = wxMEDIA_FF_GUESS;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->InsertFile(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetCharacter(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  unsigned char r;
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::get-character");

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetCharacter(x0);

  
  
  return scheme_make_char((char)r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  long x0;
  long x1;
  Bool x2;
  Bool x3;
  long _x4;
  long* x4 = &_x4;

  
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::get-text");
  } else
    x0 = -1;
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::get-text");
  } else
    x1 = -1;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-edit%::get-text");
  } else
    x2 = FALSE;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:media-edit%::get-text");
  } else
    x3 = FALSE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetText(x0, x1, x2, x3, x4);

  
  
  return scheme_make_sized_string(r, _x4, 0);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetSnipPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::get-snip-position", 0);

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetSnipPosition(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetSnipPositionAndLocation(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  long _x1;
  long* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  float _x3;
  float* x3 = &_x3;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::get-snip-position-and-location", 0);
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:media-edit%::get-snip-position-and-location"), "wx:media-edit%::get-snip-position-and-location");
  if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:media-edit%::get-snip-position-and-location"), "wx:media-edit%::get-snip-position-and-location");
  if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:media-edit%::get-snip-position-and-location"), "wx:media-edit%::get-snip-position-and-location");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetSnipPositionAndLocation(x0, x1, x2, x3);

  
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], scheme_make_double(_x2));
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFindSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  long x0;
  int x1;
  long _x2;
  long* x2 = &_x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::find-snip");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::find-snip");
  if (n > 2) {
    if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_integer(objscheme_unbox(p[2], "wx:media-edit%::find-snip"), "wx:media-edit%::find-snip");
  } else
    x2 = NULL;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FindSnip(x0, x1, x2);

  
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], scheme_make_integer(_x2));
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFindStringAll(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long* r;
  objscheme_check_valid(obj);
  string x0;
  long _x1;
  long* x1 = &_x1;
  int x2;
  long x3;
  long x4;
  Bool x5;
  Bool x6;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-edit%::find-string-all");
  if (n > 1) {
    x2 = objscheme_unbundle_integer(p[1], "wx:media-edit%::find-string-all");
  } else
    x2 = 1;
  if (n > 2) {
    x3 = objscheme_unbundle_integer(p[2], "wx:media-edit%::find-string-all");
  } else
    x3 = -1;
  if (n > 3) {
    x4 = objscheme_unbundle_integer(p[3], "wx:media-edit%::find-string-all");
  } else
    x4 = -1;
  if (n > 4) {
    x5 = objscheme_unbundle_bool(p[4], "wx:media-edit%::find-string-all");
  } else
    x5 = TRUE;
  if (n > 5) {
    x6 = objscheme_unbundle_bool(p[5], "wx:media-edit%::find-string-all");
  } else
    x6 = TRUE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FindStringAll(x0, x1, x2, x3, x4, x5, x6);

  
  
  return __MakelongList(r, *x1);;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFindString(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  string x0;
  int x1;
  long x2;
  long x3;
  Bool x4;
  Bool x5;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-edit%::find-string");
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::find-string");
  } else
    x1 = 1;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::find-string");
  } else
    x2 = -1;
  if (n > 3) {
    x3 = objscheme_unbundle_integer(p[3], "wx:media-edit%::find-string");
  } else
    x3 = -1;
  if (n > 4) {
    x4 = objscheme_unbundle_bool(p[4], "wx:media-edit%::find-string");
  } else
    x4 = TRUE;
  if (n > 5) {
    x5 = objscheme_unbundle_bool(p[5], "wx:media-edit%::find-string");
  } else
    x5 = TRUE;

  if ((x1 != 1) && (x1 != -1)) scheme_signal_error("wx:media-edit%%::find-string: direction must be 1 or -1, given %d", x1);
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FindString(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditLastParagraph(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->LastParagraph();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditParagraphEndLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::paragraph-end-line");

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ParagraphEndLine(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditParagraphStartLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::paragraph-start-line");

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ParagraphStartLine(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditLineParagraph(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::line-paragraph");

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->LineParagraph(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditParagraphEndPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::paragraph-end-position");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::paragraph-end-position");
  } else
    x1 = TRUE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ParagraphEndPosition(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditParagraphStartPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::paragraph-start-position");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::paragraph-start-position");
  } else
    x1 = TRUE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ParagraphStartPosition(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditPositionParagraph(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::position-paragraph");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::position-paragraph");
  } else
    x1 = FALSE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->PositionParagraph(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditLastLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->LastLine();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditLastPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->LastPosition();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditLineLength(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::line-length");

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->LineLength(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditLineEndPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::line-end-position");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::line-end-position");
  } else
    x1 = TRUE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->LineEndPosition(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditLineStartPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::line-start-position");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::line-start-position");
  } else
    x1 = TRUE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->LineStartPosition(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditLineLocation(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  long x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::line-location");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::line-location");
  } else
    x1 = TRUE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->LineLocation(x0, x1);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditPositionLocation(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  Bool x3;
  Bool x4;
  Bool x5;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::position-location");
  if (n > 1) {
    if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-edit%::position-location"), "wx:media-edit%::position-location");
  } else
    x1 = NULL;
  if (n > 2) {
    if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:media-edit%::position-location"), "wx:media-edit%::position-location");
  } else
    x2 = NULL;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:media-edit%::position-location");
  } else
    x3 = TRUE;
  if (n > 4) {
    x4 = objscheme_unbundle_bool(p[4], "wx:media-edit%::position-location");
  } else
    x4 = FALSE;
  if (n > 5) {
    x5 = objscheme_unbundle_bool(p[5], "wx:media-edit%::position-location");
  } else
    x5 = FALSE;

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->PositionLocation(x0, x1, x2, x3, x4, x5);

  
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], scheme_make_double(_x2));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditPositionLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::position-line");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::position-line");
  } else
    x1 = FALSE;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->PositionLine(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetBetweenThreshold(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-edit%::set-between-threshold");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetBetweenThreshold(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetBetweenThreshold(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetBetweenThreshold();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFindPositionInLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;
  float x1;
  Bool _x2;
  Bool* x2 = &_x2;
  Bool _x3;
  Bool* x3 = &_x3;
  float _x4;
  float* x4 = &_x4;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::find-position-in-line");
  x1 = objscheme_unbundle_float(p[1], "wx:media-edit%::find-position-in-line");
  if (n > 2) {
    if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_bool(objscheme_unbox(p[2], "wx:media-edit%::find-position-in-line"), "wx:media-edit%::find-position-in-line");
  } else
    x2 = NULL;
  if (n > 3) {
    if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_bool(objscheme_unbox(p[3], "wx:media-edit%::find-position-in-line"), "wx:media-edit%::find-position-in-line");
  } else
    x3 = NULL;
  if (n > 4) {
    if (SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:media-edit%::find-position-in-line"), "wx:media-edit%::find-position-in-line");
  } else
    x4 = NULL;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FindPositionInLine(x0, x1, x2, x3, x4);

  
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], (_x2 ? scheme_true : scheme_false));
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], (_x3 ? scheme_true : scheme_false));
  if (n > 4 && !SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFindLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  float x0;
  Bool _x1;
  Bool* x1 = &_x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-edit%::find-line");
  if (n > 1) {
    if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_bool(objscheme_unbox(p[1], "wx:media-edit%::find-line"), "wx:media-edit%::find-line");
  } else
    x1 = NULL;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FindLine(x0, x1);

  
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], (_x1 ? scheme_true : scheme_false));
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFindPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  float x0;
  float x1;
  Bool _x2;
  Bool* x2 = &_x2;
  Bool _x3;
  Bool* x3 = &_x3;
  float _x4;
  float* x4 = &_x4;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-edit%::find-position");
  x1 = objscheme_unbundle_float(p[1], "wx:media-edit%::find-position");
  if (n > 2) {
    if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_bool(objscheme_unbox(p[2], "wx:media-edit%::find-position"), "wx:media-edit%::find-position");
  } else
    x2 = NULL;
  if (n > 3) {
    if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_bool(objscheme_unbox(p[3], "wx:media-edit%::find-position"), "wx:media-edit%::find-position");
  } else
    x3 = NULL;
  if (n > 4) {
    if (SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:media-edit%::find-position"), "wx:media-edit%::find-position");
  } else
    x4 = NULL;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FindPosition(x0, x1, x2, x3, x4);

  
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], (_x2 ? scheme_true : scheme_false));
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], (_x3 ? scheme_true : scheme_false));
  if (n > 4 && !SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSplitSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::split-snip");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SplitSnip(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditChangeStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 2) && objscheme_istype_wxStyleDelta(p[0], NULL, 1) && objscheme_istype_number(p[1], NULL)) {
    class wxStyleDelta* x0;
    long x1;
    long x2;

    
    if ((n < 2) ||(n > 3)) 
      scheme_wrong_count("wx:media-edit%::change-style (wx:style-delta% and position case)", 2, 3, n, p);
    x0 = objscheme_unbundle_wxStyleDelta(p[0], "wx:media-edit%::change-style (wx:style-delta% and position case)", 1);
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::change-style (wx:style-delta% and position case)");
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::change-style (wx:style-delta% and position case)");
    } else
      x2 = -1;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ChangeStyle(x0, x1, x2);

    
    
  } else if ((n >= 1) && objscheme_istype_wxStyleDelta(p[0], NULL, 1)) {
    class wxStyleDelta* x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:media-edit%::change-style (wx:style-delta% without position or wx:snip% case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxStyleDelta(p[0], "wx:media-edit%::change-style (wx:style-delta% without position or wx:snip% case)", 1);

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ChangeStyle(x0);

    
    
  } else  {
    class wxStyle* x0;
    long x1;
    long x2;

    
    if ((n < 1) ||(n > 3)) 
      scheme_wrong_count("wx:media-edit%::change-style (wx:style% case)", 1, 3, n, p);
    x0 = objscheme_unbundle_wxStyle(p[0], "wx:media-edit%::change-style (wx:style% case)", 1);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::change-style (wx:style% case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::change-style (wx:style% case)");
    } else
      x2 = -1;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ChangeStyle(x0, x1, x2);

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditDoPaste(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::do-paste");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::do-paste");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::DoPaste(x0, x1);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->DoPaste(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditDoCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;
  long x2;
  Bool x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::do-copy");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::do-copy");
  x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::do-copy");
  x3 = objscheme_unbundle_bool(p[3], "wx:media-edit%::do-copy");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::DoCopy(x0, x1, x2, x3);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->DoCopy(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditKill(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 2) && objscheme_istype_number(p[0], NULL) && objscheme_istype_number(p[1], NULL)) {
    long x0;
    long x1;
    long x2;

    
    if (n != 3) 
      scheme_wrong_count("wx:media-edit%::kill (position case)", 3, 3, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::kill (position case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::kill (position case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::kill (position case)");

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Kill(x0, x1, x2);

    
    
  } else  {
    long x0;

    
    if ((n > 1)) 
      scheme_wrong_count("wx:media-edit%::kill (without position case)", 0, 1, n, p);
    if (n > 0) {
      x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::kill (without position case)");
    } else
      x0 = 0;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Kill(x0);

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditPasteNext(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->PasteNext();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditPaste(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 2) && objscheme_istype_number(p[0], NULL) && objscheme_istype_number(p[1], NULL)) {
    long x0;
    long x1;
    long x2;

    
    if ((n < 2) ||(n > 3)) 
      scheme_wrong_count("wx:media-edit%::paste (position case)", 2, 3, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::paste (position case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::paste (position case)");
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::paste (position case)");
    } else
      x2 = -1;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Paste(x0, x1, x2);

    
    
  } else  {
    long x0;

    
    if ((n > 1)) 
      scheme_wrong_count("wx:media-edit%::paste (without position case)", 0, 1, n, p);
    if (n > 0) {
      x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::paste (without position case)");
    } else
      x0 = 0;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Paste(x0);

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 3) && objscheme_istype_bool(p[0], NULL) && objscheme_istype_number(p[1], NULL) && objscheme_istype_number(p[2], NULL)) {
    Bool x0;
    long x1;
    long x2;
    long x3;

    
    if ((n < 3) ||(n > 4)) 
      scheme_wrong_count("wx:media-edit%::copy (position case)", 3, 4, n, p);
    x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::copy (position case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::copy (position case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::copy (position case)");
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:media-edit%::copy (position case)");
    } else
      x3 = -1;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Copy(x0, x1, x2, x3);

    
    
  } else  {
    Bool x0;
    long x1;

    
    if ((n > 2)) 
      scheme_wrong_count("wx:media-edit%::copy (without position case)", 0, 2, n, p);
    if (n > 0) {
      x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::copy (without position case)");
    } else
      x0 = FALSE;
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::copy (without position case)");
    } else
      x1 = 0;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Copy(x0, x1);

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditCut(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 3) && objscheme_istype_bool(p[0], NULL) && objscheme_istype_number(p[1], NULL) && objscheme_istype_number(p[2], NULL)) {
    Bool x0;
    long x1;
    long x2;
    long x3;

    
    if ((n < 3) ||(n > 4)) 
      scheme_wrong_count("wx:media-edit%::cut (position case)", 3, 4, n, p);
    x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::cut (position case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::cut (position case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::cut (position case)");
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:media-edit%::cut (position case)");
    } else
      x3 = -1;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Cut(x0, x1, x2, x3);

    
    
  } else  {
    Bool x0;
    long x1;

    
    if ((n > 2)) 
      scheme_wrong_count("wx:media-edit%::cut (without position case)", 0, 2, n, p);
    if (n > 0) {
      x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::cut (without position case)");
    } else
      x0 = FALSE;
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::cut (without position case)");
    } else
      x1 = 0;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Cut(x0, x1);

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditErase(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Erase();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditDelete(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_number(p[0], NULL)) {
    long x0;
    long x1;
    Bool x2;

    
    if ((n < 1) ||(n > 3)) 
      scheme_wrong_count("wx:media-edit%::delete (position case)", 1, 3, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::delete (position case)");
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::delete (position case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_bool(p[2], "wx:media-edit%::delete (position case)");
    } else
      x2 = TRUE;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Delete(x0, x1, x2);

    
    
  } else  {

    
    if (n != 0) 
      scheme_wrong_count("wx:media-edit%::delete (no position case)", 0, 0, n, p);

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Delete();

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditInsert(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 2) && objscheme_istype_string(p[0], NULL) && objscheme_istype_number(p[1], NULL)) {
    long x0;
    string x1;
    long x2;
    long x3;
    Bool x4;

    
    if ((n < 2) ||(n > 4)) 
      scheme_wrong_count("wx:media-edit%::insert (string and position case)", 2, 4, n, p);
    x1 = (string)objscheme_unbundle_string(p[0], "wx:media-edit%::insert (string and position case)");
    x2 = objscheme_unbundle_integer(p[1], "wx:media-edit%::insert (string and position case)");
    if (n > 2) {
      x3 = objscheme_unbundle_integer(p[2], "wx:media-edit%::insert (string and position case)");
    } else
      x3 = -1;
    if (n > 3) {
      x4 = objscheme_unbundle_bool(p[3], "wx:media-edit%::insert (string and position case)");
    } else
      x4 = TRUE;

    x0 = SCHEME_STRTAG_VAL(p[0]);
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0, x1, x2, x3, x4);

    
    
  } else if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    long x0;
    string x1;

    
    if (n != 1) 
      scheme_wrong_count("wx:media-edit%::insert (string without position case)", 1, 1, n, p);
    x1 = (string)objscheme_unbundle_string(p[0], "wx:media-edit%::insert (string without position case)");

    x0 = SCHEME_STRTAG_VAL(p[0]);
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0, x1);

    
    
  } else if ((n >= 3) && objscheme_istype_number(p[0], NULL) && objscheme_istype_string(p[1], NULL) && objscheme_istype_number(p[2], NULL)) {
    long x0;
    string x1;
    long x2;
    long x3;
    Bool x4;

    
    if ((n < 3) ||(n > 5)) 
      scheme_wrong_count("wx:media-edit%::insert (length and string without position case)", 3, 5, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::insert (length and string without position case)");
    x1 = (string)objscheme_unbundle_string(p[1], "wx:media-edit%::insert (length and string without position case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::insert (length and string without position case)");
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:media-edit%::insert (length and string without position case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_bool(p[4], "wx:media-edit%::insert (length and string without position case)");
    } else
      x4 = TRUE;

    if ((x0 < 0) || (x0 > SCHEME_STRTAG_VAL(p[1]))) scheme_signal_error("wx:media-edit%%::insert: bad string length");
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0, x1, x2, x3, x4);

    
    
  } else if ((n >= 1) && objscheme_istype_number(p[0], NULL)) {
    long x0;
    string x1;

    
    if (n != 2) 
      scheme_wrong_count("wx:media-edit%::insert (length, string, and position case)", 2, 2, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::insert (length, string, and position case)");
    x1 = (string)objscheme_unbundle_string(p[1], "wx:media-edit%::insert (length, string, and position case)");

    if ((x0 < 0) || (x0 > SCHEME_STRTAG_VAL(p[1]))) scheme_signal_error("wx:media-edit%%::insert: bad string length");
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0, x1);

    
    
  } else if ((n >= 2) && objscheme_istype_wxSnip(p[0], NULL, 0) && objscheme_istype_number(p[1], NULL)) {
    class wxSnip* x0;
    long x1;
    long x2;
    Bool x3;

    
    if ((n < 2) ||(n > 4)) 
      scheme_wrong_count("wx:media-edit%::insert (wx:snip% and position case)", 2, 4, n, p);
    x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::insert (wx:snip% and position case)", 0);
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::insert (wx:snip% and position case)");
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::insert (wx:snip% and position case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_bool(p[3], "wx:media-edit%::insert (wx:snip% and position case)");
    } else
      x3 = TRUE;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0, x1, x2, x3);

    
    
  } else if ((n >= 1) && objscheme_istype_wxSnip(p[0], NULL, 0)) {
    class wxSnip* x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:media-edit%::insert (wx:snip% without position case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::insert (wx:snip% without position case)", 0);

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0);

    
    
  } else if ((n >= 2) && objscheme_istype_char(p[0], NULL) && objscheme_istype_number(p[1], NULL)) {
    unsigned char x0;
    long x1;
    long x2;

    
    if ((n < 2) ||(n > 3)) 
      scheme_wrong_count("wx:media-edit%::insert (character and position case)", 2, 3, n, p);
    x0 = ((unsigned char)objscheme_unbundle_char(p[0], "wx:media-edit%::insert (character and position case)"));
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::insert (character and position case)");
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::insert (character and position case)");
    } else
      x2 = -1;

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0, x1, x2);

    
    
  } else  {
    unsigned char x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:media-edit%::insert (character without position case)", 1, 1, n, p);
    x0 = ((unsigned char)objscheme_unbundle_char(p[0], "wx:media-edit%::insert (character without position case)"));

    
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0);

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFlashOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FlashOff();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditFlashOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;
  Bool x2;
  Bool x3;
  long x4;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::flash-on");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::flash-on");
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-edit%::flash-on");
  } else
    x2 = FALSE;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:media-edit%::flash-on");
  } else
    x3 = TRUE;
  if (n > 4) {
    x4 = objscheme_unbundle_integer(p[4], "wx:media-edit%::flash-on");
  } else
    x4 = 500;

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->FlashOn(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetAnchor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetAnchor();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetAnchor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::set-anchor");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::SetAnchor(x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetAnchor(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetVisibleLineRange(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long _x0;
  long* x0 = &_x0;
  long _x1;
  long* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:media-edit%::get-visible-line-range"), "wx:media-edit%::get-visible-line-range");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:media-edit%::get-visible-line-range"), "wx:media-edit%::get-visible-line-range");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetVisibleLineRange(x0, x1);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetVisiblePositionRange(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long _x0;
  long* x0 = &_x0;
  long _x1;
  long* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:media-edit%::get-visible-position-range"), "wx:media-edit%::get-visible-position-range");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:media-edit%::get-visible-position-range"), "wx:media-edit%::get-visible-position-range");

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetVisiblePositionRange(x0, x1);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditScrollToPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  long x0;
  Bool x1;
  long x2;
  int x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::scroll-to-position");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::scroll-to-position");
  } else
    x1 = FALSE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::scroll-to-position");
  } else
    x2 = -1;
  if (n > 3) {
    x3 = objscheme_unbundle_integer(p[3], "wx:media-edit%::scroll-to-position");
  } else
    x3 = 0;

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ScrollToPosition(x0, x1, x2, x3);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditMovePosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  Bool x1;
  int x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::move-position");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::move-position");
  } else
    x1 = FALSE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::move-position");
  } else
    x2 = wxMOVE_SIMPLE;

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->MovePosition(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetPositionBiasScroll(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  long x1;
  long x2;
  Bool x3;
  Bool x4;
  int x5;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::set-position-bias-scroll");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::set-position-bias-scroll");
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:media-edit%::set-position-bias-scroll");
  } else
    x2 = -1;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:media-edit%::set-position-bias-scroll");
  } else
    x3 = FALSE;
  if (n > 4) {
    x4 = objscheme_unbundle_bool(p[4], "wx:media-edit%::set-position-bias-scroll");
  } else
    x4 = TRUE;
  if (n > 5) {
    x5 = objscheme_unbundle_integer(p[5], "wx:media-edit%::set-position-bias-scroll");
  } else
    x5 = wxDEFAULT_SELECT;

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetPositionBiasScroll(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;
  Bool x2;
  Bool x3;
  int x4;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::set-position");
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::set-position");
  } else
    x1 = -1;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-edit%::set-position");
  } else
    x2 = FALSE;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:media-edit%::set-position");
  } else
    x3 = TRUE;
  if (n > 4) {
    x4 = objscheme_unbundle_integer(p[4], "wx:media-edit%::set-position");
  } else
    x4 = wxDEFAULT_SELECT;

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetPosition(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetEndPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetEndPosition();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetStartPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetStartPosition();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long _x0;
  long* x0 = &_x0;
  long _x1;
  long* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:media-edit%::get-position"), "wx:media-edit%::get-position");
  if (n > 1) {
    if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:media-edit%::get-position"), "wx:media-edit%::get-position");
  } else
    x1 = NULL;

  
  ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetPosition(x0, x1);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetFlattenedText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  long _x0;
  long* x0 = &_x0;

  

  
  r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetFlattenedText(x0);

  
  
  return scheme_make_sized_string(r, _x0, 0);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditPutFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  nstring x0;
  nstring x1;

  
  x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-edit%::put-file");
  x1 = (nstring)objscheme_unbundle_nullable_string(p[1], "wx:media-edit%::put-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::PutFile(x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->PutFile(x0, x1);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  nstring x0;

  
  x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-edit%::get-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::GetFile(x0);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetFile(x0);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAfterEditSequence(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AfterEditSequence();
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AfterEditSequence();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnEditSequence(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnEditSequence();
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnEditSequence();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAfterLoadFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::after-load-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AfterLoadFile(x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AfterLoadFile(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnLoadFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  string x0;
  int x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-edit%::on-load-file");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::on-load-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnLoadFile(x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnLoadFile(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAfterSaveFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::after-save-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AfterSaveFile(x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AfterSaveFile(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnSaveFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  string x0;
  int x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-edit%::on-save-file");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::on-save-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnSaveFile(x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnSaveFile(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnNewBox(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-edit%::on-new-box");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnNewBox(x0);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnNewBox(x0);

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnNewImageSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxImageSnip* r;
  objscheme_check_valid(obj);
  nstring x0;
  long x1;
  Bool x2;
  Bool x3;

  
  x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:media-edit%::on-new-image-snip");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::on-new-image-snip");
  x2 = objscheme_unbundle_bool(p[2], "wx:media-edit%::on-new-image-snip");
  x3 = objscheme_unbundle_bool(p[3], "wx:media-edit%::on-new-image-snip");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnNewImageSnip(x0, x1, x2, x3);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnNewImageSnip(x0, x1, x2, x3);

  
  
  return objscheme_bundle_wxImageSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditInvalidateBitmapCache(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;

  
  if (n > 0) {
    x0 = objscheme_unbundle_float(p[0], "wx:media-edit%::invalidate-bitmap-cache");
  } else
    x0 = 0.0;
  if (n > 1) {
    x1 = objscheme_unbundle_float(p[1], "wx:media-edit%::invalidate-bitmap-cache");
  } else
    x1 = 0.0;
  if (n > 2) {
    x2 = objscheme_unbundle_float(p[2], "wx:media-edit%::invalidate-bitmap-cache");
  } else
    x2 = -1.0;
  if (n > 3) {
    x3 = objscheme_unbundle_float(p[3], "wx:media-edit%::invalidate-bitmap-cache");
  } else
    x3 = -1.0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::InvalidateBitmapCache(x0, x1, x2, x3);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->InvalidateBitmapCache(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnPaint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;
  class wxDC* x1;
  float x2;
  float x3;
  float x4;
  float x5;
  float x6;
  float x7;
  int x8;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::on-paint");
  x1 = objscheme_unbundle_wxDC(p[1], "wx:media-edit%::on-paint", 0);
  x2 = objscheme_unbundle_float(p[2], "wx:media-edit%::on-paint");
  x3 = objscheme_unbundle_float(p[3], "wx:media-edit%::on-paint");
  x4 = objscheme_unbundle_float(p[4], "wx:media-edit%::on-paint");
  x5 = objscheme_unbundle_float(p[5], "wx:media-edit%::on-paint");
  x6 = objscheme_unbundle_float(p[6], "wx:media-edit%::on-paint");
  x7 = objscheme_unbundle_float(p[7], "wx:media-edit%::on-paint");
  x8 = objscheme_unbundle_integer(p[8], "wx:media-edit%::on-paint");

  if (x1 && !x1->Ok()) scheme_signal_error("%s: bad bitmap", "wx:media-buffer%::on-paint");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnPaint(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnPaint(x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditWriteFootersToFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-edit%::write-footers-to-file", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::WriteFootersToFile(*x0);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->WriteFootersToFile(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditWriteHeadersToFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-edit%::write-headers-to-file", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::WriteHeadersToFile(*x0);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->WriteHeadersToFile(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditReadFooterFromFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamIn* x0;
  string x1;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-edit%::read-footer-from-file", 0);
  x1 = (string)objscheme_unbundle_string(p[1], "wx:media-edit%::read-footer-from-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::ReadFooterFromFile(*x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ReadFooterFromFile(*x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditReadHeaderFromFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamIn* x0;
  string x1;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:media-edit%::read-header-from-file", 0);
  x1 = (string)objscheme_unbundle_string(p[1], "wx:media-edit%::read-header-from-file");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::ReadHeaderFromFile(*x0, x1);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ReadHeaderFromFile(*x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetFilename(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  Bool x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:media-edit%::set-filename");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::set-filename");
  } else
    x1 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::SetFilename(x0, x1);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetFilename(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditReleaseSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::release-snip", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::ReleaseSnip(x0);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ReleaseSnip(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetModified(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::set-modified");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::SetModified(x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetModified(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetSnipData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  class wxBufferData* x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::set-snip-data", 0);
  x1 = objscheme_unbundle_wxBufferData(p[1], "wx:media-edit%::set-snip-data", 1);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::SetSnipData(x0, x1);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetSnipData(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditGetSnipData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBufferData* r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::get-snip-data", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::GetSnipData(x0);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->GetSnipData(x0);

  
  
  return objscheme_bundle_wxBufferData(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditNeedsUpdate(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  float x1;
  float x2;
  float x3;
  float x4;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::needs-update", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-edit%::needs-update");
  x2 = objscheme_unbundle_float(p[2], "wx:media-edit%::needs-update");
  x3 = objscheme_unbundle_float(p[3], "wx:media-edit%::needs-update");
  x4 = objscheme_unbundle_float(p[4], "wx:media-edit%::needs-update");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::NeedsUpdate(x0, x1, x2, x3, x4);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->NeedsUpdate(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditResized(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  Bool x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::resized", 0);
  x1 = objscheme_unbundle_bool(p[1], "wx:media-edit%::resized");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::Resized(x0, x1);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Resized(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSetCaretOwner(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  int x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::set-caret-owner", 1);
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:media-edit%::set-caret-owner");
  } else
    x1 = wxFOCUS_IMMEDIATE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::SetCaretOwner(x0, x1);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SetCaretOwner(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditScrollTo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  Bool x5;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-edit%::scroll-to", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-edit%::scroll-to");
  x2 = objscheme_unbundle_float(p[2], "wx:media-edit%::scroll-to");
  x3 = objscheme_unbundle_float(p[3], "wx:media-edit%::scroll-to");
  x4 = objscheme_unbundle_float(p[4], "wx:media-edit%::scroll-to");
  x5 = objscheme_unbundle_bool(p[5], "wx:media-edit%::scroll-to");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::ScrollTo(x0, x1, x2, x3, x4, x5);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->ScrollTo(x0, x1, x2, x3, x4, x5);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnChange(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnChange();
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnChange();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::on-focus");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnFocus(x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnFocus(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnDefaultChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:media-edit%::on-default-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnDefaultChar(*x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnDefaultChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnDefaultEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-edit%::on-default-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnDefaultEvent(*x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnDefaultEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnLocalChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:media-edit%::on-local-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnLocalChar(*x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnLocalChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnLocalEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-edit%::on-local-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnLocalEvent(*x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnLocalEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditSizeCacheInvalid(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::SizeCacheInvalid();
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->SizeCacheInvalid();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOwnCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-edit%::own-caret");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OwnCaret(x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OwnCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditRefresh(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  Bool x4;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-edit%::refresh");
  x1 = objscheme_unbundle_float(p[1], "wx:media-edit%::refresh");
  x2 = objscheme_unbundle_float(p[2], "wx:media-edit%::refresh");
  x3 = objscheme_unbundle_float(p[3], "wx:media-edit%::refresh");
  x4 = objscheme_unbundle_bool(p[4], "wx:media-edit%::refresh");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::Refresh(x0, x1, x2, x3, x4);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->Refresh(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditAdjustCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxCursor* r;
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-edit%::adjust-cursor", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::AdjustCursor(*x0);
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->AdjustCursor(*x0);

  
  
  return objscheme_bundle_wxCursor(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:media-edit%::on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnChar(*x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-edit%::on-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::OnEvent(*x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditCopySelfTo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaBuffer* x0;

  
  x0 = objscheme_unbundle_wxMediaBuffer(p[0], "wx:media-edit%::copy-self-to", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::CopySelfTo(x0);
  else
    ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->CopySelfTo(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaEditCopySelf(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaBuffer* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->wxMediaEdit::CopySelf();
  else
    r = ((wxMediaEdit *)((Scheme_Class_Object *)obj)->primdata)->CopySelf();

  
  
  return objscheme_bundle_wxMediaBuffer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaEdit_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMediaEdit *realobj;
  float x0;
  float* x1;
  int x2;

  
  if ((n > 2)) 
    scheme_wrong_count("wx:media-edit%::initialization", 0, 2, n, p);
  if (n > 0) {
    x0 = objscheme_unbundle_float(p[0], "wx:media-edit%::initialization");
  } else
    x0 = 1.0;
  if (n > 1) {
    x1 = NULL;
  } else
    x1 = NULL;

  x1 = __MakefloatArray((1 < n) ? p[1] : scheme_null, &x2, "wx:media-edit%::initialization");
  realobj = new os_wxMediaEdit(obj, x0, x1, x2);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxMediaEdit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:media-edit%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:media-edit%");
}

void objscheme_setup_wxMediaEdit(void *env)
{
if (os_wxMediaEdit_class) {
    objscheme_add_global_class(os_wxMediaEdit_class,  "wx:media-edit%", env);
} else {
  os_wxMediaEdit_class = objscheme_def_prim_class(env, "wx:media-edit%", "wx:media-buffer%", os_wxMediaEdit_ConstructScheme, 125);

  scheme_add_method_w_arity(os_wxMediaEdit_class,"get-class-name",objscheme_classname_os_wxMediaEdit, 0, 0);

 scheme_add_method_w_arity(os_wxMediaEdit_class, "remove-clickback", os_wxMediaEditRemoveClickback, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-clickback", os_wxMediaEditSetClickback, 3, 5);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-wordbreak-func", os_wxMediaEditSetWordbreakFunc, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-autowrap-bitmap", os_wxMediaEditSetAutowrapBitmap, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-new-tab-snip", os_wxMediaEditOnNewTabSnip, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-new-text-snip", os_wxMediaEditOnNewTextSnip, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "caret-hidden?", os_wxMediaEditCaretHidden, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "hide-caret", os_wxMediaEditHideCaret, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-wordbreak-map", os_wxMediaEditGetWordbreakMap, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-wordbreak-map", os_wxMediaEditSetWordbreakMap, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "find-wordbreak", os_wxMediaEditFindWordbreak, 3, 3);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-region-data", os_wxMediaEditSetRegionData, 3, 3);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-region-data", os_wxMediaEditGetRegionData, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "after-set-size-constraint", os_wxMediaEditAfterSetSizeConstraint, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-set-size-constraint", os_wxMediaEditOnSetSizeConstraint, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "after-set-position", os_wxMediaEditAfterSetPosition, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "after-change-style", os_wxMediaEditAfterChangeStyle, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-change-style", os_wxMediaEditOnChangeStyle, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "after-delete", os_wxMediaEditAfterDelete, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-delete", os_wxMediaEditOnDelete, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "after-insert", os_wxMediaEditAfterInsert, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-insert", os_wxMediaEditOnInsert, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "add-editor-functions", os_wxMediaEditAddEditorFunctions, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-tabs", os_wxMediaEditSetTabs, 1, 3);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-tabs", os_wxMediaEditGetTabs, 0, 3);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-overwrite-mode", os_wxMediaEditSetOverwriteMode, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-overwrite-mode", os_wxMediaEditGetOverwriteMode, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-file-format", os_wxMediaEditSetFileFormat, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-file-format", os_wxMediaEditGetFileFormat, 0, 0);
 scheme_add_method(os_wxMediaEdit_class, "write-to-file", os_wxMediaEditWriteToFile);
 scheme_add_method(os_wxMediaEdit_class, "read-from-file", os_wxMediaEditReadFromFile);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "insert-file", os_wxMediaEditInsertFile, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-character", os_wxMediaEditGetCharacter, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-text", os_wxMediaEditGetText, 0, 4);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-snip-position", os_wxMediaEditGetSnipPosition, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-snip-position-and-location", os_wxMediaEditGetSnipPositionAndLocation, 4, 4);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "find-snip", os_wxMediaEditFindSnip, 2, 3);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "find-string-all", os_wxMediaEditFindStringAll, 1, 6);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "find-string", os_wxMediaEditFindString, 1, 6);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "last-paragraph", os_wxMediaEditLastParagraph, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "paragraph-end-line", os_wxMediaEditParagraphEndLine, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "paragraph-start-line", os_wxMediaEditParagraphStartLine, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "line-paragraph", os_wxMediaEditLineParagraph, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "paragraph-end-position", os_wxMediaEditParagraphEndPosition, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "paragraph-start-position", os_wxMediaEditParagraphStartPosition, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "position-paragraph", os_wxMediaEditPositionParagraph, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "last-line", os_wxMediaEditLastLine, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "last-position", os_wxMediaEditLastPosition, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "line-length", os_wxMediaEditLineLength, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "line-end-position", os_wxMediaEditLineEndPosition, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "line-start-position", os_wxMediaEditLineStartPosition, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "line-location", os_wxMediaEditLineLocation, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "position-location", os_wxMediaEditPositionLocation, 1, 6);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "position-line", os_wxMediaEditPositionLine, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-between-threshold", os_wxMediaEditSetBetweenThreshold, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-between-threshold", os_wxMediaEditGetBetweenThreshold, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "find-position-in-line", os_wxMediaEditFindPositionInLine, 2, 5);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "find-line", os_wxMediaEditFindLine, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "find-position", os_wxMediaEditFindPosition, 2, 5);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "split-snip", os_wxMediaEditSplitSnip, 1, 1);
 scheme_add_method(os_wxMediaEdit_class, "change-style", os_wxMediaEditChangeStyle);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "do-paste", os_wxMediaEditDoPaste, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "do-copy", os_wxMediaEditDoCopy, 4, 4);
 scheme_add_method(os_wxMediaEdit_class, "kill", os_wxMediaEditKill);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "paste-next", os_wxMediaEditPasteNext, 0, 0);
 scheme_add_method(os_wxMediaEdit_class, "paste", os_wxMediaEditPaste);
 scheme_add_method(os_wxMediaEdit_class, "copy", os_wxMediaEditCopy);
 scheme_add_method(os_wxMediaEdit_class, "cut", os_wxMediaEditCut);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "erase", os_wxMediaEditErase, 0, 0);
 scheme_add_method(os_wxMediaEdit_class, "delete", os_wxMediaEditDelete);
 scheme_add_method(os_wxMediaEdit_class, "insert", os_wxMediaEditInsert);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "flash-off", os_wxMediaEditFlashOff, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "flash-on", os_wxMediaEditFlashOn, 2, 5);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-anchor", os_wxMediaEditGetAnchor, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-anchor", os_wxMediaEditSetAnchor, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-visible-line-range", os_wxMediaEditGetVisibleLineRange, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-visible-position-range", os_wxMediaEditGetVisiblePositionRange, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "scroll-to-position", os_wxMediaEditScrollToPosition, 1, 4);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "move-position", os_wxMediaEditMovePosition, 1, 3);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-position-bias-scroll", os_wxMediaEditSetPositionBiasScroll, 2, 6);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-position", os_wxMediaEditSetPosition, 1, 5);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-end-position", os_wxMediaEditGetEndPosition, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-start-position", os_wxMediaEditGetStartPosition, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-position", os_wxMediaEditGetPosition, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-flattened-text", os_wxMediaEditGetFlattenedText, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "put-file", os_wxMediaEditPutFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-file", os_wxMediaEditGetFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "after-edit-sequence", os_wxMediaEditAfterEditSequence, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-edit-sequence", os_wxMediaEditOnEditSequence, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "after-load-file", os_wxMediaEditAfterLoadFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-load-file", os_wxMediaEditOnLoadFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "after-save-file", os_wxMediaEditAfterSaveFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-save-file", os_wxMediaEditOnSaveFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-new-box", os_wxMediaEditOnNewBox, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-new-image-snip", os_wxMediaEditOnNewImageSnip, 4, 4);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "invalidate-bitmap-cache", os_wxMediaEditInvalidateBitmapCache, 0, 4);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-paint", os_wxMediaEditOnPaint, 9, 9);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "write-footers-to-file", os_wxMediaEditWriteFootersToFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "write-headers-to-file", os_wxMediaEditWriteHeadersToFile, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "read-footer-from-file", os_wxMediaEditReadFooterFromFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "read-header-from-file", os_wxMediaEditReadHeaderFromFile, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-filename", os_wxMediaEditSetFilename, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "release-snip", os_wxMediaEditReleaseSnip, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-modified", os_wxMediaEditSetModified, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-snip-data", os_wxMediaEditSetSnipData, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "get-snip-data", os_wxMediaEditGetSnipData, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "needs-update", os_wxMediaEditNeedsUpdate, 5, 5);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "resized", os_wxMediaEditResized, 2, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "set-caret-owner", os_wxMediaEditSetCaretOwner, 1, 2);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "scroll-to", os_wxMediaEditScrollTo, 6, 6);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-change", os_wxMediaEditOnChange, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-focus", os_wxMediaEditOnFocus, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-default-char", os_wxMediaEditOnDefaultChar, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-default-event", os_wxMediaEditOnDefaultEvent, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-local-char", os_wxMediaEditOnLocalChar, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-local-event", os_wxMediaEditOnLocalEvent, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "size-cache-invalid", os_wxMediaEditSizeCacheInvalid, 0, 0);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "own-caret", os_wxMediaEditOwnCaret, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "refresh", os_wxMediaEditRefresh, 5, 5);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "adjust-cursor", os_wxMediaEditAdjustCursor, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-char", os_wxMediaEditOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "on-event", os_wxMediaEditOnEvent, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "copy-self-to", os_wxMediaEditCopySelfTo, 1, 1);
 scheme_add_method_w_arity(os_wxMediaEdit_class, "copy-self", os_wxMediaEditCopySelf, 0, 0);


  scheme_made_class(os_wxMediaEdit_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMediaEdit, wxTYPE_MEDIA_EDIT);

}
  scheme_install_xc_global("wx:const-edit-undo", scheme_make_integer(wxEDIT_UNDO), env);
  scheme_install_xc_global("wx:const-edit-redo", scheme_make_integer(wxEDIT_REDO), env);
  scheme_install_xc_global("wx:const-edit-clear", scheme_make_integer(wxEDIT_CLEAR), env);
  scheme_install_xc_global("wx:const-edit-cut", scheme_make_integer(wxEDIT_CUT), env);
  scheme_install_xc_global("wx:const-edit-copy", scheme_make_integer(wxEDIT_COPY), env);
  scheme_install_xc_global("wx:const-edit-paste", scheme_make_integer(wxEDIT_PASTE), env);
  scheme_install_xc_global("wx:const-edit-kill", scheme_make_integer(wxEDIT_KILL), env);
  scheme_install_xc_global("wx:const-edit-insert-text-box", scheme_make_integer(wxEDIT_INSERT_TEXT_BOX), env);
  scheme_install_xc_global("wx:const-edit-insert-graphic-box", scheme_make_integer(wxEDIT_INSERT_GRAPHIC_BOX), env);
  scheme_install_xc_global("wx:const-edit-insert-image", scheme_make_integer(wxEDIT_INSERT_IMAGE), env);
  scheme_install_xc_global("wx:const-edit-select-all", scheme_make_integer(wxEDIT_SELECT_ALL), env);
  scheme_install_xc_global("wx:const-move-simple", scheme_make_integer(wxMOVE_SIMPLE), env);
  scheme_install_xc_global("wx:const-move-line", scheme_make_integer(wxMOVE_LINE), env);
  scheme_install_xc_global("wx:const-move-page", scheme_make_integer(wxMOVE_PAGE), env);
  scheme_install_xc_global("wx:const-move-word", scheme_make_integer(wxMOVE_WORD), env);
  scheme_install_xc_global("wx:const-media-ff-guess", scheme_make_integer(wxMEDIA_FF_GUESS), env);
  scheme_install_xc_global("wx:const-media-ff-std", scheme_make_integer(wxMEDIA_FF_STD), env);
  scheme_install_xc_global("wx:const-media-ff-text", scheme_make_integer(wxMEDIA_FF_TEXT), env);
  scheme_install_xc_global("wx:const-media-ff-text-force-cr", scheme_make_integer(wxMEDIA_FF_TEXT_FORCE_CR), env);
  scheme_install_xc_global("wx:const-media-ff-same", scheme_make_integer(wxMEDIA_FF_SAME), env);
  scheme_install_xc_global("wx:const-media-ff-copy", scheme_make_integer(wxMEDIA_FF_COPY), env);
  scheme_install_xc_global("wx:const-snip-draw-no-caret", scheme_make_integer(wxSNIP_DRAW_NO_CARET), env);
  scheme_install_xc_global("wx:const-snip-draw-show-caret", scheme_make_integer(wxSNIP_DRAW_SHOW_CARET), env);
  scheme_install_xc_global("wx:const-snip-draw-show-inactive-caret", scheme_make_integer(wxSNIP_DRAW_SHOW_INACTIVE_CARET), env);
  scheme_install_xc_global("wx:const-snip-before-or-null", scheme_make_integer(wxSNIP_BEFORE_OR_NULL), env);
  scheme_install_xc_global("wx:const-snip-before", scheme_make_integer(wxSNIP_BEFORE), env);
  scheme_install_xc_global("wx:const-snip-after", scheme_make_integer(wxSNIP_AFTER), env);
  scheme_install_xc_global("wx:const-snip-after-or-null", scheme_make_integer(wxSNIP_AFTER_OR_NULL), env);
  scheme_install_xc_global("wx:const-break-for-caret", scheme_make_integer(wxBREAK_FOR_CARET), env);
  scheme_install_xc_global("wx:const-break-for-line", scheme_make_integer(wxBREAK_FOR_LINE), env);
  scheme_install_xc_global("wx:const-break-for-selection", scheme_make_integer(wxBREAK_FOR_SELECTION), env);
  scheme_install_xc_global("wx:const-break-for-user-1", scheme_make_integer(wxBREAK_FOR_USER_1), env);
  scheme_install_xc_global("wx:const-break-for-user-2", scheme_make_integer(wxBREAK_FOR_USER_2), env);
  scheme_install_xc_global("wx:const-default-select", scheme_make_integer(wxDEFAULT_SELECT), env);
  scheme_install_xc_global("wx:const-x-select", scheme_make_integer(wxX_SELECT), env);
  scheme_install_xc_global("wx:const-local-select", scheme_make_integer(wxLOCAL_SELECT), env);
}

int objscheme_istype_wxMediaEdit(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMediaEdit_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:media-edit%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMediaEdit(class wxMediaEdit *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_MEDIA_EDIT) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMediaEdit_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMediaEdit *objscheme_unbundle_wxMediaEdit(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMediaEdit(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMediaEdit *)o->primdata;
  else
    return (wxMediaEdit *)o->primdata;
}





_GL_/_OpenGL_ bindings for PLT Scheme

Sgl provides access to the system's GL library, version 1.3 and
earlier.  The GL library and hence the sgl binding do not address the
attachment of GL rendering contexts to displays or other system level
concerns; they only include drawing commands.  Thus sgl should work
with any PLT Scheme extension that provides GL with access to the
system (such as a binding for glx) but does not itself provide
functionality for managing screen resources.  mred (and hence
DrScheme) supports sending GL commands to a window on (at least)
Windows, Linux and OS X systems (see mred's gl-context<%> interface).

The invocation of a function from version x raises an exception
(exn:fail) on a system with a GL version prior to x.  All GLenum
constants from version x have values of -1 on systems with previous
versions.

The sgl binding has two layers.  The gl and gl-unsafe libraries
provide access to the C-language style GL API.  The sgl library
provides access to the GL API through a more Scheme-like interface.
Sgl also includes a homogeneous vector extension to support GL
functions that have array arguments.

Many thanks to Robert Kooima who wrote the GL binding that the gl and
gl-unsafe modules are based on.  Thanks also to Brendan Burns for the
GLU addition, bug fixes and the gl-frame.ss and alpha.ss files in the
examples subdirectory.


_gl-vectors.ss_

The gl-vectors module provides homogeneous vectors of the different
kinds of numbers.  12 functions are provided for each of 9 kinds of
vectors: gl-double-vector, gl-float-vector, gl-int-vector,
gl-short-vector, gl-byte-vector, gl-uint-vector, gl-ushort-vector,
gl-ubyte-vector, and gl-boolean-vector.

The functions follow (replace [type] with double, float, etc.):

(gl-[type]-vector n ...) returns a gl-[type]-vector containing the
given numbers n.

(make-gl-[type]-vector i n) returns a gl-[type]-vector of length i,
with n at every index.  The n argument is optional.

(vector->gl-[type]-vector v) takes a Scheme vector and converts it to
a gl-[type]-vector.  It fails if v is not a vector containing only
Scheme real numbers.

(gl-[type]-vector->vector v) takes a gl-[type]-vector and returns a
Scheme vector with the same numbers.

(gl-[type]-vector-ref v i) returns the ith element of v.  It fails if
i is greater than or equal to the length of v.

(gl-[type]-vector-set! v i n) sets the ith element of the
gl-[type]-vector v to n.  It fails if (i >= length of v) or if n is
not a Scheme real number.

(gl-[type]-vector-length v) returns the number of elements in the
gl-[type]-vector v.

(gl-[type]-vector? v) returns #t if v is a gl-[type]-vector and #f
otherwise.

(gl-[type]-vector+ v1 v2) returns a new gl-[type]-vector that is the
element-by-element sum of gl-[type]-vectors v1 and v2.

(gl-[type]-vector- v1 v2) returns a new gl-[type]-vector that is the
element-by-element difference of gl-[type]-vectors v1 and v2.

(gl-[type]-vector* r v) returns a new gl-[type]-vector with element i
equal to r times the ith element of gl-[type]-vector v.

(gl-[type]-vector-norm v) returns the square root of the sum of the
squares of the elements of gl-[type]-vector v.

_gl.ss_

Use the gl module by adding (require (lib "gl.ss" "sgl")) to your
program.  The gl module provides a direct interface to the system's
underlying interface closely following the conventions of the
C-language GL API.  However, the functions provided by the gl module
check their arguments and raise an exception when given the wrong kind
of value or an array of the wrong length.  The gl.ss module provides a
binding for each GLenum constant to its integer value and also a
binding for each function listed at the end of this document.

Notational Example:
(require (lib "gl.ss" "sgl")
         (lib "gl-vectors.ss" "sgl"))
(glBegin GL_TRIANGLES)
(glVertex3i 1 2 3)
(glVertex4fv (vector->gl-float-vector (vector 1 2 3 4)))
(glEnd)

See alpha.ss in the examples subdirectory of the sgl collection
(${PLT-HOME}/collects/sgl/examples/alpha.ss) for a working example.
Try choosing the sk.jpg file in the icons when this example asks you
for a file.  You may have to press "t" a few times if the spinning
cube is blank.

_gl-unsafe.ss_

Use the gl-unsafe module by adding (require (lib "gl-unsafe.ss" "sgl"))
to your program.  The gl-unsafe module follows the conventions of the
gl module except that function arguments are not necessarily checked,
so an incorrect call to a gl-unsafe function could crash the entire
Scheme system.  gl-unsafe includes GL functions that are not in gl
because appropriate checks have not been added to them or appropriate
checks cannot be added to them.

_sgl.ss_

Use the sgl module by adding (require (lib "sgl.ss" "sgl)) to your
program.  To prefix the function names with "gl-" use the form
(require (prefix gl- (lib "sgl.ss" "sgl"))) instead.  The sgl module
provides a more Scheme-like interface to the GL functions in gl (sgl
does not provide an interface to the functions of gl-unsafe).

Functions in sgl take symbols instead of integers for GLenum
arguments.  Each function checks that the given symbol is an
acceptable argument and raises an exception if it is not.  Given the
name of a C-language "#define" constant, determine the corresponding
symbolic argument by removing the leading "GL_", converting the
letters to lower-case and replacing all underscores with dashes.  For
example, GL_TRIANGLES becomes 'triangles and GL_TRIANGLE_STRIP becomes
'triangle-strip.

The functions in sgl use Scheme style names instead of C style names.
To convert a C GL name to a Scheme GL name, drop the leading "gl" (use
the require form to choose whatever prefix you desire, as above),
separate adjacent words with hyphens, and convert to all lower case.
Functions that have several variants to accommodate different numbers
and types of arguments are collapsed into one or two functions in sgl.
For example, sgl provides two vertex functions, vertex and vertex-v.
The vertex function accepts 2, 3 or 4 numerical arguments, and the
vertex-v function accepts gl-vectors of length 2, 3 or 4.  The C
language GL interface has 24 vertex functions glVertex3i, glVertex4fv,
etc.

The sgl module is not yet complete and many functions from the gl
module do not yet have counterparts in the sgl module.  See the list
of functions below.

Notational Example:
(require (prefix gl- (lib "sgl.ss" "sgl"))
         (lib "gl-vectors.ss" "sgl"))
(gl-begin 'triangles)
(gl-vertex 1 2 3)
(gl-vertex-v (vector->gl-float-vector (vector 1 2 3 4)))
(gl-end)

See gears.ss in the examples subdirectory of the sgl collection
(${PLT-HOME}/collects/sgl/examples/gears.ss) for a working example.


Notes:
In the C language GL API values are often returned by reference parameters.
The gl and sgl modules instead directly return a value in the following 
cases:

gluUnProject: GLdouble GLdouble GLdouble GLdouble[16] GLdouble[16] GLint[4] ->
              #f or GLdouble[3]

gluUnProject4: GLdouble GLdouble GLdouble GLdouble GLdouble[16] GLdouble[16]
               GLint[4] GLdouble GLdouble -> f or GLdouble[4]



Function lists:

-----------------------------  sgl: -------------------------------


active-texture
are-textures-resident
begin
bitmap
call-list
clear
clear-accum
clear-color
clear-depth
clear-index
clear-stencil
client-active-textures
clip-plane
color
color-mask
color-material
color-v
cull-face
cylinder
delete-lists
delete-textures
depth-mask
depth-range
disable
disable-client-state
disk
edge-flag
edge-flag-v
enable
enable-client-state
end
end-list
eval-coord
eval-coord-v
finish
flush
front-face
frustum
gen-lists
gen-textures
get-error
get-string
index
index-mask
index-v
init-names
is-list
is-texture
light
light-model
light-model-v
light-v
line-stipple
line-width
list-base
load-identity
load-matrix
load-name
load-transpose-matrix
look-at
material
material-v
matrix-mode
mult-matrix
mult-transpose-matrix
new-list
new-quadric
normal
normal-v
ortho
ortho-2D
partial-disk
pass-through
perspective
pick-matrix
pixel-zoom
point-size
polygon-mode
polygon-offset
polygon-stipple
pop-attrib
pop-client-attrib
pop-matrix
pop-name
prioritize-textures
push-matrix
push-name
quadric-draw-style
quadric-normals
quadric-orientation
quadric-texture
raster-pos
raster-pos-v
rect
rect-v
render-mode
rotate
scale
scissor
select-buffer
shade-model
sphere
stencil-mask
tex-coord
tex-coord-v
translate
u-get-string
un-project
vertex
vertex-v
viewport


------------------------------  gl:  ------------------------------
Version 1.1
glAccum
glAlphaFunc
glAreTexturesResident
glBegin
glBindTexture
glBitmap
glBlendFunc
glCallList
glCallLists
glClear
glClearAccum
glClearColor
glClearDepth
glClearIndex
glClearStencil
glClipPlane
glColor3b
glColor3bv
glColor3d
glColor3dv
glColor3f
glColor3fv
glColor3i
glColor3iv
glColor3s
glColor3sv
glColor3ub
glColor3ubv
glColor3ui
glColor3uiv
glColor3us
glColor3usv
glColor4b
glColor4bv
glColor4d
glColor4dv
glColor4f
glColor4fv
glColor4i
glColor4iv
glColor4s
glColor4sv
glColor4ub
glColor4ubv
glColor4ui
glColor4uiv
glColor4us
glColor4usv
glColorMask
glColorMaterial
glCopyPixels
glCopyTexImage1D
glCopyTexImage2D
glCopyTexSubImage1D
glCopyTexSubImage2D
glCullFace
glDeleteLists
glDeleteTextures
glDepthFunc
glDepthMask
glDepthRange
glDisable
glDisableClientState
glDrawBuffer
glDrawPixels
glEdgeFlag
glEdgeFlagv
glEnable
glEnableClientState
glEnd
glEndList
glEvalCoord1d
glEvalCoord1dv
glEvalCoord1f
glEvalCoord1fv
glEvalCoord2d
glEvalCoord2dv
glEvalCoord2f
glEvalCoord2fv
glEvalMesh1
glEvalMesh2
glEvalPoint1
glEvalPoint2
glFeedbackBuffer
glFinish
glFlush
glFogf
glFogfv
glFogi
glFogiv
glFrontFace
glFrustum
glGenLists
glGenTextures
glGetClipPlane
glGetError
glGetLightfv
glGetLightiv
glGetMaterialfv
glGetMaterialiv
glGetPolygonStipple
glGetString
glHint
glIndexMask
glIndexd
glIndexdv
glIndexf
glIndexfv
glIndexi
glIndexiv
glIndexs
glIndexsv
glIndexub
glIndexubv
glInitNames
glIsEnabled
glIsList
glIsTexture
glLightModelf
glLightModelfv
glLightModeli
glLightModeliv
glLightf
glLightfv
glLighti
glLightiv
glLineStipple
glLineWidth
glListBase
glLoadIdentity
glLoadMatrixd
glLoadMatrixf
glLoadName
glLogicOp
glMap1d
glMap1f
glMap2d
glMap2f
glMapGrid1d
glMapGrid1f
glMapGrid2d
glMapGrid2f
glMaterialf
glMaterialfv
glMateriali
glMaterialiv
glMatrixMode
glMultMatrixd
glMultMatrixf
glNewList
glNormal3b
glNormal3bv
glNormal3d
glNormal3dv
glNormal3f
glNormal3fv
glNormal3i
glNormal3iv
glNormal3s
glNormal3sv
glOrtho
glPassThrough
glPixelMapfv
glPixelMapuiv
glPixelMapusv
glPixelStoref
glPixelStorei
glPixelTransferf
glPixelTransferi
glPixelZoom
glPointSize
glPolygonMode
glPolygonOffset
glPolygonStipple
glPopAttrib
glPopClientAttrib
glPopMatrix
glPopName
glPrioritizeTextures
glPushAttrib
glPushClientAttrib
glPushMatrix
glPushName
glRasterPos2d
glRasterPos2dv
glRasterPos2f
glRasterPos2fv
glRasterPos2i
glRasterPos2iv
glRasterPos2s
glRasterPos2sv
glRasterPos3d
glRasterPos3dv
glRasterPos3f
glRasterPos3fv
glRasterPos3i
glRasterPos3iv
glRasterPos3s
glRasterPos3sv
glRasterPos4d
glRasterPos4dv
glRasterPos4f
glRasterPos4fv
glRasterPos4i
glRasterPos4iv
glRasterPos4s
glRasterPos4sv
glReadBuffer
glReadPixels
glRectd
glRectdv
glRectf
glRectfv
glRecti
glRectiv
glRects
glRectsv
glRenderMode
glRotated
glRotatef
glScaled
glScalef
glScissor
glSelectBuffer
glShadeModel
glStencilFunc
glStencilMask
glStencilOp
glTexCoord1d
glTexCoord1dv
glTexCoord1f
glTexCoord1fv
glTexCoord1i
glTexCoord1iv
glTexCoord1s
glTexCoord1sv
glTexCoord2d
glTexCoord2dv
glTexCoord2f
glTexCoord2fv
glTexCoord2i
glTexCoord2iv
glTexCoord2s
glTexCoord2sv
glTexCoord3d
glTexCoord3dv
glTexCoord3f
glTexCoord3fv
glTexCoord3i
glTexCoord3iv
glTexCoord3s
glTexCoord3sv
glTexCoord4d
glTexCoord4dv
glTexCoord4f
glTexCoord4fv
glTexCoord4i
glTexCoord4iv
glTexCoord4s
glTexCoord4sv
glTexEnvf
glTexEnvfv
glTexEnvi
glTexEnviv
glTexGend
glTexGendv
glTexGenf
glTexGenfv
glTexGeni
glTexGeniv
glTexImage1D
glTexImage2D
glTexParameterf
glTexParameterfv
glTexParameteri
glTexParameteriv
glTexSubImage1D
glTexSubImage2D
glTranslated
glTranslatef
glVertex2d
glVertex2dv
glVertex2f
glVertex2fv
glVertex2i
glVertex2iv
glVertex2s
glVertex2sv
glVertex3d
glVertex3dv
glVertex3f
glVertex3fv
glVertex3i
glVertex3iv
glVertex3s
glVertex3sv
glVertex4d
glVertex4dv
glVertex4f
glVertex4fv
glVertex4i
glVertex4iv
glVertex4s
glVertex4sv
glViewport
gluGetString
gluScaleImage
gluBuild1DMipmaps
gluBuild2DMipmaps
gluBuild1DMipmapLevels
gluBuild2DMipmapLevels
gluOrtho2D
gluPerspective
gluLookAt
gluPickMatrix
gluNewQuadric
gluQuadricNormals
gluQuadircOrientation
gluQuadircDrawStyle
gluQuadricTexture
gluCylinder
gluDisk
gluSphere
gluPartialDisk

Version 1.2
glBlendColor
glBlendEquation
glColorSubTable
glColorTable
glColorTableParameterfv
glColorTableParameteriv
glConvolutionFilter1D
glConvolutionFilter2D
glConvolutionParameterf
glConvolutionParameterfv
glConvolutionParameteri
glConvolutionParameteriv
glCopyColorSubTable
glCopyColorTable
glCopyConvolutionFilter1D
glCopyConvolutionFilter2D
glCopyTexSubImage3D
glGetColorTableParameterfv
glGetColorTableParameteriv
glGetConvolutionParameterfv
glGetConvolutionParameteriv
glGetHistogramParameterfv
glGetHistogramParameteriv
glGetMinmaxParameterfv
glGetMinmaxParameteriv
glHistogram
glMinmax
glResetHistogram
glResetMinmax
glSeparableFilter2D
glTexImage3D
glTexSubImage3D

Version 1.3
glActiveTexture
glClientActiveTexture
glLoadTransposeMatrixd
glLoadTransposeMatrixf
glMultTransposeMatrixd
glMultTransposeMatrixf
glMultiTexCoord1d
glMultiTexCoord1dv
glMultiTexCoord1f
glMultiTexCoord1fv
glMultiTexCoord1i
glMultiTexCoord1iv
glMultiTexCoord1s
glMultiTexCoord1sv
glMultiTexCoord2d
glMultiTexCoord2dv
glMultiTexCoord2f
glMultiTexCoord2fv
glMultiTexCoord2i
glMultiTexCoord2iv
glMultiTexCoord2s
glMultiTexCoord2sv
glMultiTexCoord3d
glMultiTexCoord3dv
glMultiTexCoord3f
glMultiTexCoord3fv
glMultiTexCoord3i
glMultiTexCoord3iv
glMultiTexCoord3s
glMultiTexCoord3sv
glMultiTexCoord4d
glMultiTexCoord4dv
glMultiTexCoord4f
glMultiTexCoord4fv
glMultiTexCoord4i
glMultiTexCoord4iv
glMultiTexCoord4s
glMultiTexCoord4sv
glSampleCoverage
gluBuild3DMipmaps
gluBuild3DMipmapLevels
gluUnProject4

------------------------------  gl-unsafe:  --------------------------
Version 1.1
glEdgeFlagPointer
glTexCoordPointer
glColorPointer
glIndexPointer
glNormalPointer
glVertexPointer
glArrayElement
glDrawArrays
glDrawElements
glInterleavedArrays
glGetBooleanv
glGetDoublev
glGetFloatv
glGetIntegerv
glGetMapdv
glGetMapfv
glGetMapiv
glGetPixelMapfv
glGetPixelMapuiv
glGetPixelMapusv
glGetPointerv
glGetTexEnvfv
glGetTexEnviv
glGetTexGenfv
glGetTexGeniv
glGetTexImage
glGetTexLevelParameterfv
glGetTexLevelParameteriv
glGetTexParameterfv
glGetTexParameteriv

Version 1.2  
glDrawRangeElements
glGetColorTable
glGetConvolutionFilter
glGetHistogram
glGetMinmax
glGetSeparableFilter
  
Version 1.3
glCompressedTexImage1D
glCompressedTexImage2D
glCompressedTexImage3D
glCompressedTexSubImage1D
glCompressedTexSubImage2D
glCompressedTexSubImage3D
glGetCompressedTexImage
 


     >>>>>> THIS IS UNSUPPORTED SOFTWARE <<<<<<<

_texpict_ is a MzScheme/MrEd utility for creating pictures using a
MrEd dc<%> (including post-script-dc% for _PostScript_ output) or
_LaTeX_ as the back-end. The library was originally designed for LaTeX
output, hence the name.

Pictures are created as `pict' structures. Some procedures in the
texpict library create new simple picts (e.g., `hline'). Others build
new picts out of existing picts (e.g., `ht-append'). In the latter
case, the embedded picts retain their identity, so that offset-finding
functions (e.g., `find-lt') can find the offset of an embedded pict in
a larger pict.

A pict has the following structure:
                w
        ------------------
       |                  | a  \
       |------------------|    |
       |                  |    | h
       |------------------|    |
       |                  | d  /
        ------------------     
For a single text line, d is descent below the baseline and
a + d = h. For multiple text lines (created with vX-append), a is 
ascent of top line above baseline and d is descent of bottom line,
so a + d < h. Most other boxes have d = 0 and a = h.

The size information for a pict is computed when the pict is
created. This strategy supports programs that create new picts though
arbitrarily complex computations on the size and shape of existing
picts. However, it also means that a pict cannot be generated before
its target device is known.

A slightly different set of picture-making function are available for
MrEd and LaTeX output. For example, the LaTeX set includes `tex',
which accepts a string of arbitrary LaTeX code, and the MrEd set
includes `dc', which accepts an arbitrary Scheme procedure for drawing
to a dc<%>.

When creating pictures with `picture' or `cons-picture', or when
finding relative picture locations with `find-lt', etc., the coordiate
system is upside-down: (0, 0) is in the lower left.

MrEd (or PostScript) output
---------------------------

The MrEd texpict function set is loaded by the _mrpict.ss_ library.
The library is available in unit form via _mrpictr.ss_, which produces
a unit importing mred^. The _mrpicts.ss_ library file defines the
unit's signature.

When creating a picture for a MrEd dc<%> that contains text, texpict
needs a drawing context for measuring the text. Provide a dc<%> before
constructing pictures via the `dc-for-text-size' parameter. The dc<%>
should have the same text-measuring results as the destination dc<%>;
in particular, use a post-script-dc% for preparing PostScript output,
and a bitmap-dc% will work fine for bitmap-dc% or canvas% output.

The `draw-pict' function takes a picture, a device context

 ;; Example of prodcuing PostScript output
 (require-library "mrpict.ss" "texpict")

 ;; Create PS context
 (define ps-dc (make-object post-script-dc%))
 (send ps-dc start-doc "Pict output")
 (send ps-dc start-page)

 ;; Install context for sizing
 (dc-for-text-size ps-dc)

 ;; Create the pict
 (define p ...)

 ;; Output pict
 (draw-pict p ps-dc 0 0)
 (send ps-dc end-page)
 (send ps-dc end-doc))

If the output dc<%> has a "user scale", it is not reflected in the
size information reported for pictures. This is consistent with MrEd's
usual policy for reporting size information.

LaTeX output
------------

The LaTeX texpict function set is loaded by the _texpict.ss_ library.
The library is available in unit form via _texpictr.ss_, which
produces a unit with no imports. The _texpicts.ss_ library file
defines the unit's signature.

To create a LaTeX picture, assemble a pict and then
call `pict->string'. This string can be `display'ed to obtain the
LaTeX code, which is usually of the form:
   \begin{picture} ... \end{picture}
When using colors, the output may be of the form:
   \special{color push ...} ... \special{color pop ...}
so consider putting the output in an \hbox{} when using color.

The `tex' function creates a pict given an arbitrary LaTeX
expression as a string. Initially, `tex' guess at the size of the
resulting pict. (It always guesses 10 x 10.) The LaTeX expression
generated for a `tex' pict causes information to be written to an
auxilliary file when LaTeX evaluates the expression. If you use
`tex' boxes, then:

   * Use the package "mztp.sty" at the start of your LaTeX
     document "X.tex".
   * In the MzScheme code creating `tex' picts, call
     (read-in-sizes "X.mztp") before calling `tex'.
   * Run the texpict-LaTeX cycle twice to get properly
     draw pictures.

texpict keys `tex' size information on the exact LaTeX expression
provided to `tex'. If you use a single `tex' pict in two different
contexts where the provided expression produces differently sized
output, texpict will not distinguish the uses (and the size of the
first instance of the pict will be used) by default. The
`serialize-tex-picts' parameter can solve this problem, but
serialization requires that the output is built in exactly the same
order every time, and generally requires more texpict-tex cycles to
reach a fixed point after a small change to the output. The
`tex-series-prefix' parameter may be used to explicitly tag `tex'
sequences in different contexts.

For LaTeX output, all positions and sizes must be specified as exact
integers, but texpict does not check that exact integers are supplied.

------------------------------------------------------------
Structures
------------------------------------------------------------

A pict is an instance of the `pict' structure type:

> struct:pict :: (struct pict (draw width height ascent descent children))

The `children' field is a list of `child' structures:

> struct:child :: (struct child (pict dx dy))

------------------------------------------------------------
Procedures
------------------------------------------------------------

   ;; -- MrEd only --
   ;; Parameter specifying the dc<%> to use for measuring text.
   ;; Default: #f
>  dc-for-text-size

   ;; -- LaTeX only --
   ;; Load `tex' pict size information generated by a LaTeX run.
>  read-in-sizes  ; string -> void

   ;; -- LaTeX only --
   ;; Parameter specifying whether to produce LaTeX commands to
   ;; produce size information for a future run.
   ;; Default: #t
>  output-measure-commands

   ;; -- LaTeX only --
   ;; Parameter specifying whether the `pict2e' package is active.
   ;; Default: #f
>  using-pict2e-package

   ;; -- LaTeX only --
   ;; Parameter specifying whether to draw precise lines for `connect'
   ;; with bezier curves. The value is a Boolean or a procedure that
   ;; takes a length and returns the number of points to use.
   ;; Default: #f
>  draw-bezier-lines

   ;; -- LaTeX only --
   ;; Parameter to use the old implementation of `connect'.
   ;; Default: #f
>  use-old-connect

   ;; -- LaTeX only --
   ;; Parameter specifying a string to embed in the sizing key for a
   ;; pict created with `tex'. The prefix is applied when the `tex'
   ;; pict is created. Turning on the `serialize-tex-picts' parameter
   ;; effectively generates a new series prefix for every `tex' pict.
   ;; Default: #f
>  tex-series-prefix
   
   ;; -- LaTeX only --
   ;; Parameter specifying whether to assign serial numbers to
   ;; `tex'-generated strings for sizing purposes. Serial numbers
   ;; allow the same tex string to be used in multiple contexts, but
   ;; the output must be built in the same order every time.
   ;; Default: #f
>  serialize-tex-picts

   ;; Parameter specifying whether to draw in B&W or color (when
   ;; `colorize' is used).
   ;; Default: #f
>  black-and-white

   ;; Find an embedded picture; see bottom for the definition of pict-path
>  find-lt  ; (left & top)  ; pict pict-path -> dx dy
>  find-lc  ; (left & vertical center)
>  find-lb  ; (left & bottom)
>  find-ltl ; (left and top baseline)
>  find-lbl ; (left and bottom baseline)
>  find-ct  ; (horizontal center & top)
>  find-cc
>  find-cb
>  find-ctl
>  find-cbl
>  find-rt
>  find-rc
>  find-rb
>  find-rtl
>  find-rbl

   ;; Create a new pict that hides the given pict from find-XX
>  launder  ; pict -> pict

   ;; Create an empty pict
>  blank        ; -> pict
                ; s -> pict ; s is side length of square
                ; w h -> pict
                ; w h d -> pict

   ;; -- LaTeX only --
   ;; Create picts from LaTeX code
>  tex               ; string -> pict
>  text-line         ; string -> pict
>  text-line/phantom ; string string -> pict
>  tex-paragraph     ; w string ['top|'bottom] -> pict

   ;; -- MrEd only --
   ;; Create a pict from a string, style, and size.
   ;;  A style is one of
   ;;    null (the default, same a 'default),
   ;;    a font% object,
   ;;    a font family symbol (e.g., 'roman),
   ;;    a font face string (e.g., "-adobe-symbol"),
   ;;    `(bold . ,style),
   ;;    `(italic . ,style), 
   ;;    `(subscript . ,style), or
   ;;    `(supersript . ,style).
   ;;  A size is an exact number in [1, 255]; the
   ;;   default size is 12, but the size is ignored if
   ;;   a font% object is provided in the style.
>  text      ; string [style [size]] -> pict
   ;; Same, but use small caps:
>  caps-text ; string [style [size]] -> pict

   ;; -- MrEd only --
   ;; Create an arbitrary self-rendering pict.  The arguments to the
   ;; rendering procedure will be a device context and top-left
   ;; location for drawing.
   ;;
   ;; When the rendering procedure is called, the current pen and
   ;; brush will be solid and in the pict's color (and linewidth), and
   ;; the scale and offset of the dc will be set. The text mode will
   ;; be transparent, but the font and colors are not guaranteed to be
   ;; anything in particular.
>  dc      ; (dc<%> dx dy -> void) w h a d -> pict

   ;; -- LaTeX only --
   ;; Delimitters to go around height h (result is taller than h;
   ;;  try h/2)
>  left-brace     ; h -> pict
>  right-brace    ; h -> pict
>  left-delimit   ; str h -> pict
>  right-delimit  ; str h -> pict
>  middle-delimit ; str h -> pict
   ;; Delimitter to go around width w (result is w wide)
>  top-brace      ; w -> pict
>  bottom-brace   ; w -> pict

   ;; Truncates picture, removing descent part
>  clip-descent   ; pict -> pict

   ;; Lifts picture relative to its baseline, extending
   ;;  the height if necessary
>  lift           ; pict n -> pict

   ;; Drops picture below its ascent line, extending
   ;;  the height if necessary
>  drop           ; pict n -> pict

   ;; Extends picture size, setting ascent and descent to 0
>  inset          ; pict i -> pict
                  ; pict hi vi -> pict
                  ; pict l t r b -> pict

>  hline        ; w h -> pict
>  dash-hline   ; w h seg-length -> pict ; default seg-length is 5
>  vline        ; w h -> pict
>  dash-vline   ; w h seg-length -> pict ; default seg-length is 5
   ;; To draw other kinds of lines, use `picture' or `cons-picture'

>  frame        ; pict -> pict
>  dash-frame   ; pict seg-length -> pict ; default seg-length is 5
>  oval         ; pict -> pict
>  oval/radius  ; pict r -> pict ; r is radius of corners

   ;; Creates a fairly round circle using four splines:
>  big-circle   ; diameter -> pict

   ;; Set the line thickness for a picture. For MrEd output,
   ;; selects between a pen width of 0 or 1.
>  thick       ; pict -> pict
>  thin        ; pict -> pict

   ;; -- MrEd only --
   ;; Set a specific pen width for drawing.
>  linewidth   ; w pict -> pict

   ;; Make a container picture that doesn't draw the child picture,
   ;; but uses the child's size
>  ghost        ; pict -> pict

   ;; Make a UML-like record picture, where the
   ;; first argument is the title and the rest are fields.
>  record       ; pict pict ... -> pict

   ;; Make a new picture as a column (vX-append) or row (hX-append)
   ;; of other pictures. Different procedures align pictures in the
   ;; orthogonal direction in different ways; e.g, vl-append left-aligns
   ;; all of the pitures. A specified amount of space is inserted
   ;; between each pair of pictures in making the column or row.
>  vl-append    ; [d] pict ... -> pict ; d units between each picture
>  vc-append                           ;  default=0
>  vr-append
>  ht-append
>  hc-append
>  hb-append
>  htl-append       ; align bottoms of ascents
>  hbl-append       ; align tops of descents (normal text alignment)

   ;; Make a new picture by superimposing a set of pictures. The
   ;; alignment indicators are essentially as above: horizontal
   ;; alignment then vertical alignment.
>  lt-superimpose ; pict ... -> pict
>  lb-superimpose
>  lc-superimpose
>  ltl-superimpose
>  lbl-superimpose
>  rt-superimpose
>  rb-superimpose
>  rc-superimpose
>  rtl-superimpose
>  rbl-superimpose
>  ct-superimpose
>  cb-superimpose
>  cc-superimpose
>  ctl-superimpose
>  cbl-superimpose

   ;; Make a table given a list of picts. The list is a
   ;; concatentation of rows (which means that a Scheme `list' call
   ;; can be formatted to reflect the shape of the output table).
   ;;
   ;; The col-aligns, row-aligns, col-seps, and row-seps arguments are
   ;; `lists' specifying the row and columns alignments separation
   ;; between rows and columns.  For C columns and R rows, the first
   ;; two should have C and R superimpose procedures, and the last two
   ;; should have C - 1 and R - 1 numbers, respectively. The lists can
   ;; be improper (e.g. just a number), in which case the non-pair cdr
   ;; is used as the value for all remaining list items that were
   ;; expected. The alignment procedures are used to superimpose all
   ;; of the cells in a column or row; this superimposition determines
   ;; the total width oir height of the column or row, and also
   ;; determines the horizontal or vertical placement of each cell in
   ;; the column or row.
>  table ; ncols pict-list col-aligns row-aligns col-seps row-seps -> pict

   ;; Apply a color to a picture. If the given picture has a colorized
   ;; sub-picture, the color of the sub-picture is not affected.
   ;; Be sure to use the LaTeX package `colordvi'.
>  colorize ; pict color-string -> pict

   ;; -- MrEd only --
   ;; same as above, except uses the color% object instead of a string
   ;; to indicate the color of the pict.
>  colorize ; pict color% -> pict

   ;; Describe a picture with low-level commands; see below.
>  picture      ; w h command-list -> pict

   ;; Create a new picture by `cons'ing drawing commands onto
   ;; an existing picture.
>  cons-picture ; pict command-list -> pict

   ;; -- LaTeX only --
   ;; Generate the LaTeX code for a pict.
>  pict->string ; pict -> string

   ;; -- MrEd only --
   ;; Draw a pict to a dc<%>
>  draw-pict ; pict dc x y -> void

   ;; -- MrEd only --
   ;; Generate a pict-drawer procedure for multiple renderings of a
   ;; pict (much faster than repeated calls to draw-pict)
>  make-pict-drawer ; pict -> (dc x y -> void)

------------------------------------------------------------
Picture Paths, Command, Putables, and Drawables
------------------------------------------------------------

pict-path:

   pict
   non-empty-pict-path-list

commands:

   ;; These commands use LaTeX-style coordinates: bottom-left
   ;; is (0, 0).

   `(place ,x ,y ,pict)
   `(put ,x ,y ,putable)
   
   ;; The varieties of `connect' commands are for LaTeX, where
   ;; lines are constrained to a small set of allowed angles.
   ;; For MrEd, all of the commands below act the same, and produce
   ;; liens with precisely the requested angle.

   `(connect ,x1 ,y1 ,x2 ,y2 ,bool)         ; line or vector; bool => vector;
                                            ;   from (x1,y1) to (~x2,~y2)
                                            ;   as close as possible
                                            ;   (synonym for connect~xy with 
                                            ;   an infinite tolerance when
                                            ;   draw-bezier-lines is #f, or
                                            ;   for curve when draw-bezier-lines
                                            ;   is #t)
   `(dconnect ,x ,y ,dx ,dy ,bool)          ; line or vector; bool => vector;
                                            ;   from (x,y) to (~(x+dx),~(y+dy))
                                            ;   as close as possible (uses
                                            ;   connect)
   `(connect~y ,tol ,x1 ,y2 ,x2 ,y2 ,bool)  ; sequence of lines from
                                            ;  (~x1,~y1) to (~x2,~y2) where
                                            ;  either: 
                                            ;    1) ~x2=x2 and |~y2-y2|<tol
                                            ;    2) ~y2=y2 and |~x2-x2|<tol and 
                                            ;       the final line is vertical
   `(connect~x ,tol ,x1 ,y2 ,x2 ,y2 ,bool)  ; like connect~y, but either:
                                            ;    1) ~x2=x2 and |~y2-y2|<tol
                                            ;       the final line is horizontal
                                            ;    2) ~y2=y2 and |~x2-x2|<tol
   `(connect~xy ,tol ,x1 ,y2 ,x2 ,y2 ,bool) ; like connect~y, but either:
                                            ;    1) ~x2=x2 and |~y2-y2|<tol
                                            ;       the final line is horizontal
                                            ;    2) ~y2=y2 and |~x2-x2|<tol
                                            ;       the final line is vertical
                                            ;    3) |(x2,y2)-(~x2,~y2)|<tol
   `(curve ,x1 ,y1 ,x2 ,y2 ,xc ,yc ,d)      ; bezier curve; d is optional density
                                            ;  for LaTeX; the default d is 1.0

  [Notes: curve can generate more precise lines than connect~, but it usually 
          requires more LaTeX memory.]

putables:

   draw
   `(line ,dh ,dv ,hlen)       ; LaTeX-style line - slope and size is limited
   `(vector ,dh ,dv ,hlen)     ; LaTeX-style vector - slope and size is limited
   `(circle ,d)                ; LaTeX-style circle - size is limited
   `(circle* ,d)
   `(frame ,draw)
   `(colorbox ,color-str ,draw)
   `(oval ,str ,w ,h)  ; str is portion a la LaTeX: e.g., "" or "[bl]";
                       ;  the oval is centered at the put position, instead of
                       ;  bl-aligned
   ; plus some more undocumented ones...

draws:

   string ; latex string
   `(picture ,w ,h ,@command-list)
   `(color ,color-string ,draw)
   `(thickness ,thickness ,draw) ; thickness is thicklines or thinlines

------------------------------------------------------------
Additional MrEd Utilities
------------------------------------------------------------

The _utils.ss_ library provides additional drawing procedures for MrEd
(not LaTeX) output. [It is not currently provided in unit form, though
it should be.]

  ;; Like `cons-picture', but the newly consed commands get a
  ;; color
> cons-colorized-picture  ; pict color-string command-list -> pict

  ;; Like `frame' and `dash-frame', but the frame gets a color and
  ;; optional line width
> color-frame             ; pict color-string -> pict
                          ; pict color-string line-w -> pict
> color-dash-frame        ; pict seg-length color-string -> pict
                          ; pict seg-length color-string line-w -> pict

  ;; Rounded frames
> round-frame             ; pict -> pict
> color-round-frame       ; pict color-string -> pict
                          ; pict color-string line-w -> pict

  ;; Unfilled and filled circles; works for all sizes.
> circle                  ; diameter -> pict
> disk                    ; diameter -> pict

  ;; Creates an arrow or arrowhead in the specific direction
> arrow                   ; size radians -> pict
> arrowhead               ; size radians -> pict

  ;; Creates a line with arrowhead(s) as a 0-sized picture (suitable
  ;; for use with `put'). The 0-sized picture contains the starting
  ;; point.
> arrow-line              ; dx dy size -> pict
> arrows-line             ; dx dy size -> pict
	   
  ;; Conses a line or line-with-arrows onto a pict, using
  ;; one of the sub-pict-finding functions (e.g., `find-tc')
  ;; to extract the source and destination of the line.
> add-line                ; pict src-pict (pict -> x y)
                          ;      dest-pict (pict -> x y)
                          ;      [line-w [color-string]] -> pict
> add-arrow-line          ; arrow-size pict src-pict (pict -> x y)
                          ;      dest-pict (pict -> x y)
                          ;      [line-w [color-string]] -> pict
> add-arrows-line         ; arrow-size pict src-pict (pict -> x y)
                          ;      dest-pict (pict -> x y)
                          ;      [line-w [color-string]] -> pict

  ;; Fluffy cloud; default color is "gray".
> cloud                   ; w h -> pict
                          ; w h color-string -> pict

  ;; Creates a MacOS-like file icon, optionally shaded
> file-icon               ; w h gray? ->pict

  ;; Loads a bitmap into a pict
> bitmap                  ; filename -> pict

  ;; Scales a pict (by adjusting the destination dc<%>'s
  ;; scale while drawing the pict.
> scale                   ; pict factor -> pict
> scale                   ; pict x-factor y-factor -> pict

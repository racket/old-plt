/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_cnvs.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_canvs.h"
#include "wx_panel.h"
#include "wx_frame.h"





#include "wxscheme.h"
#include "wxs_cnvs.h"
#include "wxscomon.h"


#ifdef wx_xt
# include "wx_types.h"
# define CHECK_FOR_PANEL(x) !wxSubType((x)->__type, wxTYPE_CANVAS)
#else
# define CHECK_FOR_PANEL(x) 0
#endif

static void FillZero(int *a, int *b) {
  *a = *b = 0;
}

/* Handle cases in Xt that are a problem because a wxPanel isn't really a wxCanvas */


// @CREATOR ();

// @ "enable-scrolling" : void EnableScrolling(bool,bool);








// Override wx-window:
// @ "set-size" : void SetSize(int,int,int,int); : : /NOZERO[2]|NOZERO[3]
// @ "set-client-size" : void SetClientSize(int,int); : : /NOZERO[0]|NOZERO[1]
// @ "get-size" : void GetSize(int*,int*);
// @ "get-client-size" : void GetClientSize(int*,int*);
// @ "get-position" : void GetPosition(int*,int*);


// @ "is-retained?" : bool IsRetained(); : : / PANELREDIRECT[return scheme_false]







#define DrawsForCanvas

#undef DO_OK_CHECK
#ifdef DrawsForCanvas
#define DO_OK_CHECK(v)
#else
#define DO_OK_CHECK(v) if (!((wxDC *)((Scheme_Class_Object *)obj)->primdata)->Ok()) return v;
#endif



extern Scheme_Object *objscheme_bundle_wxPoint(wxPoint *);
extern wxPoint *objscheme_unbundle_wxPoint(Scheme_Object *, const char *, int);
extern Scheme_Object *objscheme_bundle_wxIntPoint(wxIntPoint *);
extern wxIntPoint *objscheme_unbundle_wxIntPoint(Scheme_Object *, const char *, int);

#undef l_ADDRESS
#undef l_DEREF
#undef l_TEST
#undef l_POINT
#undef l_TYPE
#undef l_LIST_ITEM_BUNDLE
#undef l_LIST_ITEM_UNBUNDLE
#undef l_MAKE_LIST
#undef l_MAKE_ARRAY
#undef l_EXTRA
#undef l_TERMINATE
#undef l_COPY
#undef l_OKTEST
#undef l_INTTYPE

#define l_ADDRESS &
#define l_DEREF *
#define l_NULLOK 0
#define l_TEST , l_NULLOK
#define l_POINT 
#define l_EXTRA 0
#define l_TERMINATE 
#define l_COPY l_COPYDEST.x=l_COPYSRC.x; l_COPYDEST.y=l_COPYSRC.y;
#define l_OKTEST 
#define l_INTTYPE int

#define l_TYPE wxPoint
#define l_LIST_ITEM_BUNDLE objscheme_bundle_wxPoint
#define l_LIST_ITEM_UNBUNDLE objscheme_unbundle_wxPoint
#define l_MAKE_LIST __MakewxPointList
#define l_MAKE_ARRAY __MakewxPointArray





static Scheme_Object *l_MAKE_LIST(l_TYPE l_POINT *f, l_INTTYPE c)
{
  Scheme_Object *cdr = scheme_null, *obj;

  while (c--) {
    obj = l_LIST_ITEM_BUNDLE(l_ADDRESS f[c]);
    cdr = scheme_make_pair(obj, cdr);
  }
  
  return cdr;
}

static l_TYPE l_POINT *l_MAKE_ARRAY(Scheme_Object *l, l_INTTYPE *c, char *who)
{
  int i = 0;
  long len;

  len = scheme_proper_list_length(l);
  if (len < 0) scheme_wrong_type(who, "proper-list", -1, 0, &l);
  if (c) *c = len;

  if (!(len + l_EXTRA))
    return NULL;

  l_TYPE l_POINT *f = new l_TYPE l_POINT[len + l_EXTRA];

  while (!SCHEME_NULLP(l)) {
    if (!SCHEME_LISTP(l))
     scheme_signal_error("%s: expected a proper list", who);

#define l_COPYDEST f[i]
#define l_COPYSRC (l_DEREF l_LIST_ITEM_UNBUNDLE(SCHEME_CAR(l), who l_TEST))

    l_COPY

    l_OKTEST

    i++;

    l = SCHEME_CDR(l);
  }
  l_TERMINATE

  return f;
}


#undef l_ADDRESS
#undef l_DEREF
#undef l_TEST
#undef l_POINT
#undef l_TYPE
#undef l_LIST_ITEM_BUNDLE
#undef l_LIST_ITEM_UNBUNDLE
#undef l_MAKE_LIST
#undef l_MAKE_ARRAY
#undef l_EXTRA
#undef l_TERMINATE
#undef l_COPY
#undef l_OKTEST
#undef l_INTTYPE

#define l_ADDRESS &
#define l_DEREF *
#define l_NULLOK 0
#define l_TEST , l_NULLOK
#define l_POINT 
#define l_EXTRA 0
#define l_TERMINATE 
#define l_COPY l_COPYDEST.x=l_COPYSRC.x; l_COPYDEST.y=l_COPYSRC.y;
#define l_OKTEST 
#define l_INTTYPE int

#define l_TYPE wxIntPoint
#define l_LIST_ITEM_BUNDLE objscheme_bundle_wxIntPoint
#define l_LIST_ITEM_UNBUNDLE objscheme_unbundle_wxIntPoint
#define l_MAKE_LIST __MakewxIntPointList
#define l_MAKE_ARRAY __MakewxIntPointArray





static Scheme_Object *l_MAKE_LIST(l_TYPE l_POINT *f, l_INTTYPE c)
{
  Scheme_Object *cdr = scheme_null, *obj;

  while (c--) {
    obj = l_LIST_ITEM_BUNDLE(l_ADDRESS f[c]);
    cdr = scheme_make_pair(obj, cdr);
  }
  
  return cdr;
}

static l_TYPE l_POINT *l_MAKE_ARRAY(Scheme_Object *l, l_INTTYPE *c, char *who)
{
  int i = 0;
  long len;

  len = scheme_proper_list_length(l);
  if (len < 0) scheme_wrong_type(who, "proper-list", -1, 0, &l);
  if (c) *c = len;

  if (!(len + l_EXTRA))
    return NULL;

  l_TYPE l_POINT *f = new l_TYPE l_POINT[len + l_EXTRA];

  while (!SCHEME_NULLP(l)) {
    if (!SCHEME_LISTP(l))
     scheme_signal_error("%s: expected a proper list", who);

#define l_COPYDEST f[i]
#define l_COPYSRC (l_DEREF l_LIST_ITEM_UNBUNDLE(SCHEME_CAR(l), who l_TEST))

    l_COPY

    l_OKTEST

    i++;

    l = SCHEME_CDR(l);
  }
  l_TERMINATE

  return f;
}


/* The methods are here: */




// @ Q "int-draw-line" : void IntDrawLine(int,int,int,int); : : /CheckOk
// @ q "draw-spline" : void DrawSpline(wxList!); : : /CheckOk



// Undefined?
//@ "int-draw-lines" : void IntDrawLines(-int,wxIntPoint!/bList/ubList/cList,float=0,float=0); : / methListSet[wxIntPoint.0.1.0]// : /CheckOk|glueListSet[wxIntPoint.0.1.0]//



// @CONSTANT "wx:const-retained" : long wxRETAINED
// @CONSTANT "wx:const-backingstore" : long wxBACKINGSTORE

class os_wxCanvas : public wxCanvas {
 public:

  os_wxCanvas(Scheme_Object * obj, class wxFrame* x0, int x1 = -1, int x2 = -1, int x3 = -1, int x4 = -1, long x5 = 0, string x6 = "canvas");
  os_wxCanvas(Scheme_Object * obj, class wxPanel* x0, int x1 = -1, int x2 = -1, int x3 = -1, int x4 = -1, long x5 = 0, string x6 = "canvas");
  ~os_wxCanvas();
  Bool PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1);
  Bool PreOnChar(class wxWindow* x0, class wxKeyEvent* x1);
  void OnSize(int x0, int x1);
  void OnSetFocus();
  void OnKillFocus();
  void OnScroll(class wxCommandEvent& x0);
  void OnChar(class wxKeyEvent& x0);
  void OnEvent(class wxMouseEvent& x0);
  void OnPaint();
};

Scheme_Object *os_wxCanvas_class;

os_wxCanvas::os_wxCanvas(Scheme_Object * o, class wxFrame* x0, int x1, int x2, int x3, int x4, long x5, string x6)
: wxCanvas(x0, x1, x2, x3, x4, x5, x6)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxCanvas::os_wxCanvas(Scheme_Object * o, class wxPanel* x0, int x1, int x2, int x3, int x4, long x5, string x6)
: wxCanvas(x0, x1, x2, x3, x4, x5, x6)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxCanvas::~os_wxCanvas()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

Bool os_wxCanvas::PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "pre-on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxMouseEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:canvas%::pre-on-event"", extracting return value");
  }
}

Bool os_wxCanvas::PreOnChar(class wxWindow* x0, class wxKeyEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "pre-on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxKeyEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:canvas%::pre-on-char"", extracting return value");
  }
}

void os_wxCanvas::OnSize(int x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "on-size", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxCanvas::OnSize(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxCanvas::OnSetFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "on-set-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxCanvas::OnSetFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxCanvas::OnKillFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "on-kill-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxCanvas::OnKillFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxCanvas::OnScroll(class wxCommandEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "on-scroll", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxCanvas::OnScroll(x0);
  } else {
  
  p[0] = objscheme_bundle_wxCommandEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxCanvas::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxCanvas::OnChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxCanvas::OnEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxCanvas::OnEvent(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxCanvas::OnPaint()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxCanvas_class, "on-paint", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxCanvas::OnPaint();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetTextForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "wx:canvas%::set-text-foreground", 0);

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetTextForeground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetTextBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "wx:canvas%::set-text-background", 0);

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetTextBackground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetPen(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxPen* x0;

  
  x0 = objscheme_unbundle_wxPen(p[0], "wx:canvas%::set-pen", 0);

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetPen(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetLogicalFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:canvas%::set-logical-function");

  switch (x0) { case wxAND: case wxAND_INVERT: case wxAND_REVERSE: case wxCLEAR: case wxCOPY: case wxEQUIV: case wxINVERT: case wxNAND: case wxNOR: case wxNO_OP: case wxOR: case wxOR_INVERT: case wxOR_REVERSE: case wxSET: case wxSRC_INVERT: case wxXOR: break; case wxCOLOR: if (x0 == wxCOPY) break; default: scheme_wrong_type("wx:dc::set-logical-function", "logicalfunction integer", 0, n, p); }DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetLogicalFunction(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxFont* x0;

  
  x0 = objscheme_unbundle_wxFont(p[0], "wx:canvas%::set-font", 0);

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetFont(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetBrush(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBrush* x0;

  
  x0 = objscheme_unbundle_wxBrush(p[0], "wx:canvas%::set-brush", 0);

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetBrush(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBrush* x0;

  
  x0 = objscheme_unbundle_wxBrush(p[0], "wx:canvas%::set-background", 0);

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetBackground(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasGetClippingRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  float _x3;
  float* x3 = &_x3;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:canvas%::get-clipping-region", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:canvas%::get-clipping-region"), "wx:canvas%::get-clipping-region");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:canvas%::get-clipping-region", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:canvas%::get-clipping-region"), "wx:canvas%::get-clipping-region");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:canvas%::get-clipping-region", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:canvas%::get-clipping-region"), "wx:canvas%::get-clipping-region");
  if (SCHEME_NULLP(p[3]))
    scheme_wrong_type("wx:canvas%::get-clipping-region", "non-null", (3 - 0), n, p);
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:canvas%::get-clipping-region"), "wx:canvas%::get-clipping-region");

  
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetClippingRegion(x0, x1, x2, x3);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_double(_x2));
  if (n > 3)
    objscheme_set_box(p[3], scheme_make_double(_x3));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetClippingRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas%::set-clipping-region");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::set-clipping-region");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "wx:canvas%::set-clipping-region");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "wx:canvas%::set-clipping-region");

  DO_OK_CHECK(scheme_void)if (x2 < 0) x2 = 0;if (x3 < 0) x3 = 0;
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetClippingRegion(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDestroyClippingRegion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DestroyClippingRegion();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawPolygon(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  class wxPoint* x1;
  float x2;
  float x3;
  int x4;

  
  x1 = NULL;
  if (n > 1) {
    x2 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-polygon");
  } else
    x2 = 0;
  if (n > 2) {
    x3 = objscheme_unbundle_float(p[2], "wx:canvas%::draw-polygon");
  } else
    x3 = 0;
  if (n > 3) {
    x4 = objscheme_unbundle_integer(p[3], "wx:canvas%::draw-polygon");
  } else
    x4 = wxODDEVEN_RULE;

  DO_OK_CHECK(scheme_void)x1 = __MakewxPointArray((0 < n) ? p[0] : scheme_null, &x0, "wx:dc%::draw-polygon");
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawPolygon(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawLines(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  class wxPoint* x1;
  float x2;
  float x3;

  
  x1 = NULL;
  if (n > 1) {
    x2 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-lines");
  } else
    x2 = 0;
  if (n > 2) {
    x3 = objscheme_unbundle_float(p[2], "wx:canvas%::draw-lines");
  } else
    x3 = 0;

  DO_OK_CHECK(scheme_void)x1 = __MakewxPointArray((0 < n) ? p[0] : scheme_null, &x0, "wx:dc%::draw-lines");
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawLines(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawEllipse(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas%::draw-ellipse");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-ellipse");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "wx:canvas%::draw-ellipse");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "wx:canvas%::draw-ellipse");

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawEllipse(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawArc(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas%::draw-arc");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-arc");
  x2 = objscheme_unbundle_float(p[2], "wx:canvas%::draw-arc");
  x3 = objscheme_unbundle_float(p[3], "wx:canvas%::draw-arc");
  x4 = objscheme_unbundle_float(p[4], "wx:canvas%::draw-arc");
  x5 = objscheme_unbundle_float(p[5], "wx:canvas%::draw-arc");

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawArc(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  float x1;
  float x2;
  Bool x3;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:canvas%::draw-text");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-text");
  x2 = objscheme_unbundle_float(p[2], "wx:canvas%::draw-text");
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:canvas%::draw-text");
  } else
    x3 = FALSE;

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawText(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawSpline(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas%::draw-spline");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-spline");
  x2 = objscheme_unbundle_float(p[2], "wx:canvas%::draw-spline");
  x3 = objscheme_unbundle_float(p[3], "wx:canvas%::draw-spline");
  x4 = objscheme_unbundle_float(p[4], "wx:canvas%::draw-spline");
  x5 = objscheme_unbundle_float(p[5], "wx:canvas%::draw-spline");

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawSpline(x0, x1, x2, x3, x4, x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawRoundedRectangle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;
  float x4;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas%::draw-rounded-rectangle");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-rounded-rectangle");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "wx:canvas%::draw-rounded-rectangle");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "wx:canvas%::draw-rounded-rectangle");
  if (n > 4) {
    x4 = objscheme_unbundle_float(p[4], "wx:canvas%::draw-rounded-rectangle");
  } else
    x4 = 20;

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawRoundedRectangle(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawRectangle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  nnfloat x2;
  nnfloat x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas%::draw-rectangle");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-rectangle");
  x2 = objscheme_unbundle_nonnegative_float(p[2], "wx:canvas%::draw-rectangle");
  x3 = objscheme_unbundle_nonnegative_float(p[3], "wx:canvas%::draw-rectangle");

  if (x2 <= 0) return scheme_void;if (x3 <= 0) return scheme_void;DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawRectangle(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawPoint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas%::draw-point");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-point");

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawPoint(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasDrawLine(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:canvas%::draw-line");
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::draw-line");
  x2 = objscheme_unbundle_float(p[2], "wx:canvas%::draw-line");
  x3 = objscheme_unbundle_float(p[3], "wx:canvas%::draw-line");

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->DrawLine(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasClear(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->Clear();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasEndDrawing(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->EndDrawing();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasBeginDrawing(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  DO_OK_CHECK(scheme_void)
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->BeginDrawing();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasPreOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxMouseEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "wx:canvas%::pre-on-event", 0);
  x1 = objscheme_unbundle_wxMouseEvent(p[1], "wx:canvas%::pre-on-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxCanvas *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnEvent(x0, x1);
  else
    r = ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->PreOnEvent(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxCanvasPreOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxKeyEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "wx:canvas%::pre-on-char", 0);
  x1 = objscheme_unbundle_wxKeyEvent(p[1], "wx:canvas%::pre-on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxCanvas *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnChar(x0, x1);
  else
    r = ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->PreOnChar(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxCanvasOnSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:canvas%::on-size");
  x1 = objscheme_unbundle_integer(p[1], "wx:canvas%::on-size");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxCanvas::OnSize(x0, x1);
  else
    ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnSize(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasOnSetFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxCanvas::OnSetFocus();
  else
    ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnSetFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasOnKillFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxCanvas::OnKillFocus();
  else
    ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnKillFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasOnScroll(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxCommandEvent* x0;

  
  x0 = objscheme_unbundle_wxCommandEvent(p[0], "wx:canvas%::on-scroll", 0);

  if (CHECK_FOR_PANEL((wxObject *)((Scheme_Class_Object *)obj)->primdata)) { return scheme_void; }
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxCanvas::OnScroll(*x0);
  else
    ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnScroll(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasGetScrollPage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:canvas%::get-scroll-page");

  
  r = ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetScrollPage(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxCanvasGetScrollRange(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:canvas%::get-scroll-range");

  
  r = ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetScrollRange(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxCanvasGetScrollPos(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:canvas%::get-scroll-pos");

  
  r = ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetScrollPos(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxCanvasScroll(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:canvas%::scroll");
  x1 = objscheme_unbundle_integer(p[1], "wx:canvas%::scroll");

  
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->Scroll(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasWarpPointer(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:canvas%::warp-pointer");
  x1 = objscheme_unbundle_integer(p[1], "wx:canvas%::warp-pointer");

  if (CHECK_FOR_PANEL((wxObject *)((Scheme_Class_Object *)obj)->primdata)) { return scheme_void; }
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->WarpPointer(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasViewStart(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int _x0;
  int* x0 = &_x0;
  int _x1;
  int* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:canvas%::view-start", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:canvas%::view-start"), "wx:canvas%::view-start");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:canvas%::view-start", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:canvas%::view-start"), "wx:canvas%::view-start");

  if (CHECK_FOR_PANEL((wxObject *)((Scheme_Class_Object *)obj)->primdata)) { FillZero(x0,x1); return scheme_void; }
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->ViewStart(x0, x1);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasSetScrollbars(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;
  int x2;
  int x3;
  int x4;
  int x5;
  int x6;
  int x7;
  Bool x8;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:canvas%::set-scrollbars");
  x1 = objscheme_unbundle_integer(p[1], "wx:canvas%::set-scrollbars");
  x2 = objscheme_unbundle_integer(p[2], "wx:canvas%::set-scrollbars");
  x3 = objscheme_unbundle_integer(p[3], "wx:canvas%::set-scrollbars");
  x4 = objscheme_unbundle_integer(p[4], "wx:canvas%::set-scrollbars");
  x5 = objscheme_unbundle_integer(p[5], "wx:canvas%::set-scrollbars");
  if (n > 6) {
    x6 = objscheme_unbundle_integer(p[6], "wx:canvas%::set-scrollbars");
  } else
    x6 = 0;
  if (n > 7) {
    x7 = objscheme_unbundle_integer(p[7], "wx:canvas%::set-scrollbars");
  } else
    x7 = 0;
  if (n > 8) {
    x8 = objscheme_unbundle_bool(p[8], "wx:canvas%::set-scrollbars");
  } else
    x8 = TRUE;

  if (CHECK_FOR_PANEL((wxObject *)((Scheme_Class_Object *)obj)->primdata)) { return scheme_void; }
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetScrollbars(x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasGetVirtualSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int _x0;
  int* x0 = &_x0;
  int _x1;
  int* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:canvas%::get-virtual-size", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:canvas%::get-virtual-size"), "wx:canvas%::get-virtual-size");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:canvas%::get-virtual-size", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:canvas%::get-virtual-size"), "wx:canvas%::get-virtual-size");

  if (CHECK_FOR_PANEL((wxObject *)((Scheme_Class_Object *)obj)->primdata)) { FillZero(x0,x1); return scheme_void; }
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetVirtualSize(x0, x1);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasGetScrollUnitsPerPage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int _x0;
  int* x0 = &_x0;
  int _x1;
  int* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:canvas%::get-scroll-units", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:canvas%::get-scroll-units"), "wx:canvas%::get-scroll-units");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:canvas%::get-scroll-units", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:canvas%::get-scroll-units"), "wx:canvas%::get-scroll-units");

  if (CHECK_FOR_PANEL((wxObject *)((Scheme_Class_Object *)obj)->primdata)) { FillZero(x0,x1); return scheme_void; }
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetScrollUnitsPerPage(x0, x1);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasGetDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxCanvasDC* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetDC();

  
  
  return objscheme_bundle_wxCanvasDC(r);
}

#pragma argsused
static Scheme_Object *os_wxCanvasPopupMenu(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMenu* x0;
  float x1;
  float x2;

  
  x0 = objscheme_unbundle_wxMenu(p[0], "wx:canvas%::popup-menu", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:canvas%::popup-menu");
  x2 = objscheme_unbundle_float(p[2], "wx:canvas%::popup-menu");

  
  r = ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->PopupMenu(x0, x1, x2);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxCanvasOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:canvas%::on-char", 0);

  
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:canvas%::on-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxCanvas::OnEvent(*x0);
  else
    ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasOnPaint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxCanvas::OnPaint();
  else
    ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnPaint();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvasAllowDoubleClick(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:canvas%::allow-double-click");

  
  ((wxCanvas *)((Scheme_Class_Object *)obj)->primdata)->AllowDoubleClick(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCanvas_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxCanvas *realobj;
  if ((n >= 1) && objscheme_istype_wxPanel(p[0], NULL, 0)) {
    class wxPanel* x0;
    int x1;
    int x2;
    int x3;
    int x4;
    long x5;
    string x6;

    
    if ((n < 1) ||(n > 7)) 
      scheme_wrong_count("wx:canvas%::initialization (panel case)", 1, 7, n, p);
    x0 = objscheme_unbundle_wxPanel(p[0], "wx:canvas%::initialization (panel case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:canvas%::initialization (panel case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:canvas%::initialization (panel case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:canvas%::initialization (panel case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_integer(p[4], "wx:canvas%::initialization (panel case)");
    } else
      x4 = -1;
    if (n > 5) {
      x5 = objscheme_unbundle_integer(p[5], "wx:canvas%::initialization (panel case)");
    } else
      x5 = 0;
    if (n > 6) {
      x6 = (string)objscheme_unbundle_string(p[6], "wx:canvas%::initialization (panel case)");
    } else
      x6 = "canvas";

    if (!x3) x3 = -1;if (!x4) x4 = -1;
    realobj = new os_wxCanvas(obj, x0, x1, x2, x3, x4, x5, x6);
    
    
  } else  {
    class wxFrame* x0;
    int x1;
    int x2;
    int x3;
    int x4;
    long x5;
    string x6;

    
    if ((n < 1) ||(n > 7)) 
      scheme_wrong_count("wx:canvas%::initialization (frame case)", 1, 7, n, p);
    x0 = objscheme_unbundle_wxFrame(p[0], "wx:canvas%::initialization (frame case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:canvas%::initialization (frame case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:canvas%::initialization (frame case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:canvas%::initialization (frame case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_integer(p[4], "wx:canvas%::initialization (frame case)");
    } else
      x4 = -1;
    if (n > 5) {
      x5 = objscheme_unbundle_integer(p[5], "wx:canvas%::initialization (frame case)");
    } else
      x5 = 0;
    if (n > 6) {
      x6 = (string)objscheme_unbundle_string(p[6], "wx:canvas%::initialization (frame case)");
    } else
      x6 = "canvas";

    if (!x3) x3 = -1;if (!x4) x4 = -1;
    realobj = new os_wxCanvas(obj, x0, x1, x2, x3, x4, x5, x6);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxCanvas(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:canvas%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:canvas%");
}

void objscheme_setup_wxCanvas(void *env)
{
if (os_wxCanvas_class) {
    objscheme_add_global_class(os_wxCanvas_class,  "wx:canvas%", env);
} else {
  os_wxCanvas_class = objscheme_def_prim_class(env, "wx:canvas%", "wx:window%", os_wxCanvas_ConstructScheme, 45);

  scheme_add_method_w_arity(os_wxCanvas_class,"get-class-name",objscheme_classname_os_wxCanvas, 0, 0);

 scheme_add_method_w_arity(os_wxCanvas_class, "set-text-foreground", os_wxCanvasSetTextForeground, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "set-text-background", os_wxCanvasSetTextBackground, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "set-pen", os_wxCanvasSetPen, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "set-logical-function", os_wxCanvasSetLogicalFunction, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "set-font", os_wxCanvasSetFont, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "set-brush", os_wxCanvasSetBrush, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "set-background", os_wxCanvasSetBackground, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "get-clipping-region", os_wxCanvasGetClippingRegion, 4, 4);
 scheme_add_method_w_arity(os_wxCanvas_class, "set-clipping-region", os_wxCanvasSetClippingRegion, 4, 4);
 scheme_add_method_w_arity(os_wxCanvas_class, "destroy-clipping-region", os_wxCanvasDestroyClippingRegion, 0, 0);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-polygon", os_wxCanvasDrawPolygon, 1, 4);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-lines", os_wxCanvasDrawLines, 1, 3);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-ellipse", os_wxCanvasDrawEllipse, 4, 4);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-arc", os_wxCanvasDrawArc, 6, 6);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-text", os_wxCanvasDrawText, 3, 4);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-spline", os_wxCanvasDrawSpline, 6, 6);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-rounded-rectangle", os_wxCanvasDrawRoundedRectangle, 4, 5);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-rectangle", os_wxCanvasDrawRectangle, 4, 4);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-point", os_wxCanvasDrawPoint, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "draw-line", os_wxCanvasDrawLine, 4, 4);
 scheme_add_method_w_arity(os_wxCanvas_class, "clear", os_wxCanvasClear, 0, 0);
 scheme_add_method_w_arity(os_wxCanvas_class, "end-drawing", os_wxCanvasEndDrawing, 0, 0);
 scheme_add_method_w_arity(os_wxCanvas_class, "begin-drawing", os_wxCanvasBeginDrawing, 0, 0);
 scheme_add_method_w_arity(os_wxCanvas_class, "pre-on-event", os_wxCanvasPreOnEvent, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "pre-on-char", os_wxCanvasPreOnChar, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "on-size", os_wxCanvasOnSize, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "on-set-focus", os_wxCanvasOnSetFocus, 0, 0);
 scheme_add_method_w_arity(os_wxCanvas_class, "on-kill-focus", os_wxCanvasOnKillFocus, 0, 0);
 scheme_add_method_w_arity(os_wxCanvas_class, "on-scroll", os_wxCanvasOnScroll, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "get-scroll-page", os_wxCanvasGetScrollPage, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "get-scroll-range", os_wxCanvasGetScrollRange, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "get-scroll-pos", os_wxCanvasGetScrollPos, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "scroll", os_wxCanvasScroll, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "warp-pointer", os_wxCanvasWarpPointer, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "view-start", os_wxCanvasViewStart, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "set-scrollbars", os_wxCanvasSetScrollbars, 6, 9);
 scheme_add_method_w_arity(os_wxCanvas_class, "get-virtual-size", os_wxCanvasGetVirtualSize, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "get-scroll-units", os_wxCanvasGetScrollUnitsPerPage, 2, 2);
 scheme_add_method_w_arity(os_wxCanvas_class, "get-dc", os_wxCanvasGetDC, 0, 0);
 scheme_add_method_w_arity(os_wxCanvas_class, "popup-menu", os_wxCanvasPopupMenu, 3, 3);
 scheme_add_method_w_arity(os_wxCanvas_class, "on-char", os_wxCanvasOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "on-event", os_wxCanvasOnEvent, 1, 1);
 scheme_add_method_w_arity(os_wxCanvas_class, "on-paint", os_wxCanvasOnPaint, 0, 0);
 scheme_add_method_w_arity(os_wxCanvas_class, "allow-double-click", os_wxCanvasAllowDoubleClick, 1, 1);


  scheme_made_class(os_wxCanvas_class);


}
  scheme_install_xc_global("wx:const-border", scheme_make_integer(wxBORDER), env);
}

int objscheme_istype_wxCanvas(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxCanvas_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:canvas%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxCanvas(class wxCanvas *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxCanvas_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxCanvas *objscheme_unbundle_wxCanvas(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxCanvas(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxCanvas *)o->primdata;
  else
    return (wxCanvas *)o->primdata;
}


/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_text.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_item.h"
#include "wx_txt.h"
#include "wx_mtxt.h"
#include "wx_text.h"





#include "wxscheme.h"
#include "wxs_text.h"
#include "wxscomon.h"





#define CB_FUNCTYPE wxFunction 


#undef CALLBACKCLASS
#undef CB_REALCLASS
#undef CB_UNBUNDLE
#undef CB_USER

#define CALLBACKCLASS os_wxText
#define CB_REALCLASS wxText
#define CB_UNBUNDLE objscheme_unbundle_wxText
#define CB_USER "wx:text%::initialization"

#undef CB_TOSCHEME
#undef CB_TOC
#define CB_TOSCHEME wxTextCallbackToScheme
#define CB_TOC wxTextCallbackToC


class CALLBACKCLASS;





extern wxCommandEvent *objscheme_unbundle_wxCommandEvent(Scheme_Object *,const char *,int);
extern Scheme_Object *objscheme_bundle_wxCommandEvent(wxCommandEvent *);

static void CB_TOSCHEME(CB_REALCLASS *obj, wxCommandEvent &event);











class os_wxText : public wxText {
 public:
  Scheme_Object *callback_closure;

  os_wxText(Scheme_Object * obj, class wxPanel* x0, wxFunction x1, nstring x2, string x3 = "", int x4 = -1, int x5 = -1, int x6 = -1, int x7 = -1, long x8 = 0, string x9 = "text");
  ~os_wxText();
  void OnChar(class wxKeyEvent& x0);
  Bool PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1);
  Bool PreOnChar(class wxWindow* x0, class wxKeyEvent* x1);
  void OnSize(int x0, int x1);
  void OnSetFocus();
  void OnKillFocus();
};

Scheme_Object *os_wxText_class;

os_wxText::os_wxText(Scheme_Object * o, class wxPanel* x0, wxFunction x1, nstring x2, string x3, int x4, int x5, int x6, int x7, long x8, string x9)
: wxText(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxText::~os_wxText()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxText::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxText_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxText::OnChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxText::PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxText_class, "pre-on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxMouseEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:text%::pre-on-event"", extracting return value");
  }
}

Bool os_wxText::PreOnChar(class wxWindow* x0, class wxKeyEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxText_class, "pre-on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxKeyEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:text%::pre-on-char"", extracting return value");
  }
}

void os_wxText::OnSize(int x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxText_class, "on-size", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxText::OnSize(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxText::OnSetFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxText_class, "on-set-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxText::OnSetFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxText::OnKillFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxText_class, "on-kill-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxText::OnKillFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxTextOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:text%::on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxText *)((Scheme_Class_Object *)obj)->primdata)->wxText::OnChar(*x0);
  else
    ((wxText *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSetEditable(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:text%::set-editable");

  
  ((wxText *)((Scheme_Class_Object *)obj)->primdata)->SetEditable(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextPaste(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxText *)((Scheme_Class_Object *)obj)->primdata)->Paste();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextCut(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxText *)((Scheme_Class_Object *)obj)->primdata)->Cut();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxText *)((Scheme_Class_Object *)obj)->primdata)->Copy();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSetValue(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:text%::set-value");

  
  ((wxText *)((Scheme_Class_Object *)obj)->primdata)->SetValue(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextGetValue(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);

  

  
  r = ((wxText *)((Scheme_Class_Object *)obj)->primdata)->GetValue();

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxTextPreOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxMouseEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "wx:text%::pre-on-event", 0);
  x1 = objscheme_unbundle_wxMouseEvent(p[1], "wx:text%::pre-on-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxText *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnEvent(x0, x1);
  else
    r = ((wxText *)((Scheme_Class_Object *)obj)->primdata)->PreOnEvent(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextPreOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxKeyEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "wx:text%::pre-on-char", 0);
  x1 = objscheme_unbundle_wxKeyEvent(p[1], "wx:text%::pre-on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxText *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnChar(x0, x1);
  else
    r = ((wxText *)((Scheme_Class_Object *)obj)->primdata)->PreOnChar(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextOnSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text%::on-size");
  x1 = objscheme_unbundle_integer(p[1], "wx:text%::on-size");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxText *)((Scheme_Class_Object *)obj)->primdata)->wxText::OnSize(x0, x1);
  else
    ((wxText *)((Scheme_Class_Object *)obj)->primdata)->OnSize(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextOnSetFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxText *)((Scheme_Class_Object *)obj)->primdata)->wxText::OnSetFocus();
  else
    ((wxText *)((Scheme_Class_Object *)obj)->primdata)->OnSetFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextOnKillFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxText *)((Scheme_Class_Object *)obj)->primdata)->wxText::OnKillFocus();
  else
    ((wxText *)((Scheme_Class_Object *)obj)->primdata)->OnKillFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxText_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxText *realobj;
  class wxPanel* x0;
  wxFunction x1;
  nstring x2;
  string x3;
  int x4;
  int x5;
  int x6;
  int x7;
  long x8;
  string x9;

  Scheme_Object *tmp_callback = NULL;
  if ((n < 3) ||(n > 10)) 
    scheme_wrong_count("wx:text%::initialization", 3, 10, n, p);
  x0 = objscheme_unbundle_wxPanel(p[0], "wx:text%::initialization", 0);
  x1 = (SCHEME_NULLP(p[1]) ? NULL : (WXGC_IGNORE(tmp_callback), objscheme_istype_proc2(p[1], CB_USER), tmp_callback = p[1], (CB_FUNCTYPE)CB_TOSCHEME));
  x2 = (nstring)objscheme_unbundle_nullable_string(p[2], "wx:text%::initialization");
  if (n > 3) {
    x3 = (string)objscheme_unbundle_string(p[3], "wx:text%::initialization");
  } else
    x3 = "";
  if (n > 4) {
    x4 = objscheme_unbundle_integer(p[4], "wx:text%::initialization");
  } else
    x4 = -1;
  if (n > 5) {
    x5 = objscheme_unbundle_integer(p[5], "wx:text%::initialization");
  } else
    x5 = -1;
  if (n > 6) {
    x6 = objscheme_unbundle_integer(p[6], "wx:text%::initialization");
  } else
    x6 = -1;
  if (n > 7) {
    x7 = objscheme_unbundle_integer(p[7], "wx:text%::initialization");
  } else
    x7 = -1;
  if (n > 8) {
    x8 = objscheme_unbundle_integer(p[8], "wx:text%::initialization");
  } else
    x8 = 0;
  if (n > 9) {
    x9 = (string)objscheme_unbundle_string(p[9], "wx:text%::initialization");
  } else
    x9 = "text";

  if (!x6) x6 = -1;if (!x7) x7 = -1;
  realobj = new os_wxText(obj, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  
  realobj->callback_closure = tmp_callback; objscheme_backpointer(&realobj->callback_closure);
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:text%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:text%");
}

void objscheme_setup_wxText(void *env)
{
if (os_wxText_class) {
    objscheme_add_global_class(os_wxText_class,  "wx:text%", env);
} else {
  os_wxText_class = objscheme_def_prim_class(env, "wx:text%", "wx:item%", os_wxText_ConstructScheme, 13);

  scheme_add_method_w_arity(os_wxText_class,"get-class-name",objscheme_classname_os_wxText, 0, 0);

 scheme_add_method_w_arity(os_wxText_class, "on-char", os_wxTextOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxText_class, "set-editable", os_wxTextSetEditable, 1, 1);
 scheme_add_method_w_arity(os_wxText_class, "paste", os_wxTextPaste, 0, 0);
 scheme_add_method_w_arity(os_wxText_class, "cut", os_wxTextCut, 0, 0);
 scheme_add_method_w_arity(os_wxText_class, "copy", os_wxTextCopy, 0, 0);
 scheme_add_method_w_arity(os_wxText_class, "set-value", os_wxTextSetValue, 1, 1);
 scheme_add_method_w_arity(os_wxText_class, "get-value", os_wxTextGetValue, 0, 0);
 scheme_add_method_w_arity(os_wxText_class, "pre-on-event", os_wxTextPreOnEvent, 2, 2);
 scheme_add_method_w_arity(os_wxText_class, "pre-on-char", os_wxTextPreOnChar, 2, 2);
 scheme_add_method_w_arity(os_wxText_class, "on-size", os_wxTextOnSize, 2, 2);
 scheme_add_method_w_arity(os_wxText_class, "on-set-focus", os_wxTextOnSetFocus, 0, 0);
 scheme_add_method_w_arity(os_wxText_class, "on-kill-focus", os_wxTextOnKillFocus, 0, 0);


  scheme_made_class(os_wxText_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxText, wxTYPE_TEXT);

}
}

int objscheme_istype_wxText(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxText_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:text%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxText(class wxText *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_TEXT) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxText_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxText *objscheme_unbundle_wxText(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxText(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxText *)o->primdata;
  else
    return (wxText *)o->primdata;
}




static void CB_TOSCHEME(CB_REALCLASS *realobj, wxCommandEvent &event)
{
  Scheme_Object *p[2];
  Scheme_Class_Object *obj;
  jmp_buf savebuf;

  obj = (Scheme_Class_Object *)realobj->__gc_external;

  if (!obj) {
    // scheme_signal_error("bad callback object");
    return;
  }

  p[0] = (Scheme_Object *)obj;
  p[1] = objscheme_bundle_wxCommandEvent(&event);

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    scheme_apply_multi(((CALLBACKCLASS *)obj->primdata)->callback_closure, 2, p);
  }

  COPY_JMPBUF(scheme_error_buf, savebuf);
}




#define CB_FUNCTYPE wxFunction 


#undef CALLBACKCLASS
#undef CB_REALCLASS
#undef CB_UNBUNDLE
#undef CB_USER

#define CALLBACKCLASS os_wxMultiText
#define CB_REALCLASS wxMultiText
#define CB_UNBUNDLE objscheme_unbundle_wxMultiText
#define CB_USER "wx:multi-text%::initialization"

#undef CB_TOSCHEME
#undef CB_TOC
#define CB_TOSCHEME wxMultiTextCallbackToScheme
#define CB_TOC wxMultiTextCallbackToC


class CALLBACKCLASS;





extern wxCommandEvent *objscheme_unbundle_wxCommandEvent(Scheme_Object *,const char *,int);
extern Scheme_Object *objscheme_bundle_wxCommandEvent(wxCommandEvent *);

static void CB_TOSCHEME(CB_REALCLASS *obj, wxCommandEvent &event);





class os_wxMultiText : public wxMultiText {
 public:
  Scheme_Object *callback_closure;

  os_wxMultiText(Scheme_Object * obj, class wxPanel* x0, wxFunction x1, nstring x2, string x3 = "", int x4 = -1, int x5 = -1, int x6 = -1, int x7 = -1, long x8 = 0, string x9 = "text");
  ~os_wxMultiText();
  void OnChar(class wxKeyEvent& x0);
};

Scheme_Object *os_wxMultiText_class;

os_wxMultiText::os_wxMultiText(Scheme_Object * o, class wxPanel* x0, wxFunction x1, nstring x2, string x3, int x4, int x5, int x6, int x7, long x8, string x9)
: wxMultiText(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMultiText::~os_wxMultiText()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxMultiText::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMultiText_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxMultiText::OnChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxMultiTextOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:multi-text%::on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMultiText *)((Scheme_Class_Object *)obj)->primdata)->wxMultiText::OnChar(*x0);
  else
    ((wxMultiText *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMultiTextGetValue(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMultiText *)((Scheme_Class_Object *)obj)->primdata)->GetValue();

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxMultiText_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMultiText *realobj;
  class wxPanel* x0;
  wxFunction x1;
  nstring x2;
  string x3;
  int x4;
  int x5;
  int x6;
  int x7;
  long x8;
  string x9;

  Scheme_Object *tmp_callback = NULL;
  if ((n < 3) ||(n > 10)) 
    scheme_wrong_count("wx:multi-text%::initialization", 3, 10, n, p);
  x0 = objscheme_unbundle_wxPanel(p[0], "wx:multi-text%::initialization", 0);
  x1 = (SCHEME_NULLP(p[1]) ? NULL : (WXGC_IGNORE(tmp_callback), objscheme_istype_proc2(p[1], CB_USER), tmp_callback = p[1], (CB_FUNCTYPE)CB_TOSCHEME));
  x2 = (nstring)objscheme_unbundle_nullable_string(p[2], "wx:multi-text%::initialization");
  if (n > 3) {
    x3 = (string)objscheme_unbundle_string(p[3], "wx:multi-text%::initialization");
  } else
    x3 = "";
  if (n > 4) {
    x4 = objscheme_unbundle_integer(p[4], "wx:multi-text%::initialization");
  } else
    x4 = -1;
  if (n > 5) {
    x5 = objscheme_unbundle_integer(p[5], "wx:multi-text%::initialization");
  } else
    x5 = -1;
  if (n > 6) {
    x6 = objscheme_unbundle_integer(p[6], "wx:multi-text%::initialization");
  } else
    x6 = -1;
  if (n > 7) {
    x7 = objscheme_unbundle_integer(p[7], "wx:multi-text%::initialization");
  } else
    x7 = -1;
  if (n > 8) {
    x8 = objscheme_unbundle_integer(p[8], "wx:multi-text%::initialization");
  } else
    x8 = 0;
  if (n > 9) {
    x9 = (string)objscheme_unbundle_string(p[9], "wx:multi-text%::initialization");
  } else
    x9 = "text";

  if (!x6) x6 = -1;if (!x7) x7 = -1;
  realobj = new os_wxMultiText(obj, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  
  realobj->callback_closure = tmp_callback; objscheme_backpointer(&realobj->callback_closure);
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxMultiText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:multi-text%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:multi-text%");
}

void objscheme_setup_wxMultiText(void *env)
{
if (os_wxMultiText_class) {
    objscheme_add_global_class(os_wxMultiText_class,  "wx:multi-text%", env);
} else {
  os_wxMultiText_class = objscheme_def_prim_class(env, "wx:multi-text%", "wx:text%", os_wxMultiText_ConstructScheme, 3);

  scheme_add_method_w_arity(os_wxMultiText_class,"get-class-name",objscheme_classname_os_wxMultiText, 0, 0);

 scheme_add_method_w_arity(os_wxMultiText_class, "on-char", os_wxMultiTextOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxMultiText_class, "get-value", os_wxMultiTextGetValue, 0, 0);


  scheme_made_class(os_wxMultiText_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMultiText, wxTYPE_MULTI_TEXT);

}
}

int objscheme_istype_wxMultiText(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMultiText_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:multi-text%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMultiText(class wxMultiText *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_MULTI_TEXT) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMultiText_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMultiText *objscheme_unbundle_wxMultiText(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMultiText(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMultiText *)o->primdata;
  else
    return (wxMultiText *)o->primdata;
}




static void CB_TOSCHEME(CB_REALCLASS *realobj, wxCommandEvent &event)
{
  Scheme_Object *p[2];
  Scheme_Class_Object *obj;
  jmp_buf savebuf;

  obj = (Scheme_Class_Object *)realobj->__gc_external;

  if (!obj) {
    // scheme_signal_error("bad callback object");
    return;
  }

  p[0] = (Scheme_Object *)obj;
  p[1] = objscheme_bundle_wxCommandEvent(&event);

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    scheme_apply_multi(((CALLBACKCLASS *)obj->primdata)->callback_closure, 2, p);
  }

  COPY_JMPBUF(scheme_error_buf, savebuf);
}





// @ "get-line-text" : int GetLineText(int, string);







// @ "<<" : void operator<<(string);
// @ "<<" : void operator<<(int);
// @ "<<" : void operator<<(float);
// @ "<<" : void operator<<(char);

class os_wxTextWindow : public wxTextWindow {
 public:

  os_wxTextWindow(Scheme_Object * obj, class wxFrame* x0, int x1 = -1, int x2 = -1, int x3 = -1, int x4 = -1, long x5 = 0, string x6 = "textWindow");
  os_wxTextWindow(Scheme_Object * obj, class wxPanel* x0, int x1 = -1, int x2 = -1, int x3 = -1, int x4 = -1, long x5 = 0, string x6 = "textWindow");
  ~os_wxTextWindow();
  void OnChar(class wxKeyEvent& x0);
  Bool PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1);
  Bool PreOnChar(class wxWindow* x0, class wxKeyEvent* x1);
  void OnSize(int x0, int x1);
  void OnSetFocus();
  void OnKillFocus();
};

Scheme_Object *os_wxTextWindow_class;

os_wxTextWindow::os_wxTextWindow(Scheme_Object * o, class wxFrame* x0, int x1, int x2, int x3, int x4, long x5, string x6)
: wxTextWindow(x0, x1, x2, x3, x4, x5, x6)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxTextWindow::os_wxTextWindow(Scheme_Object * o, class wxPanel* x0, int x1, int x2, int x3, int x4, long x5, string x6)
: wxTextWindow(x0, x1, x2, x3, x4, x5, x6)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxTextWindow::~os_wxTextWindow()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxTextWindow::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextWindow_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxTextWindow::OnChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxTextWindow::PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextWindow_class, "pre-on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxMouseEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:text-window%::pre-on-event"", extracting return value");
  }
}

Bool os_wxTextWindow::PreOnChar(class wxWindow* x0, class wxKeyEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextWindow_class, "pre-on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxKeyEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:text-window%::pre-on-char"", extracting return value");
  }
}

void os_wxTextWindow::OnSize(int x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextWindow_class, "on-size", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxTextWindow::OnSize(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTextWindow::OnSetFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextWindow_class, "on-set-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxTextWindow::OnSetFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTextWindow::OnKillFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextWindow_class, "on-kill-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxTextWindow::OnKillFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxTextWindowOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:text-window%::on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->wxTextWindow::OnChar(*x0);
  else
    ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowPreOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxMouseEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "wx:text-window%::pre-on-event", 0);
  x1 = objscheme_unbundle_wxMouseEvent(p[1], "wx:text-window%::pre-on-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnEvent(x0, x1);
  else
    r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->PreOnEvent(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowPreOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxKeyEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "wx:text-window%::pre-on-char", 0);
  x1 = objscheme_unbundle_wxKeyEvent(p[1], "wx:text-window%::pre-on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnChar(x0, x1);
  else
    r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->PreOnChar(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowOnSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::on-size");
  x1 = objscheme_unbundle_integer(p[1], "wx:text-window%::on-size");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->wxTextWindow::OnSize(x0, x1);
  else
    ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->OnSize(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowOnSetFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->wxTextWindow::OnSetFocus();
  else
    ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->OnSetFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowOnKillFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->wxTextWindow::OnKillFocus();
  else
    ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->OnKillFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowWriteText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:text-window%::write-text");

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->WriteText(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowShowPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::show-position");

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->ShowPosition(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowSetInsertionPointEnd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->SetInsertionPointEnd();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowSetInsertionPoint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::set-insertion-point");

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->SetInsertionPoint(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowSetFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxFont* x0;

  
  x0 = objscheme_unbundle_wxFont(p[0], "wx:text-window%::set-font", 0);

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->SetFont(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowReplace(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;
  string x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::replace");
  x1 = objscheme_unbundle_integer(p[1], "wx:text-window%::replace");
  x2 = (string)objscheme_unbundle_string(p[2], "wx:text-window%::replace");

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->Replace(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowRemove(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::remove");
  x1 = objscheme_unbundle_integer(p[1], "wx:text-window%::remove");

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->Remove(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowXYToPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::x-y-to-position");
  x1 = objscheme_unbundle_integer(p[1], "wx:text-window%::x-y-to-position");

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->XYToPosition(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowPositionToXY(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long _x1;
  long* x1 = &_x1;
  long _x2;
  long* x2 = &_x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::position-to-x-y");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:text-window%::position-to-x-y", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:text-window%::position-to-x-y"), "wx:text-window%::position-to-x-y");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:text-window%::position-to-x-y", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_integer(objscheme_unbox(p[2], "wx:text-window%::position-to-x-y"), "wx:text-window%::position-to-x-y");

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->PositionToXY(x0, x1, x2);

  
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_integer(_x2));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowModified(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->Modified();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowSaveFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  pathname x0;

  
  x0 = (pathname)objscheme_unbundle_pathname(p[0], "wx:text-window%::save-file");

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->SaveFile(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowLoadFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  pathname x0;

  
  x0 = (pathname)objscheme_unbundle_pathname(p[0], "wx:text-window%::load-file");

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->LoadFile(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowSetSelection(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  long x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::set-selection");
  x1 = objscheme_unbundle_integer(p[1], "wx:text-window%::set-selection");

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->SetSelection(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowGetNumberOfLines(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->GetNumberOfLines();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowGetLineLength(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-window%::get-line-length");

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->GetLineLength(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowGetLastPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->GetLastPosition();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowGetInsertionPoint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->GetInsertionPoint();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowGetContents(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);

  

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->GetContents();

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxTextWindowDiscardEdits(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->DiscardEdits();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowPaste(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->Paste();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowCut(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->Cut();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->Copy();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowClear(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->Clear();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextWindowPopupMenu(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMenu* x0;
  float x1;
  float x2;

  
  x0 = objscheme_unbundle_wxMenu(p[0], "wx:text-window%::popup-menu", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:text-window%::popup-menu");
  x2 = objscheme_unbundle_float(p[2], "wx:text-window%::popup-menu");

  
  r = ((wxTextWindow *)((Scheme_Class_Object *)obj)->primdata)->PopupMenu(x0, x1, x2);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextWindow_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxTextWindow *realobj;
  if ((n >= 1) && objscheme_istype_wxPanel(p[0], NULL, 0)) {
    class wxPanel* x0;
    int x1;
    int x2;
    int x3;
    int x4;
    long x5;
    string x6;

    
    if ((n < 1) ||(n > 7)) 
      scheme_wrong_count("wx:text-window%::initialization (panel case)", 1, 7, n, p);
    x0 = objscheme_unbundle_wxPanel(p[0], "wx:text-window%::initialization (panel case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:text-window%::initialization (panel case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:text-window%::initialization (panel case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:text-window%::initialization (panel case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_integer(p[4], "wx:text-window%::initialization (panel case)");
    } else
      x4 = -1;
    if (n > 5) {
      x5 = objscheme_unbundle_integer(p[5], "wx:text-window%::initialization (panel case)");
    } else
      x5 = 0;
    if (n > 6) {
      x6 = (string)objscheme_unbundle_string(p[6], "wx:text-window%::initialization (panel case)");
    } else
      x6 = "textWindow";

    if (!x3) x3 = -1;if (!x4) x4 = -1;
    realobj = new os_wxTextWindow(obj, x0, x1, x2, x3, x4, x5, x6);
    
    
  } else  {
    class wxFrame* x0;
    int x1;
    int x2;
    int x3;
    int x4;
    long x5;
    string x6;

    
    if ((n < 1) ||(n > 7)) 
      scheme_wrong_count("wx:text-window%::initialization (frame case)", 1, 7, n, p);
    x0 = objscheme_unbundle_wxFrame(p[0], "wx:text-window%::initialization (frame case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:text-window%::initialization (frame case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:text-window%::initialization (frame case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:text-window%::initialization (frame case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_integer(p[4], "wx:text-window%::initialization (frame case)");
    } else
      x4 = -1;
    if (n > 5) {
      x5 = objscheme_unbundle_integer(p[5], "wx:text-window%::initialization (frame case)");
    } else
      x5 = 0;
    if (n > 6) {
      x6 = (string)objscheme_unbundle_string(p[6], "wx:text-window%::initialization (frame case)");
    } else
      x6 = "textWindow";

    if (!x3) x3 = -1;if (!x4) x4 = -1;
    realobj = new os_wxTextWindow(obj, x0, x1, x2, x3, x4, x5, x6);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxTextWindow(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:text-window%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:text-window%");
}

void objscheme_setup_wxTextWindow(void *env)
{
if (os_wxTextWindow_class) {
    objscheme_add_global_class(os_wxTextWindow_class,  "wx:text-window%", env);
} else {
  os_wxTextWindow_class = objscheme_def_prim_class(env, "wx:text-window%", "wx:window%", os_wxTextWindow_ConstructScheme, 31);

  scheme_add_method_w_arity(os_wxTextWindow_class,"get-class-name",objscheme_classname_os_wxTextWindow, 0, 0);

 scheme_add_method_w_arity(os_wxTextWindow_class, "on-char", os_wxTextWindowOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxTextWindow_class, "pre-on-event", os_wxTextWindowPreOnEvent, 2, 2);
 scheme_add_method_w_arity(os_wxTextWindow_class, "pre-on-char", os_wxTextWindowPreOnChar, 2, 2);
 scheme_add_method_w_arity(os_wxTextWindow_class, "on-size", os_wxTextWindowOnSize, 2, 2);
 scheme_add_method_w_arity(os_wxTextWindow_class, "on-set-focus", os_wxTextWindowOnSetFocus, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "on-kill-focus", os_wxTextWindowOnKillFocus, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "write-text", os_wxTextWindowWriteText, 1, 1);
 scheme_add_method_w_arity(os_wxTextWindow_class, "show-position", os_wxTextWindowShowPosition, 1, 1);
 scheme_add_method_w_arity(os_wxTextWindow_class, "set-insertion-point-end", os_wxTextWindowSetInsertionPointEnd, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "set-insertion-point", os_wxTextWindowSetInsertionPoint, 1, 1);
 scheme_add_method_w_arity(os_wxTextWindow_class, "set-font", os_wxTextWindowSetFont, 1, 1);
 scheme_add_method_w_arity(os_wxTextWindow_class, "replace", os_wxTextWindowReplace, 3, 3);
 scheme_add_method_w_arity(os_wxTextWindow_class, "remove", os_wxTextWindowRemove, 2, 2);
 scheme_add_method_w_arity(os_wxTextWindow_class, "x-y-to-position", os_wxTextWindowXYToPosition, 2, 2);
 scheme_add_method_w_arity(os_wxTextWindow_class, "position-to-x-y", os_wxTextWindowPositionToXY, 3, 3);
 scheme_add_method_w_arity(os_wxTextWindow_class, "modified?", os_wxTextWindowModified, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "save-file", os_wxTextWindowSaveFile, 1, 1);
 scheme_add_method_w_arity(os_wxTextWindow_class, "load-file", os_wxTextWindowLoadFile, 1, 1);
 scheme_add_method_w_arity(os_wxTextWindow_class, "set-selection", os_wxTextWindowSetSelection, 2, 2);
 scheme_add_method_w_arity(os_wxTextWindow_class, "get-number-of-lines", os_wxTextWindowGetNumberOfLines, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "get-line-length", os_wxTextWindowGetLineLength, 1, 1);
 scheme_add_method_w_arity(os_wxTextWindow_class, "get-last-position", os_wxTextWindowGetLastPosition, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "get-insertion-point", os_wxTextWindowGetInsertionPoint, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "get-contents", os_wxTextWindowGetContents, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "discard-edits", os_wxTextWindowDiscardEdits, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "paste", os_wxTextWindowPaste, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "cut", os_wxTextWindowCut, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "copy", os_wxTextWindowCopy, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "clear", os_wxTextWindowClear, 0, 0);
 scheme_add_method_w_arity(os_wxTextWindow_class, "popup-menu", os_wxTextWindowPopupMenu, 3, 3);


  scheme_made_class(os_wxTextWindow_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxTextWindow, wxTYPE_TEXT_WINDOW);

}
}

int objscheme_istype_wxTextWindow(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxTextWindow_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:text-window%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxTextWindow(class wxTextWindow *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_TEXT_WINDOW) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxTextWindow_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxTextWindow *objscheme_unbundle_wxTextWindow(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxTextWindow(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxTextWindow *)o->primdata;
  else
    return (wxTextWindow *)o->primdata;
}


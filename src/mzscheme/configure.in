
#################################################################
# This is the source for the `configure' script, to be compiled #
# by autoconf.                                                  #
#################################################################

AC_INIT(mzscheme/src/bignum.c)

AC_ARG_ENABLE(mred, ""  feature: mred           compile MrEd as well as MzScheme (enabled by default), , enable_mred=yes )

AC_ARG_ENABLE(dynlib, ""  feature: dynlib         create shared libraries)

AC_ARG_ENABLE(sgc, ""  feature: sgc            use Senora GC instead of the Boehm GC)
AC_ARG_ENABLE(sgcdebug, ""  feature: sgcdebug       use Senora GC for debugging)

AC_ARG_ENABLE(float, ""  feature: float          include support for single-precision floats)
AC_ARG_ENABLE(floatinstead, ""  feature: floatinstead   compile to use single-precision by default)

AC_ARG_ENABLE(oskit, ""  feature: oskit          compile OSKit-based MzScheme kernel)
AC_ARG_ENABLE(smalloskit, ""  feature: smalloskit     compile small OSKit-based MzScheme kernel)

AC_ARG_ENABLE(wbuild, ""  feature: wbuild         compile and use wbuild for .w sources)
AC_ARG_ENABLE(perl, ""  feature: perl           use perl to regenerate sources)

AC_ARG_ENABLE(gprof, ""  feature: gprof          compile for profiling with gprof (gcc only))
AC_ARG_ENABLE(gcov, ""  feature: gcov           compile to gather gcov statistics (gcc only))

AC_ARG_ENABLE(noopt, ""  feature: noopt          drop -O C flags)

###### Some flags imply other flags #######

if test "${enable_smalloskit}" = "yes" ; then
  enable_oskit=yes
fi

if test "${enable_oskit}" = "yes" ; then
  enable_mred=no
fi

if test "${enable_mred}" = "no" ; then
  enable_wbuild=no
fi

# Hack for the implementor:
if test "${enable_perl}" = "" ; then
  if test "$USER" = "mflatt" ; then
    enable_perl=yes
  fi
fi

if test "${prefix}" = "NONE" ; then
  prefix="${srcdir}/.."
  MAKE_FINISH=inplace-finish
else
  echo "----> Installation will go to ${prefix} <-----"
  MAKE_COPYTREE=copytree
  MAKE_FINISH=copy-finish
fi

###### Make sure MrEd is really there ######

if test "${enable_mred}" = "yes" ; then
  if test ! -d $srcdir/mred ; then
    enable_mred=no
  fi
fi

###### Some defaults #######

OPTIONS=

# GC Directory
GCDIR=gc

MZBINTARGET=normal-bin
MZINSTALLTARGET=normal-install

LIBS=

###### OSKit stuff #######

if test "${enable_oskit}" = "yes" ; then
  OSKHOME=${OSKHOME:-/usr/local/oskit}

  if test ! -d ${OSKHOME}/bin ; then
    AC_MSG_ERROR(cannot find OSKit support; try defining OSKHOME)
  fi

  CC=`(ls ${OSKHOME}/bin/*-oskit-gcc | head -1) 2> /dev/null`
  if test ! -x "${CC}" ; then
    AC_MSG_ERROR(can't find *-oskit-gcc compiler script in ${OSKHOME}/bin)
  fi

  CFLAGS="-nostdinc -I${OSKHOME}/include/oskit -I${OSKHOME}/include/oskit/freebsd "
  CFLAGS="$CFLAGS -I${OSKHOME}/include/oskit/c -I${OSKHOME}/include -I/usr/include"

  GCDIR=sgc
  OPTIONS="-DOSKIT -DUSE_SENORA_GC -DSGC_AUTO_ROOTS=0"

  if test "${enable_smalloskit}" = "yes" ; then
    EXTRA_OSK_LIBS=
  else
    EXTRA_OSK_LIBS="-loskit_linux_dev -loskit_linux_fs -loskit_diskpart -loskit_freebsd_net"
    OPTIONS="$OPTIONS -DOSK_FILESYSTEMS_AND_ETHERNET"
  fi

  MZBINTARGET=oskit
else
  enable_oskit=no
fi

###### float stuff #######

if test "${enable_floatinstead}" = "yes" ; then
  enable_float=yes
  OPTIONS="${OPTIONS} -DUSE_SINGLE_FLOATS_AS_DEFAULT"
fi

if test "${enable_float}" = "yes" ; then
  OPTIONS="${OPTIONS} -DUSE_SINGLE_FLOATS"
fi

###### Autoconfigure #######

if test "${enable_oskit}" = "no" ; then
  AC_PROG_CC
  AC_PROG_CPP
  AC_PROG_CXX
  if test "$AS" = '' ; then 
    AS=as
    as_was_set=no
  else
    as_was_set=yes
  fi
fi
AC_PROG_RANLIB
if test "$AR" = '' ; then 
  AR=ar
fi
if test "$ARFLAGS" = '' ; then 
  ARFLAGS=ruv
fi

# If using gcc, we want all warnings:
if test "$CC" = "gcc" ; then 
  CFLAGS="$CFLAGS -Wall"
fi

if test "${enable_perl}" = "yes" ; then
  AC_PATH_PROG(PERL,perl)
else
  PERL=""
fi

if test "${enable_mred}" = "yes" ; then
  AC_PATH_XTRA

  MAKE_MRED=mr
  MAKE_MRED3M=mr3m
  MAKE_MREDINSTALL=mrinstall
  MAKE_MREDINSTALL3M=mrinstall3m
else
  MAKE_MRED=
  MAKE_MRED3M=
  MAKE_MREDINSTALL=
  MAKE_MREDINSTALL3M=
fi

AC_CHECK_LIB(m, cos)
AC_CHECK_LIB(dl, dlopen)

PROFFLAGS=""

if test "${enable_gprof}" = "yes" ; then
  PROFFLAGS="$PROFFLAGS -pg -DDONT_ITIMER"
  LIBS="$LIBS -pg"
fi

if test "${enable_gcov}" = "yes" ; then
  PROFFLAGS="$PROFFLAGS -fprofile-arcs -ftest-coverage"
fi

if test "${enable_wbuild}" = "yes" ; then
  MAKE_WBUILD=wb
  WBUILD="x/wbuild/src/wbuild"
  WBUILD="$WBUILD --no-init-file --no-lines -i \$(srcdir)/XWidgets"
  WBUILD="$WBUILD -c \$(srcdir)/XWidgets -d \$(srcdir)/XWidgets"
  WBUILD="$WBUILD -p . \$(srcdir)/x/wbuild/wbuild.cfg"
else
  MAKE_WBUILD=
  WBUILD="sh \$(PLTSRCDIR)/wxxt/src/XWidgets/dummy.wbuild"
fi

############## platform tests ################

if test -x "/bin/uname" ; then
  UNAME=/bin/uname
elif test -x "/usr/bin/uname" ; then
  UNAME=/usr/bin/uname
else
  echo configure: cannot find uname
  exit 1
fi

# for flags we don't want to use in config tests:
EXTRALIBS=

OS=`$UNAME -s`
case $OS in
  SunOS)
    case `$UNAME -r` in
      5.*)
       STATICLINK="-Wl,-Bstatic" # after -ldl
       LIBS="$LIBS -lsocket -lnsl -lintl"
       ;;
      *)
       ;;
    esac
    ;;
  AIX)
    EXTRALIBS="-Wl,-brtl,-bE:\$(srcdir)/../mzscheme/include/mzscheme.exp"
    ;;
  FreeBSD)
    LIBS="$LIBS -rdynamic"
    ;;
  OpenBSD)
    ;;
  IRIX)
    STATICLINK="/usr/lib/libC.a /usr/lib/libmalloc.a"
    if test "$X_PRE_LIBS" = " -lSM -lICE" ; then
      # For some reason, works best to drop these
      X_PRE_LIBS=""
    fi
    ;;
  Linux)
    LIBS="$LIBS -rdynamic"
    # PPC: X11 librares are not found
    case `$UNAME -m` in
      ppc)
       if test -d /usr/X11R6/lib ; then
         X_LIBS="$X_LIBS -L/usr/X11R6/lib"
       fi
       ;;
      *)
       ;;
    esac
    ;;
  OSF1)
    if test "$CC" = "cc" ; then 
      CFLAGS="$CFLAGS -iee_with_inexact"
    fi
    ;;
  HP-UX)
    if test "$CC" = "gcc"; then
      CFLAGS="$CFLAGS -fPIC"
    else
      CFLAGS="$CFLAGS -Wp,-H,64000 -Aa -D_HPUX_SOURCE +Z"
    fi
    LIBS="$LIBS -Wl,-E"
    # For Xaw and Xmu:
    X_CFLAGS="-I/usr/contrib/X11R6/include/ $X_CFLAGS"
    X_LIBS="-L/usr/contrib/X11R6/lib/ $X_LIBS"
    ;;
  SCO) # How do you really recognize SCO?
    LIBS="$LIBS -lc -lsocket"
    ;;
  CYGWIN*)
    MZBINTARGET=cygwin-bin
    MZINSTALLTARGET=cygwin-install
    EXTRALIBS="$LIBS gmzwin.exp"
    ;;
  BeOS)
    if test "${enable_sgcdebug}" = "yes" ; then
      dummyvar=""
    else
      enable_sgc=yes
    fi
    ;;
  Darwin)
    # mwccppc doesn't produce files that 'ar' can handle:
    AR="libtool"
    ARFLAGS="-o"
    # don't use X Libraries: 
    LIBS="-framework Carbon"
    if test `basename "$CC"` = "mwccppc"; then
      MZBINTARGET=macosx-bin
      CFLAGS="-gccinc -ext o $CFLAGS"
    fi
    ;;
  *)
    ;;
esac

MACH=`$UNAME -m`
case "$MACH" in
  alpha)
    if test "$CC" = "gcc" ; then
      if test "$as_was_set" = "no" ; then
       AS="gcc -c -x assembler-with-cpp"
      fi
    fi
    ;; 
  *)
    ;;
esac

############## SGC ################

if test "${enable_sgc}" = "yes" ; then
  GCDIR=sgc
  OPTIONS="$OPTIONS -DUSE_SENORA_GC"
fi

if test "${enable_sgcdebug}" = "yes" ; then
  GCDIR=sgc
  OPTIONS="$OPTIONS -DSGC_STD_DEBUGGING=1"
fi

############## C flags ################

MZOPTIONS=

AC_LANG_C

[ msg="for inline keyword" ]
AC_MSG_CHECKING($msg)
AC_TRY_RUN(
   static inline int foo() { return 0; }
   int main() {
      return foo();
   }, inline=yes, inline=no, inline=no)
if test "$inline" = "no" ; then
  MZOPTIONS="$MZOPTIONS -DNO_INLINE_KEYWORD"
fi

case $OS in
  Darwin)
    if test `basename "$CC"` = "mwccppc"; then
      MZOPTIONS="$MZOPTIONS -include carbon-precomp"
    fi
    ;;
  *)
    ;;
esac

AC_MSG_RESULT($inline) 

############## C++ grunge ################

MROPTIONS=

if test "${enable_mred}" = "yes" ; then
  CXXFLAGS="$CXXFLAGS $X_CFLAGS"
  AC_LANG_CPLUSPLUS 

[ msg="whether new and new[] are different"   ]
  AC_MSG_CHECKING($msg)
  AC_TRY_RUN(
[  #include <stddef.h> ]
   inline void *operator new(size_t size) { return (void *)0x1; }
[  inline void *operator new[](size_t size) { return (void *)0x2; }  ]
   class C { int x; };
   int main() {
[    return (new C) == (new C[10]);       ]
   }, different=yes, different=no, different=yes)
  if test "$different" = "yes" ; then
    MROPTIONS="$MROPTIONS -DOPERATOR_NEW_ARRAY"
  fi
  AC_MSG_RESULT($different) 

  # If we're using gcc and including X11/Intrinsic doesn't work
  #  then try adding -fpermissive
  if test "$CC" = "gcc" ; then
    AC_MSG_CHECKING(whether need to use -fpermissive)
    AC_TRY_COMPILE([#]include "X11/Intrinsic.h", , addperm=no, addperm=yes)
    if test "$addperm" = "yes" ; then
      MROPTIONS="$MROPTIONS  -fpermissive"
    fi
    AC_MSG_RESULT($addperm) 
  fi

  # Can we make auto-repeat detectable?
[ msg="whether X11/XKBlib.h is available"   ]
  AC_MSG_CHECKING($msg)
  AC_TRY_RUN(
[  #include <X11/Intrinsic.h>]
[  #include <X11/XKBlib.h>]
   int main() {
      return 0;
   }, xkbavail=yes, xkbavail=no, xkbavail=no)
  if test "$xkbavail" = "no" ; then
    MROPTIONS="$MROPTIONS -DNO_XKB_LIB_PRESENT"
  fi
  AC_MSG_RESULT($xkbavail)
fi

case $OS in
  Darwin)
    if test `basename "$CC"` = "mwccppc"; then
      MROPTIONS="$MROPTIONS -include carbon-precomp"
    fi
    ;;
  *)
    ;;
esac

############## drop optimization flags ################

if test "${enable_noopt}" = "yes" ; then
  AWKPRG='BEGIN { FS = "(^| )-O(0|1|2|3|4|5|6|7|8|9|)( |$)" } /.*/ { for (i = 1; i < NF; i++) printf "%s ", $i; print $NF }'
  CFLAGS=`echo "$CFLAGS" | awk "$AWKPRG"`
fi

############## libtool ################

if test "${enable_dynlib}" = "yes" ; then
  echo "generating libtool"
  ${srcdir}/lt/ltconfig ${srcdir}/lt/ltmain.sh
  LTDIR=`pwd`
  AR="${LTDIR}/libtool $CC -rpath ${prefix}/lib -o"
  ARFLAGS=""
  RANLIB=":"
  CC="${LTDIR}/libtool $CC"
  LIBSFX=la
  MREDLINKER="${LTDIR}/libtool $CXX"
  WXLIBS=WXLIBSDYN
  ICP="${LTDIR}/libtool cp"
  MRLIBINSTALL="install-lib"
  LIBFINISH="${LTDIR}/libtool --finish"
else
  LIBSFX=a
  MREDLINKER="$CXX"
  WXLIBS=WXLIBSNORM
  ICP=cp
  MRLIBINSTALL="install-no-lib"
  LIBFINISH=echo
fi

################ X OpenGL ##################
if test "${enable_mred}" = "yes" ; then
  AC_CHECK_LIB(GL, glXCreateContext, GL_NO_PTHREAD="yes", GL_NO_PTHREAD="no", $X_LIBS -lX11 -lXext)
  if test "${GL_NO_PTHREAD}" = "yes" ; then
    X_EXTRA_LIBS="$X_EXTRA_LIBS -lGL"
    MROPTIONS="$MROPTIONS -DUSE_GL"
  else
    AC_CHECK_LIB(GL, glXChooseVisual, GL_PTHREAD="yes", GL_PTHREAD="no", $X_LIBS -lX11 -lXext -pthread)
    if test "${GL_PTHREAD}" = "yes" ; then
      X_EXTRA_LIBS="$X_EXTRA_LIBS -lGL -pthread"
      MZOPTIONS="$MZOPTIONS -DASSUME_FIXED_STACK_SIZE -DFIXED_STACK_SIZE=1048576"
      MROPTIONS="$MROPTIONS -DUSE_GL"
    fi
  fi
fi

############## final output ################

LIBS="$LIBS $EXTRALIBS"

AC_SUBST(CC)
AC_SUBST(CFLAGS)
AC_SUBST(PROFFLAGS)
AC_SUBST(CPP)
AC_SUBST(PERL)
AC_SUBST(AS)
AC_SUBST(RANLIB)
AC_SUBST(AR)
AC_SUBST(ARFLAGS)
AC_SUBST(WBUILD)

AC_SUBST(x_includes)
AC_SUBST(x_libraries)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)

AC_SUBST(OPTIONS)
AC_SUBST(MZOPTIONS)
AC_SUBST(MROPTIONS)
AC_SUBST(GCDIR)
AC_SUBST(MZBINTARGET)
AC_SUBST(MZINSTALLTARGET)

AC_SUBST(MREDLINKER)
AC_SUBST(LIBSFX)
AC_SUBST(WXLIBS)
AC_SUBST(ICP)
AC_SUBST(MRLIBINSTALL)
AC_SUBST(LIBFINISH)

AC_SUBST(MAKE_MRED)
AC_SUBST(MAKE_MRED3M)
AC_SUBST(MAKE_MREDINSTALL)
AC_SUBST(MAKE_MREDINSTALL3M)
AC_SUBST(MAKE_WBUILD)
AC_SUBST(MAKE_COPYTREE)
AC_SUBST(MAKE_FINISH)

AC_SUBST(OSKHOME)
AC_SUBST(EXTRA_OSK_LIBS)

mk_needed_dir()
{
  if test ! -d "$1" ; then
    mkdir "$1"
  fi
}

makefiles="Makefile
           mzscheme/Makefile
             mzscheme/src/Makefile mzscheme/dynsrc/Makefile
             mzscheme/gc/Makefile mzscheme/sgc/Makefile
             mzscheme/gc2/Makefile mzscheme/guile/Makefile
             mzscheme/palm/Makefile"

subbuilds= 

if test "${enable_mred}" = "yes" ; then
  mk_needed_dir wxxt
  mk_needed_dir wxxt/utils
  mk_needed_dir wxxt/utils/image
  mk_needed_dir wxxt/contrib
  mk_needed_dir wxxt/contrib/xpm
  mk_needed_dir wxcommon

  makefiles="$makefiles
             mred/Makefile
               mred/wxs/Makefile mred/wxme/Makefile
               mred/gc2/Makefile
             wxxt/src/Makefile wxxt/src/x/Makefile
               wxxt/utils/image/src/Makefile
               wxxt/contrib/xpm/lib/Makefile"

  subbuilds="$subbuilds wxcommon/jpeg"
fi

if test "${enable_wbuild}" = "yes" ; then
 subbuilds="$subbuilds wxxt/src/x/wbuild"
 AC_CONFIG_AUX_DIR( wxxt/src/x/wbuild ) 
fi

AC_CONFIG_SUBDIRS( $subbuilds )

AC_OUTPUT($makefiles)

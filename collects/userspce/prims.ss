(unit/sig
  plt:prims^
  (import)
  (define beginning
    '(read
      number?
      =
      <
      >
      <=
      >=
      +
      -
      *
      /
      max
      min
      quotient
      remainder
      modulo
      square
      sqrt
      expt
      abs
      exp
      log
      sin
      cos
      tan
      asin
      acos
      atan
      sinh
      cosh
      exact?
      integer?
      zero?
      odd?
      even?
      add1
      sub1
      lcm
      gcd
      rational?
      numerator
      denominator
      inexact?
      real?
      floor
      ceiling
      round
      complex?
      make-polar
      real-part
      imag-part
      magnitude
      angle
      conjugate
      exact->inexact
      inexact->exact
      number->string
      integer->char
      random
      current-seconds
      e
      pi
      boolean?
      boolean=?
      not
      symbol?
      symbol=?
      cons?
      pair?
      empty?
      null?
      list?
      cons
      first
      car
      rest
      cdr
      second
      cadr
      third
      caddr
      fourth
      cadddr
      fifth
      sixth
      seventh
      eighth
      list-ref
      list
      append
      length
      memq
      memv
      member
      reverse
      assq
      equal?
      char?
      char=?
      char<?
      char>?
      char<=?
      char>=?
      char-ci=?
      char-ci<?
      char-ci>?
      char-ci<=?
      char-ci>=?
      char-numeric?
      char-alphabetic?
      char-whitespace?
      char-upper-case?
      char-lower-case?
      char-upcase
      char-downcase
      char->integer
      string?
      string-length
      make-string
      string-ref
      substring
      string-copy
      string-append
      string=?
      string<?
      string>?
      string<=?
      string>=?
      string-ci=?
      string-ci<?
      string-ci>?
      string-ci<=?
      string-ci>=?
      string->number
      string->list
      list->string
      format
      make-posn
      posn?
      posn-x
      posn-y
      error
      struct?
      equal?
      eq?
      exit
      eval
      procedure?
      time-apply
      apply
      values
      void
      void?
      raise
      make-exn:else
      current-continuation-marks
      require-library/proc))
  (define intermediate
    '(read
      number?
      =
      <
      >
      <=
      >=
      +
      -
      *
      /
      max
      min
      quotient
      remainder
      modulo
      square
      sqrt
      expt
      abs
      exp
      log
      sin
      cos
      tan
      asin
      acos
      atan
      sinh
      cosh
      exact?
      integer?
      zero?
      odd?
      even?
      add1
      sub1
      lcm
      gcd
      rational?
      numerator
      denominator
      inexact?
      real?
      floor
      ceiling
      round
      complex?
      make-polar
      real-part
      imag-part
      magnitude
      angle
      conjugate
      exact->inexact
      inexact->exact
      number->string
      integer->char
      random
      current-seconds
      e
      pi
      boolean?
      boolean=?
      not
      symbol?
      symbol=?
      cons?
      pair?
      empty?
      null?
      list?
      cons
      first
      car
      rest
      cdr
      second
      cadr
      third
      caddr
      fourth
      cadddr
      fifth
      sixth
      seventh
      eighth
      list-ref
      list
      append
      length
      memq
      memv
      member
      reverse
      assq
      equal?
      char?
      char=?
      char<?
      char>?
      char<=?
      char>=?
      char-ci=?
      char-ci<?
      char-ci>?
      char-ci<=?
      char-ci>=?
      char-numeric?
      char-alphabetic?
      char-whitespace?
      char-upper-case?
      char-lower-case?
      char-upcase
      char-downcase
      char->integer
      string?
      string-length
      make-string
      string-ref
      substring
      string-copy
      string-append
      string=?
      string<?
      string>?
      string<=?
      string>=?
      string-ci=?
      string-ci<?
      string-ci>?
      string-ci<=?
      string-ci>=?
      string->number
      string->list
      list->string
      format
      make-posn
      posn?
      posn-x
      posn-y
      error
      struct?
      equal?
      eq?
      exit
      eval
      procedure?
      time-apply
      apply
      values
      void
      void?
      raise
      make-exn:else
      current-continuation-marks
      require-library/proc))
  (define advanced
    '(read
      printf
      display
      write
      number?
      =
      <
      >
      <=
      >=
      +
      -
      *
      /
      max
      min
      quotient
      remainder
      modulo
      square
      sqrt
      expt
      abs
      exp
      log
      sin
      cos
      tan
      asin
      acos
      atan
      sinh
      cosh
      exact?
      integer?
      zero?
      odd?
      even?
      add1
      sub1
      lcm
      gcd
      rational?
      numerator
      denominator
      inexact?
      real?
      floor
      ceiling
      round
      complex?
      make-polar
      real-part
      imag-part
      magnitude
      angle
      conjugate
      exact->inexact
      inexact->exact
      number->string
      integer->char
      random
      current-seconds
      e
      pi
      boolean?
      boolean=?
      not
      symbol?
      symbol=?
      cons?
      pair?
      empty?
      null?
      list?
      cons
      first
      car
      rest
      cdr
      second
      cadr
      third
      caddr
      fourth
      cadddr
      fifth
      sixth
      seventh
      eighth
      list-ref
      list
      append
      length
      memq
      memv
      member
      reverse
      assq
      equal?
      set-first!
      set-rest!
      set-car!
      set-cdr!
      char?
      char=?
      char<?
      char>?
      char<=?
      char>=?
      char-ci=?
      char-ci<?
      char-ci>?
      char-ci<=?
      char-ci>=?
      char-numeric?
      char-alphabetic?
      char-whitespace?
      char-upper-case?
      char-lower-case?
      char-upcase
      char-downcase
      char->integer
      string?
      string-length
      make-string
      string-ref
      substring
      string-copy
      string-append
      string=?
      string<?
      string>?
      string<=?
      string>=?
      string-ci=?
      string-ci<?
      string-ci>?
      string-ci<=?
      string-ci>=?
      string->number
      string->list
      list->string
      format
      make-posn
      posn?
      posn-x
      posn-y
      set-posn-x!
      set-posn-y!
      error
      struct?
      equal?
      eq?
      exit
      eval
      procedure?
      time-apply
      apply
      values
      void
      void?
      raise
      make-exn:else
      current-continuation-marks
      require-library/proc
      force
      promise?
      make-promise
      map
      for-each
      filter
      foldr
      foldl
      build-list
      quicksort
      andmap
      ormap
      vector
      make-vector
      build-vector
      vector-ref
      vector-length
      vector-set!
      vector?
      box
      unbox
      set-box!
      box?
      call/cc
      call-with-current-continuation
      turtles
      turtles
      turn
      turn/radians
      move
      erase
      move-offfset
      draw-offfset
      erase-offfset
      clear
      save-turtle-bitmap
      splitfn
      split*fn
      tpromptfn)))

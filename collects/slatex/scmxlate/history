v 0m

15 Sep 2002

If first line of file-to-be-ported starts with #,
ignore it.  

Heads of case clause should be pruned of 
#'.

26 Mar 2002

scmxlate-rename just renames a symbol in the source.
scmxlate-rename-define furthermore eliminates its
definition in the source. 

25 Mar 2002

add *predefined-aliases* that is dialect-dependent

v 0L1

24 Mar 2002

scmxlate.cl now uses cl pathnames instead of
os-dependent stringy pathnames.  (Uses :relative which
isn't in CLtL1 -- I hope this doesn't break on
older CLs)

scmxlate-disable-main

23 Mar 2002

scmxlate calls translates the cl version of
each sexp rather than scm2cl'ing the entire file
and then translating that result.  This allows
scmxlate config for cl (which is written in cl)
to be more natural, ie, it doesn't have to know
what the intermediate cl-translation looks like

Allow defstructs to be overridden

Added scmxlate-prefix, scmxlate-include, and allow
scmxlate[-dialect[-os]]-start-<file> in dialects/

When renaming x to y, we can also ignore any 
definition for x.

22 Mar 2002

Added scmxlate-compile?
as option specifiable in user-override file

21 Mar 2002

Use distinct names: scmxlate-ignore,
scmxlate-rename

Allow user overrides in file
scmxlate-<file-to-be-ported>

Added scmxlate-target-file, which allows user to set
*target-file*, which can be fruitfully used by
package-writer-supplied configuration code in
dialects/ to make ready-to-run scripts

v 0L

19 Mar 2002

Included the Scheme-to-Scheme porting mechanism from
tex2page (also schelog) into this (formerly scm2cl)
distribution, and rename latter to scmxlate.  It still
contains scm2cl as an independently usable
submodule.  scmxlate is thus a general
configuration tool that translates a Scheme package to
a variety of Scheme dialects and Common Lisp.

--- I include here some history of the porting mechanism
from tex2page.

--- 16 Mar 2002

tex2page's to-Common-Lisp porting method made general
(ie, not specific to tex2page), just like the
Scheme-to-Scheme method.

changes to porting mechanism to help make
it more easily customizable in the 
"dialects" directory -- defignore,
defalias.  don't wait for user input
if singleton files dialects-supported.scm
and operating-systems-supported.scm found
in dialects/

--- 31 Jan 2002

Scheme 48

-- 16 Dec 2001

Low-level define-syntax as implemented in MzScheme.
Convert this to defmacro for dialects that need it.
Thing to note: Petite and SXM's low-level define-syntax is
almost like MzScheme's but with a slightly less
convenient semantics for the procedure datum->syntax-object.

--- 18 Jan 2001

SXM,  Pocket Scheme

--- 16 Jan 2001

Scsh

--- 13 Dec 2000

Move porting-related clutter into subdirectory "dialects".

--- 4 April 1999

Petite Chez Scheme

--- 16 April 1998

MIT Scheme

--- 14 April 1998

Guile

--- 24 April 1997

Extensible mechanism added for porting to various Scheme dialects
(MzScheme, Gambit).

--- end of sxmlate pre-history from tex2page

16 Mar 2002

Allow correct lexical shadowing of global
procedure names, where the new value can also be a
procedure.  These inner procs will acquire a funcall
since they are not global.

v 0k3

20 Mar 2001

define translates to defparameter (not defvar)
so a later define overwrites an earlier define
of the same identifier 

v 0k2

6 Jan 2001

(MzScheme) flush-output = (CL) force-output 

Dec 19, 2000

getenv = system:getenv, for ACL and CLISP

v 0k1

Dec 17, 2000

string->symbol is more Scheme-y.
Leading-colon strings are cvted to keywords.
All-lowercase strings are cvted to all-uppercase
symbols, so symbols can remain unescaped in both
Scheme and CL.  In general, a lowercase char
in the string becomes an uppercase char in the
symbol and an uppercase char becomes a lowercase.
  ":keyword" -> :keyword
  "symbol"   -> symbol
  "SYMBOL"   -> |symbol|
  "SyMbOL"   -> |sYmBoL|

v 0k

Dec 16, 2000

Allow dotted data in source.

string->number should work on "" too
(it's defined using read-from-string, which
should return nil on eof instead of erroring)

struct-setter-p (scm2cl-macros.cl) shouldn't
error on nonsymbols

v 0j1

Nov 28, 2000

labels (xln of named-let) correction.  The 
args of the procs it introduces shd be 
allowed to be procs themselves.

v 0j

Nov 23, 2000

with-input-from-file, with-output-to-file
load-relative

v 0i

Nov 2, 2000

Change CL defmacro's rest arg from just
__syntax-rules-arg__ to 
(&rest __syntax-rules-arg__) because CL spec seems (?)
to disallow former.  Sugg by Rainer Joswig
(joswig@corporate-world.lisp.de)

v. 0h

Apr 2, 2000

(define x (let ((y ...)) (lambda ...))) converted to
(let ((y ...)) (defun x ...)) 

v. 0g

Oct 9, 1999

Procs introduces by an earlier entry in a let* should be
usable in subsequent entries.

Treat cond-clause that has only one element (which is
both test and then-expression).

v. 0f

Oct 3, 1999

Give uppercase char to set-dispatch-macro-character.
Shouldn't matter ideally, but a version of CLISP choked.

v. 0e

Feb 14, 1999

current-input-port, current-output-port

v. 0d

Feb 11, 1999

A Scheme version of defstruct supported.

April 27, 1998

v. 0c

scheme-procs.cl not included automatically in
translation (it is hardly ever needed).

Only those named lets whose names begin (rather than
contain) the substring "loop" are converted into CL
loops

April 18, 1998

v. 0b

let-syntax and letrec-syntax treated.

Made funcall-insertion better by keeping track of
bound variables.

=> in cond recognized.

April 27, 1997

v. 0a

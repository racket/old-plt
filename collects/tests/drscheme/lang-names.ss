
(module lang-names mzscheme
  (provide beginner-names intermediate-adds advanced-adds)
  
  (define beginner-names
    '(*
      /
      =
      <
      >
      <=
      current-seconds
      e
      complex?
      empty
      sinh
      square
      denominator
      and
      posn-x
      posn-y
      exact->inexact
      inexact->exact
      cond
      remainder
      number->string
      string->number
      or
      equal?
      make-string
      string-length
      char-alphabetic?
      string-ci=?
      exit
      char-upper-case?
      string-ci<?
      char-lower-case?
      string-ci>?
      conjugate
      string-ci<=?
      string-ci>=?
      string-append
      string->list
      list->string
      make-posn
      char-numeric?
      char->integer
      integer->char
      char-upcase
      char-downcase
      char-whitespace?
      seventh
      symbol=?
      posn?
      null
      pair?
      cons
      car
      null?
      list*
      length
      append
      memv
      member
      symbol?
      cadr
      caddr
      reverse
      cadddr
      list-ref
      boolean=?
      real?
      exact?
      odd?
      even?
      gcd
      lcm
      floor
      round
      exp
      log
      sin
      cos
      number?
      tan
      asin
      acos
      rational?
      atan
      integer?
      sqrt
      expt
      inexact?
      angle
      add1
      sub1
      ceiling
      abs
      numerator
      modulo
      make-polar
      real-part
      imag-part
      magnitude
      zero?
      quotient
      max
      min
      random
      error
      cons?
      eighth
      empty?
      false
      fifth
      eof
      read
      first
      format
      fourth
      char?
      char=?
      char<?
      char>?
      not
      eq?
      lambda
      quote
      string?
      rest
      second
      string-ref
      third
      string=?
      true
      string<?
      string>?
      string<=?
      string>=?
      substring
      char<=?
      char>=?
      char-ci=?
      char-ci<?
      char-ci>?
      char-ci<=?
      char-ci>=?
      boolean?
      +
      >=
      if
      cosh
      sgn
      pi
      define
      define-struct
      struct?
      sixth
      cdr
      list?
      list
      -))
  
  (define intermediate-adds
    '(time
      let 
      unquote-splicing
      letrec
      let*
      unquote
      quasiquote
      local
      ))
  
  (define advanced-adds
    '(procedure?
      assf
      memq
      assq
      mergesort
      set-cdr!
      string-copy
      string-lowercase!
      string-uppercase!
      append!
      filter
      foldr
      time-apply
      memf
      apply
      printf
      pretty-print
      display
      case
      delay
      let/ec
      do
      when
      fluid-let
      make-vector
      vector-length
      vector-set!
      make-promise
      map
      ormap
      build-string
      build-vector
      build-list
      compose
      call/cc
      raise
      set-car!
      box
      box?
      unbox
      set-box!
      write
      vector
      set!
      begin
      begin0
      force
      vector?
      vector-ref
      promise?
      void?
      unless
      move
      let/cc
      set-posn-x!
      set-posn-y!
      call-with-current-continuation
      with-handlers
      andmap
      for-each
      quicksort))
  
  (define turtles-names
    '(split
      split*
      tprompt
      clear
      turtles
      draw
      draw-offset
      turn
      save-turtle-bitmap
      turtle-window-size
      splitfn
      split*fn
      erase
      turn/radians
      move-offset
      erase-offset)))

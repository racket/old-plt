
See MzScheme_200.txt for information on major changes in MzScheme
 199.x. Minor changes are listed below.

Version 199.24:

 * Changed the way references to top-level and module-top-level
   variables are implemented. The change has various performance
   implications (but it should be invisible otherwise):

      Pro: code is shared completely for separate instantiations of a
      module, saving space in many cases.

      Con: a `lambda' expression that references only top-levels and
      imports used to be a constant closure, but now it has to be
      constructed (unless all the references are to primitives).

 * Got rid of lazy invocations for compile-time code in a module (and
   its for-syntax imports, etc.) via `require'. This simplifies the
   programming model in a useful way, and it's cheap enough after the
   change to module-variable access.

Version 199.23:

 * Changed the first argument of `raise-syntax-error' so that syntax
   objects are not allowed, but a more general specification is
   supported. Also changed the calculation of the form name for the
   error message, and the values of the `form' and `module' fields of
   the `exn:syntax' exception structure. The `module' field now can be
   a module path index (or symbol or #f).

   The consequences are:

     - `raise-syntax-error' should almost always be called with
       a #f argument.

     - the third argument should be supplied almost always, and it
       should be the source form whose transformer is reporting the
       error.

     - assuming guidelines such as the above are followed, the form
       name and module in an exn:syntax exception indicate the source
       of the transformer from the programmer's perspective; thus, the
       exception information is reliable for finding relevant
       documentation.

 * Added `namespace-require/copy', which is like `namespace-require'
   except that new top-level variables are created in the namespace for
   the module's exported values. This function is useful for creating
   namespaces, such as the initial one in MzScheme, with a traditional
   semantics for redefitions of built-in names.

 * Fixed `module' to gracefully handle definitions where the name is
   an uninterned symbol (so that the name is hidden).

 * Fixed miscellaneous bugs related to syntax.

Version 199.22:

 * Changed `define-struct' so that it can cooperate with other
   syntactic forms, such as `match' and `shared'.

   In addition to the old bindings,

      (define-struct <id> (<field-id> ...))

   binds <id> to expansion-time information about the declaration, and
   the sub-typing form is
 
      (define-struct (<id> <super-id>) (<field-id> ...))

   where <super-id> is the <id> from a previous `define-struct' ---
   not an expression that produces a structure type descriptor.

   The changes break old code in several ways:

     - The binding for <id> might collide with other definitions.

     - Sub-typing declarations must be changed, usually by deleting
       `struct:'.

   The new `define-struct' is slightly less powerful than the old one,
   though in ways that are unlikely to matter. For example, the new
   form cannot extend a structure type descriptor that is passed into
   a procedure.

   The advantage of the change is that forms like `match' and `shared'
   can work properly with structures. For example, given the
   declarations

     (define-struct a (x y))
     (define-struct (b a) (z))

   The expression

     (match .... [($ a pat) ....])

   is a syntax error, because the structure type `a' has two
   fields. But

     (match .... [($ a pat1 pat2) ....])
     (match .... [($ b pat1 pat2 pat3) ....])

   both work, and the structure types need not be declared as
   "transparent" (through a dummy inspector).
   
   The `struct' module export form exports the <id> binding as well as
   the old ones, so that sub-typing declarations and `match' forms
   work across module boundaries.

   The `struct' signature form for `unit/sig' introduces
   expansion-time information into importing units that immitates that
   of a `define-struct' declaration. The information is currently
   limited, in that subtyping relations are not exposed and the actual
   structure type may have more fields than declared in the
   signature. But `match' works with the partial information, for
   example, matching on as many fields as declared in the signature.

 * Changed loading to distinguish normal loads from module loads.

   When `require' triggers a load to get a module definition, the
   loaded file must contain a single `module' expression with the
   expected name, otherwise a helpful error message is reported. (The
   constraint on the file shape was always specified, but not directly
   enforced.)

   In addition, `module' in the loaded file is always mapped to the
   primitive `module' form, independent of the `module' binding of the
   current namespace. (Thus, loading a file from source reliably
   mimics loading a compiled version of the file, and vice-versa.)

   A load handler or load extension handler now takes two argument
   instead of one: the filename and the expected module name. The
   expected module name is either a symbol, indicating that a module
   declaration is expected, or #f, indicating that the file need not
   contain a module (though it may). If the expected name is a symbol,
   the handler is responsible for checking that the file actually
   contains a `module' declaration, and for mapping the loading
   `module' identifier to the primitive `module' form.

   Inside MzScheme: an extension is now obliged to define
   scheme_module_name(), in addition to scheme_initialize() and
   scheme_reload(). The scheme_module_name() function should return a
   module name symbol if the extension declares a module, #f
   otherwise.

 * `define-syntax' is now allowed within `class' and `unit' bodies,
   analogous to embedded `define-syntax'.  However, local macros in
   `class' cannot currently expand to procedure expressions that serve
   as methods.

 * EXPERIMENTAL: Added `#cs' and `#ci' prefixes for controlling
   case sentivity during `read'. The sequence `#cs' can be used as a
   prefix for any expression to make symbols within the expression
   case-sensitive.  The `#ci' prefix similarly makes symbols
   case-insensitive. For example,

      #cs(Apple #ciBanana Coconut)

    is the same as

     (|Apple| |banana| |Coconut|)

    whether `read-case-sensitive' is set to #f or #t.

    For example, `#cs' can be used in front of a `module' expression
    so that the module body is implemented in a case-sensitive
    variant of MzScheme:

     > #cs(module m mzscheme (define Foo 1) (define foo 2) (provide foo Foo))
     > (require m)
     > foo
     2
     > |Foo|
     1

 * `unit/sig' struct type changed to `signed-unit' to aviod conflicts
   (though it's not clear that the structure type needs to be exposed
   anymore, anyway).

 * Changed result of `identifier-binding' in the module case. It's now
   a list of four elements, including the "nominal" source module and
   its export name for the identifier.

 * Changed 'origin tracking so that starts with the empty and adds new
   identifiers to the front of the list. See the manual for details.

 * Added `cons-immutable', `list-immutable', and `list*-immutable', 
   and removed `pair->immutable-pair'.

 * Added `compiled-module-expression?' and `module-compiled-name'.

Version 199.20:

 * Added `tcp-connect/enable-break' and `tcp-accept/enable-break'.

 * Added `object-wait-multiple' and `object-wait-multiple/enable-break'.
   The new procedures accept a timeout (possibly #f) and one or more
   arguments for waiting. They block until the timeout expires, in
   which case #f is returned, or until one of the objects becomes
   unblocked, in which case an unblocked object is returned. If a
   semaphore is returned, then its internal count has been decremented
   by the wait.

   The waitable objects, including their corresponding blocking
   states, are as follows:

     type of object   blocking state      
     --------------   ----------------------
     semaphore        internal count is zero       
     thread           running             
     subprocess       running             
     TCP listener     nothing to accept   
     will executor    no wills to execute 
     input port:      no characters ready 
       file-stream
       pipe
       TCP

   The `semaphore-wait', `semaphore-wait/enable-break', `thread-wait',
   and `subprocess-wait' procedures are all technically redundant, but
   it seems worthwhile to keep them for error checking and code
   clarity.

 * Removed `semaphore-wait-multiple' from the "thread.ss" MzLib
   library.

 * Added `letrec-syntaxes+values', and changed the expansion of
   internal defines to use the new form so that a sequence of internal
   `define' and `define-syntax' defininitions creates a single,
   mutually recursive scope (as in Chez).

 * Fixed `write' on symbols with uppercase characters to quote the
   characters (unless `read-case-sentitive' is set to #t).

 * Changed the `datum->syntax-object' interface for position lists.
   Added a fourth optional argument to `datum->syntax-errors' for
   copying properties.

 * Fixed reader error messages to use `error-print-source-location'
   and GNU-style source locations.

 * Unix, Windows: fixed bug in `sleep' when asked to sleep for a large
   number of seconds.

 * Inside MzScheme: changed type of third argument for
   scheme_block_until() from void* to Scheme_Object*.

 * Inside MzScheme: added scheme_add_waitable() and
   scheme_add_waitable_through_sema() for extending the set of objects
   supported by `object-wait-multiple'.

Version 199.19:

 * Removed `make-hash-table-weak', and changed `make-hash-table' to
   accept up to two flag arguments: 'weak and/or 'equal. The 'weak
   flag causes the hash table to use weakly-held keys, and the 'equal
   flag causes the hash table to compare keys with `equal?' instead of
   `eq?'.

 * Added `eq-hash-code' and `equal-hash-code', which consume an
   arbitrary value and generate hash codes corresponding to `eq?' and
   `equal?' comparisons, respectively.

 * Removed the optional `get-special-proc' optional argument to
   `make-input-port' (recently introduced), and instead changed the
   `read-char-proc' and `peek-char-proc' arguments to allow
   non-character results. See the documentation for details. Added
   `peek-char-or-special' and `read-char-or-special'.

 * Added `syntax-span', and changed the reader to track the span (in
   characters) of read syntax objects. Also added a `span' field to
   exn:read, and changed the last optional argument of
   `datum->syntax-object' to support spans.

 * Added `set!-transformer?', to go with `make-set!-transformer'.

 * Added `public*', `override*', `private*', `define/public',
   `define/override', and `define/private' to "class.ss". Each form
   expands to some combination of `public'/`override'/'private' and
   `define'.

 * Changed syntax error messages to use GNU format:
     <file>:<line>:<col>: <message>
   If <file>'s path starts with the current directory, that part of
   the path is removed.

Version 199.18:

 * Quoted portions of a symbol (using | or \) preserve their case,
   even when symbols are read without case-sensitivity. (Quoting
   should have always worked this way, but I didn't know better.)

 * Added an optional third argument to `tcp-listen'. A true value for
   the argument causes a listener to be created even when the port is
   still involved with a TIME_WAITed connection.

   This defeats certain guarantees of the TCP protocol, which is why I
   never implemented it before. (Also, most everything I read on the
   topic recommended not defeating the protocol.) But many
   applications --- notably web servers --- can live without the
   guarantees.

 * In "unit.ss" and "unitsig.ss", changed
  `global-define-values/invoke-unit' and
  `global-define-values/invoke-unit/sig' to
  `namespace-variable-bind/invoke-unit' and
  `namespace-variable-bind/invoke-unit/sig', to match the new name for
  `global-defined-value'.

 * Changed the default error value conversion handler to print values
   using the current global port print handler.

 * Attempting to write a bytecode that contains unmarshalable
   constants now raises an exception. (Effectively, the exception is
   moved from read time to write time, since reading such a bytecode
   back in would fail anyway).

 * Re-renamed "2k" to "3m" (for "moving memory manager").

   Why change again? Garbage collection is inherently imprecise,
   making "precise garbage collection" an awkward term. "Moving memory
   manager" more clearly explains the difference as it affects
   extension/embedding programmers. Also, the number--letter
   combination looks better. Finally, unlike "2k", we have another
   2,997,999 years to get the conversion right before the name goes
   out of date.

 * Added a -M <coll> flag to MzScheme and MrEd as a shorthand for
   -L <coll>.ss <coll>.

 * Fixed a bug in code that cooperates with the scheduler; the bug
   could trigger a crash in `tcp-accept' because the needs_wakeup
   function was called without a preceding call to the check function.

Version 199.17:

 * Added `read-accept-quasiquote' to control whether the reader
   accepts backquote and comma in input (for DrScheme's teaching
   languages).

 * Renamed "2k" to "PGC" (for "precise garbage collection").

 * Upgraded to gc 6.0alpha9.

Version 199.15:

 * Added `error-print-source-location', which controls whether error
   messages include source information (e.g., line and column, actual
   expression). Turning off source info in the message text provides
   less cluttered error messages for tools, like DrScheme, that
   inspect the exception record anyway.

 * Added `current-command-line-arguments', which contains a vector of
   argument strings. (The `argv' variable is still defined, too.)

 * Fixed syntax expansion so that graph structure under `quote' is
   preserved. Cyclic graph structure is not supported within `syntax'
   or `quote-syntax' (i.e., those forms loop forever when expanding or
   compiling with cyclic arguments).

 * Fixed a bug in `module' expansion in the case that a body
   expression expands to `letrec-syntaxes'.

 * Added a `with-method' form to class.ss. The new form binds
   identifiers for application-style method invocation.

Version 199.14:

 * Changed slightly the way initialization arguments are handled in
   the class system (defined by the "class.ss" library).

   1) When by-position arguments are converted to by-name arguments,
      and when there are more by-position arguments than init
      variables in the instantiated class, then the leftover arguments
      are converted using the superclass's init variables, and so
      on. If a class contains an `init-rest' declaration without a
      variable, then leftover by-position arguments are instead
      rejected with a "too many arguments" error. (If the class
      contains an `init-rest' declaration with a variable, then the
      leftover by-position arguments are accumulated into a list.)

      Consequently, a class like

            (class frame%
              (super-instantiate ()))

      accepts by-position arguments just like frame%.

      The expansion of a `class100' form always has an `init-rest'
      clause.

   2) Multiple by-name arguments can use the same name, which is
      potentially useful when an initialization variable is shadowed
      by a derived class; by-name arguments are consumed leftmost
      first, and implicit arguments to `super-instantiate' or
      `super-init' are always added to the right of the argument list.
      The main consequence is in error reporting; illegal by-name
      arguments that happen to have the same name as an internal
      superclass argument (i.e., internal in the sense that a
      corresponding value is provided to `super-instantiate' or
      `super-init') are reported as unused arguments, instead of
      duplicate arguments.

 * When a (Unix-format) relative-path string is used with `require',
   an exception is raised if the path contains anything other than
   alpha-numeric characters, -, _, ., and space, or if the path
   contains a leading or trailing slash.

 * Fixed syntax bugs introduced in 199.13.

Version 199.13:

 * Changed the error display handler to take a `raise'd value (usually
   an exception record) as a second argument.

Version 199.11:

 * Changed string constants to support all ANSI C escapes, such as \n,
   both on input and on output from `write'.  Implemented by Eli
   Barzilay.

 * Added an optional argument to `read-syntax' for setting the source
   location offset.

 * Changed `datum->syntax-object' to allow a literal location
   specification as the last argument, instead of a syntax object
   whose location is copied.

 * Added an optional argument to `system-type'. If it's not false (the
   default), the result is a string that contains details about the
   operating system and the current machine (in a platform-specific
   format).

 * Added `file-stream-buffer' to control the buffering of data in
   file-stream ports. The buffer modes are standard: 'none, 'line, and
   'block. Under Unix, the default mode for the original error port is
   now 'none instead of 'line.

 * Fixed port line counting to treat CRLF as terminating a single line
   (on all platforms), instead of counting the CR and LF separately.
   Consequently, the source location information in error messages is
   more useful under Windows.

 * Fixed `file-stream-port?' for Windows.

 * Fixed `system' in the "process.ss" MzLib library when the current
   input, output, or error port is not a file-stream port.

   The two preceding bug fixes effectively cancel each other;
   `system' still doesn't work in Windows at the moment.

Version 199.7:

 * Added an "infix" conversion in the reader; input of the form
      (left ...1  .  mid  .  right ...1)
   is read as
      (mid left ...1 right ...1)
   In other words, a pair of dots between a pair of parens triggers
   the reader's "infix" conversion.

Version 199.1:

 * Fixed bug in `quotient' when first argument is 0 and the second
   argument is inexact. Also fixed `modulo' and `remainder' to return
   exact 0 in this case.

 * Added *?, +?, and ?? (non-greedy operators) to regexp,
   and fixed potential stack overflow.

 * Changed `raise-type-error' to accept an argument index and
   list of all arguments.

 * Changed all comparison precedures to require at least two
   operands, including `=', `<', ..., `char=?', `char<?', ...,
   `string=?', `string<?', ...

Version 103.5:

 * Fixed a memory bug in the run-time support for mzc-compiled code.

 * Added syntax objects and `read-syntax', in preparation for hygienic
   macros.

 * Added `port-count-lines!', which enables line-couting for a port.
   Will be useful for `read-syntax'.

Version 103.4:

 * Upgraded to gc 6.0alpha4

 * 2k: fixed memory bug in thread/continuation setup, and fixed bugs
   in bignum optimizations

Version 103.3:

 * 2k: compiles and runs for Windows (not tested much)

   To compile it, first build and install MzScheme. Also,
   the MSVC tools must be in your path. Then cd to
   plt/src/mzscheme/gc2, and run mzscheme -r winmake.ss.
   The binary will be mz2k.exe in that directory.

Version 103.2:

 * Windows and Unix: MzScheme-implemented threads swap roughly every
   10ms, instead of roughly every 10,000 non-primitive applications.

 * 2k: some bug fixes, performance tuning.

103.1:

 * Fixed `lambda' and `case-lambda' to signal an error when a keyword
   is used as an argument name.

 * Fixed leaks that could happen with thread kills. For example,
   killing a thread blocked on a TCP connect could leak file
   descriptors.

 * Fixed weak hash table growth in the presence of infrequent garbage
   collections (by forcing a collection before rehashing). (PR 934)

 * Fixed/improved some unit/sig error messages. (PRs 304, 830)

------------------------------------------------------------------------

Version 200, ???
(cond) alays returns void; the cond-allow-fallthough parameter and
 exn:cond exception have been removed
Changed all comparison precedures to require at least two
 operands, including =, <, ..., char=?, char<?, ...,
 string=?, string<?, ...
Renamed exn:misc:user-break to exn:break
Renamed arity to procedure-arity
Replaced primitive-name and inferred-name with object-name
Added an "infix" conversion in the reader, triggered by a pair of dots
 between a pair of parens
Added #cs and #ci prefixes for controlling case sentivity during read
Added current-command-line-arguments parameter
Added error-print-source-location parameter
Changed string constants to support ANSI C escapes (e.g., \n)
Fixed leaks (file descriptors, etc.) that could happen with
 thread kills
Fixed memory bug in the run-time support for mzc-compiled code
Changed the error display handler to take a raised value (usually
 an exception record) as a second argument
Removed make-hash-table-weak and changed make-hash-table to
 accept up to two flag arguments: 'weak and/or 'equal
Added eq-hash-code and equal-hash-code
Added port-count-lines!, which enables line-couting for a port
Extended custom ports to support non-char input, added
 read-char-or-special and peek-char-or-special
Quoted portions of a symbol (using | or \) preserve their case,
Added read-dot-as-symbol and read-accept-quasiquote parameters
Changed quoted parts of a symbol (with | or \) to always preserve case
Added an optional third argument to tcp-listen to reuse addresses
Added tcp-connect/enable-break and tcp-accept/enable-break
Added object-wait-multiple and object-wait-multiple/enable-break
Fixed quotient, remainder, and modulo when the first argument
 is exact 0 and the second argument is inexact
Default for pconvert.ss's whole/fractional-exact-numbers parameter
 changed to #f
Load handler or load extension handler now takes two argument
 instead of one: the filename and the expected module name
Renamed "2k" to "3m" (for "moving memory manager")
Upgraded to gc 6.0alpha9

Version 103, August 28, 2000
Changed define-values and set!-values to require distinct variables
 for binding
Windows: Fixed bug in close-output-port for TCP ports
Closing a TCP output port always sends an EOF to the other
 end of the connection, even if the associated input port
 remains open
Changed order of first two arguments to process[*]/ports and
 fixed bugs
Added an optional limit argument to make-pipe
Added deflate.ss library to MzLib, providing gzip, etc.
Added not-break-exn?, useful mainly as a predicate in a
 with-handlers expressions
Fixed load/use-compiled, require-library, and many MzLib functions to
 propagate break exceptions correctly
Added check-parameter-procedure and changed parameterize
Changed order of first two arguments to process[*]/ports, and
 fixed bugs
Fixed bugs in (eval (compile e))
Changed handling of pre- and post-queued breaks by
 call-in-nested-thread
Unix: fixed interaction among signals, I/O, and process sleeping
Unix: fixed bug in writing/closing file-stream output ports
 when a write error occurs
MacOS: changed `split-path' to preserve the colon suffix on a root
 name

Version 102, June 26, 2000
Switched to configure-based makefiles (autoconf)
with-input-from-file and with-output-to-file close the port when
 control leaves the dynamic extent of the call (normally, through an
 exception, or through a general continuation jump).
Added detail field to exn:i/o:filesystem
Added immutable strings and pairs, string->immutable-string,
 cons-immutable, list-immutable, and list*-immutable
Added read-decimal-as-inexact parameter
Fixed number reader to allow +inf.0, -inf.0, and +nan.0 in
 complex constants
Fixed bugs in number reader for hexadecimal numbers containing `.'
 and/or `s'/`l'-based exponents; note that `#e#x+e.s+e@-e.l-e'
 is a legal number(!)
Fixed reading from special devices, such as /dev/null and /dev/zero,
 in Solaris and HP/UX
Fixed blocking output (to stdout, stderr, or a process port) so that
 only the writing thread is blocked
Changed read-string! to read-string-avail!, added
 read-string-avail!/enable-break
Added write-string-avail and write-string-avail/enable-break
Added process/ports and process*/ports
Added file-stream-port?
Added 'update to the set of flags for open-output-file et al.
Changed default exit handler to return only results in 0 to 255
 as results to the OS, and everything else means 1
Changed time-apply to return four values, and to take an argument
 list to provide to the timed procedure
Change find-executable-path to accept #f as its second argument
Change normal-case-path to remove spaces at the end of a path
Changed angle on inexact zero (0 for 0.0, pi for -0.0)
Fixed arithmetic-shift for a -32 shift
Fixed angle on +nan.0
Fixed expt on 0 and a negative number
Added 'exec-file flag to find-system-path
Added provide-library
Added square and mergesort to MzLib's function.ss
Added tcp-addresses
Added -k command-line flag
Inside MzScheme: provided a way to fix the GC--thread problems
 under Windows, via GC_use_registered_statics
Inside MzScheme: scheme_basic_env() initializes break-enabled
 to #f instead of #t
Inside MzScheme: changed scheme_get_chars to consume an
 offset into the string
Inside MzScheme: added embedding-settable function
 scheme_console_output, used to report low-level errors
Inside MzScheme: restricted the format strings accepted by
 scheme_signal_error, scheme_raise_exn, and scheme_warning
Inside MzScheme: added scheme_count_lines; scheme_tell_line
 can return -1 if lines are not counted for a port
Inside MzScheme: added offset argument to scheme_write_string
 and scheme_read_bignum

Version 101, October 25, 1999
Added 'sys-dir to find-system-path
Added latin-1-integer->char and char->latin-1-integer
Added time-zone-offset field to the date structure
Added continuation field to exn:misc:user-break
Windows: all network sockets are closed on exit
Fixed (acos 0)
Fixed (expt x y) where x is negative and y is non-integral
Inside MzScheme: scheme_param_config's 2nd argument is
 now a Scheme_Object*

Version 100, August 9, 1999
 + indicates a change since 100alpha4
 * indicates a change since 100alpha3
Changed class syntax, splitting public clause use into:
 public : defines ivars not in superclass
 override : defines ivars already in superclass
Changed empty superclass from the empty list to object%;
 every class initialization must call super-init
Added ivar-in-interface?
+ Added class-initialization-arity
* Added class->interface
* Added object-interface
+ Removed object-class
+ Removed ivar-in-class?; replace (ivar-in-class? x c)
 with (ivar-in-interface? (class->interface x c))
Changed interface: raises an exception if a superinterface
 declares a variable that is also declared in the interface
 expression
Removed letrec*; letrec has the same semantics
* Fixed scope of function name in a named let
Internal definitions are allowed only at the beginning of lambda,
 case-lambda, let, let-values, let*, let*-values,
 letrec, letrec-values, fluid-let, let-macro, let-id-macro,
 let-expansion-time, parameterize, and with-handlers
begin expressions are flattened in an internal-definition context
(begin) allowed in a top-level, unit, or internal-definition
 context
Removed invoke-open-unit; see the new invoke.ss library, which
 includes define-values/invoke-unit
Self-import is now allowed for unit linking
Removed constant-name and constant-name-all-globals
Removed secure-primitive-exception-types
Removed readable type symbols (e.g., #<procedure>)
Removed semaphore-callback (MrEd now has queue-callback)
Removed parameterizations (but not parameters!)
parameterize sets parameter values in parallel (like let)
 instead of in series (like let*)
* Changed the initialization of the exception handler in a new
 thread to use the value of the initial-exception-handler
 parameter
Fixed unfairness in threads (perpetually creating threads
 would starve certain threads, particularly the main thread)
Unreachable thread blocked on an unreachable semaphore is
 garbage-collectable
Added current-memory-use
Fixed weak hash table bug (could drop keys too soon)
Added optional peek-proc argument to make-input-port
Changed TCP writes to block when the underlying implementation
 blocks, and removed tcp-port-send-waiting?
Asynchronous breaks are now disabled during dynamic-wind
 pre and post thunks
Removed user-break-poll-handler; spawn a thread that sleeps and
 calls break-thread, instead
Removed dynamic-enable-break (no long needed since dynamic-wind
 post thunks can't be broken), but moved it to MzLib's thread.ss
Removed execption-break-enabled (now always disabled)
Added call-in-nested-thread
Removed thread-weight
Renamed the call-with-escaping-continution procedure to
 call-with-escape-continution (call/ec is unchanged)
Finished with-continuation-mark and current-continuation-marks
 and documented them; the errortrace poor man's debugger relies
 on continuation marks; see plt/collects/errortrace/doc.txt
Removed debug-info-handler and replaced the debug-info field
 with a continuation-marks field
Added raise-mismatch-error
MacOS: getenv and putenv work within MzScheme; if a file named
 "Environment" resides in MzScheme's folder, it provides the
 initial environment; see the documentation for details
MacOS: fixed TCP problems
Fixed read-write invariance for inexact (floating-point) numbers
Changed handling of inexact can complex numbers towards compliance
 with Brad Lucier's proposal:
  (* 0 x) = 0 for all x
  (log 1) = 0, etc.
  -0.0 and 0.0 are properly distinguished; (- 0.0) = -0.0, and
   (/ (expt 2 400) -inf.0) = -0.0; (eqv? 0.0 -0.0) = #f even
   though (= 0.0 -0.0) = #t
  Complex numbers can have an inexact real/imaginary part with
   an exact zero imaginary/real part; thus, 4.0 is different
   from 4.0+0.0i, and 0+4.0i is different from 0.0+4.0i; note
   that (sqrt -4.0) is 0+2.0i
  Complex numbers can have a +nan.0 real/imaginary part with
   an imaginary/real part that is not +nan.0
All zero-length vectors are eq
Vectors are written (but not displayed) using the Chez-style
 #n(...) shorthand by default; added print-vector-length
 parameter
* The value of a built-in procedure is eq across namespaces
Replaced require-library-use-compiled with use-compiled-file-kinds
Changed interface for wills: no current executor, register-will
 -> will-register, will-executor-try -> will-try-execute, added
 will-execute
MzLib cleanup:
 Removed `@' suffix for embedded units in mzlib:core@ and mzlib@
 Removed all c.ss libraries, plus constan[t].ss
 Removed catch-errors and let-enumerate from macro.ss
 Removed make-class and make-class* from compat.ss
 Removed zsin, zcos, ztan, zasin, zacos, zatan, zlog, zexp,
  and zsqrt from zmath.ss (MzScheme's built-ins do complex)
 Moved from functio.ss to thread.ss: dynamic-disable-break,
  make-single-threader
 Removed from functio.ss: dynamic-wind/protect-break
 Added to thread.ss: dynamic-enable-break
 Moved MzLib's compat.ss out of the core
 Removes all but the first two arguments to pretty-print (the
  rest have parameters, which are more convenient anyway)
 Changed require to reference-file in refer.ss
file.ss library: added make-directory*
pretty-print: default display string handler is now the default
 port display handler instead of the display procedure
Ported to BeOS
Ported to OSKit
Ported to LinuxThreads, sortof; semaphore-waiting threads cannot
 be broken or killed
Inside MzScheme: new built-in type: scheme_complex_izi_type
Inside MzScheme: changed scheme_eval_string to raise an exception
 if the expression returns multiple values, and added
 scheme_eval_string_multi

Version 53, July 25, 1998
Changed file-modify-seconds to file-or-directory-modify-seconds
Changed rename-file to rename-file-or-directory
Changed file procedures to return void on success and raise
 and exception on failure: delete-file, rename-file-or-directory,
 file-size, copy-file, make-directory, delete-directory
Changed the procedures file-or-directory-modify-seconds and 
 file-or-directory-permissions to raise an exception if the
 file/directory does not exist
Changed current-drive to raise exn:misc:unsupported on platforms
 other than Windows
Added find-system-path
Fixed expand-defmacro for initialization argument expressions
 in a class*/names form
Fixed call/ec bug related to dynamic-wind (see !!! in 
 tests/basic.ss)
Fixed dynamic-wind bug: multiple levels of pre-thunks for a
 jump into a continuation were evaluated in reverse order
Fixed atan: second argument is allowed to be an exact non-integer
Fixed equal?: comparisons on equivalent vectors or structs
 with cycles no longer crash (until MzScheme runs out of memory)
Added make-temporary-file to MzLib's file.ss
Changed random and random-seed to use a parameter-specified
 random number generator; the generator is initially
 seeded with a number based on (current-milliseconds)
Removed the obsolete MzLib trigger library
Added with-continuation-mark and current-continuation-marks,
 but these have not yet been documented because their
 semanticses are not yet finalized

Version 52, May 25, 1998
R5RS non-compliance reduced to macros
Added scheme-report-environment, null-environment, and
 interaction-environment
Changed reference-library, etc. to require-library
 and changed require-library, etc. to require-library/proc
Changed uq-ivar and uq-make-gerenric to ivar/proc and 
 make-generic/proc
current-directory is now a parameter
Added simplify-path
Changed execute and execute* to exit via the exit handler
Top-level definitions are no longer allowed in the branches 
 of an if expression; consider replacing an expression like
 (if ... (define x ...)) with 
 (if ... (global-defined-value 'x ...))
expand-defmacro now signals the same set of syntax errors
 as compile and eval
local-expand-defmacro no longer expands define expressions
 in a non-top-level context; to implement a macro that
 detects define forms, use local-expand-body-expression
Fixed bug in (let/ec a (let/ec b (let/cc k ...))); calling
 b then k then a would fail, jumping to b instead of a
Fixed read-eval-print loop when jumping to the continuation
 of a previous eval and raising an exception there before
 the evaluation finishes
regexp-replace and regexp-replace*: \$ ("\\$" in Scheme)
 is now replaced by the empty string; this allows forms
 like "\\0\\$3", which inserts the 1st submatch and "3"
Fixed a potential bug with continuations (although I never
 saw it happen); they need to be marked by the GC with
 interior pointer marking
Changed read-line to break lines only on #\newline by default;
 new optional argument roughly parameterizes over the 
 line-breaking character(s)
Add read-string and read-string! for reading a block
 of characters from a port
Changed MzLib's read-string and read-string-all to
 read-from-string and read-from-string-all
Changed MzLib's with-semaphore to return the value returned
 by the thunk.
Added the command-line macro to MzLib's cmdline.ss
Linux and FreeBSD: turned on support for using more
 than 256 file descriptors
Inside MzScheme: current-directory, now a parameter, no
 longer sets the current directory as managed by the OS
Inside MzScheme: scheme_split_pathname changed
Inside MzScheme: scheme_setcwd and scheme_getcwd renamed to
 scheme_os_setcwd and scheme_os_getcwd; these set and get the
 OS-managed cwd, but they have no effect on the current 
 directory seen by Scheme code

Version 51, March 25, 1998
Changed load/use-compiled: searches for .zo files in
 a "compiled/" subdirectory, and searches for .so/.dll
 files in (build-path "compiled" (system-library-subpath))
Changed load and current-load/default-load-handler: `load'
 now sets the current-load-relative-directory, so a load
 handler does not need to set this parameter
Added current-load-extension (load-extension handler)
Unix: fixed file-or-directory-permissions for group-based 
 permissions when the group is not the current group (but
 still includes the user)
Windows: fixed directory-exists? et al. for UNC paths
Added local-expand-body-expression
Removed input-port-post-semaphore; this procedure can be
 implemented using thread, peek-char, and semaphore-post
Fixed thread: thunk can return any number of values
Fixed custodian-shutdown-all: if it has to shutdown the
 current thread, it does so immediately instead of
 waiting for the next thread context switch
Fixed will executors: will can return multiple values
Added link-exists?
Added copy-file
Added path-list-string->path-list
Added collection-path
The delete-file and rename-file functions now reliably work
 on links rather than the destination of the link (now fixed
 for MacOS and documented this way)
Fixed rename-file: works for directories too, but the
 destination file/directory cannot exist already.
Added a new mode flag for open-output-file et al.:
 'truncate/replace tries 'truncate then 'replace
Changed initial setting of current-library-collection-paths
Unit definitions and embedded definitions are not allowed
 to shadow syntax or macro names; this restriction resolves
 all potential ambiguity resulting from shadowing syntax
Changed display for symbols containg special characters:
 the special characters are not escaped (or bar-quoted)
Changed write to use the value of (read-accept-bar-quote)
 for printing symbols containing special charaters; if
 bar qute reading is off, it is turned off for printing, too
Fixed unit/sig: correctly handles syntax where defintions in 
 the unit shadow syntactic forms
Fixed round of exact rational n/d in the case when (odd? d)
 and (= (remainder n d) (quotient d 2))
Extended exp, sin, cos, tan, log, asin, acons, atan to
 complex numbers; changed sqrt to choose the root with a
 positive real part
Removed rectangular <, >, <=, >= for complex numbers
Changed storage of loaded-library table from built into the
 `require-library' procedure to built into the current
 namespace
Added require-relative-library
Fixed error messages for +, -, etc. to show all arguments
Fixed format, fprintf, and printf: "~~" allowed at the end
 of the format string
Fixed with-handlers: predicate procedures are evaluated
 with the same exception handler as a handler procedure
Added send-event, currently only supported for MacOS
Changed MzLib's pconver.ss libraries; the print-convert-hook@
 unit was removed (along with the pchookr.ss library) and
 replaced with parameters defined in pconverr.ss for similar
 (more powerful) hooks.
Fixed interfaces for compiled-file (.zo) loading across
 MzScheme startups
Fixed bug in ports returned by make-pipe that caused
 spurious eofs
Unused interned symbols are now garbage-collected
Added support for single-precision floating points (turned
 off in default compilation)
Changed read-eval-print-loop, removing its cooperation with
 the default error escape handler; instead, it installs its
 own error escape handler
Improved the support for dynamic extensions that gives an 
 error if an extension is already loaded, or calls a
 reloading function provided by the extension (scheme_reload)
Unix images: removed constraint against using stdio before
 dumps, but images are disabled by default. Also added
 read-image-from-file procedure
MzLib functio.ss: added remv*, remq*, remove*, filter,
 assf, memf, empty, and empty?
MzLib file.ss: added remove-directory/files
MzLib constan.ss: added constant-signature-content macro
MzLib pconver.ss: added whole/fractional-exact-numbers and
 empty-list-name
MzLib pretty.ss: added pretty-print-show-inexactness
MzLib compile.ss: changed the set of compilation flags
Removed begin-expansion-time
Moved begin-elaboration-time from MzLib into MzScheme
Added MzLib library traceld.ss
MacOS: MzScheme always prompts for extra arguments, even if
  a file is dragged onto the application or a launcher program
  starts it
MacOS: Fixed problems with inexact arithmetic: inexact->exact
  for certain negative numbers and miscellaenous inf.0 and
  nan.0 problems
Windows: CYGWIN32 gcc compiler now supported
Inside MzScheme: scheme_setjmp and scheme_longjmp now
 work on values of type mz_jmp_buf instead of jmp_buf
Inside MzScheme: scheme_apply_multi and scheme_apply were
 reversed! (The _ forms where ok.)
Upgraded to gc 4.13alpha1

Version 50, August 26, 1997
Added compile-time inferrence of names for closures, classes,
  and units to improve error messages
Added inferred-name
Added file-size
Added write-image-to-file for creating heap images of a
  MzScheme program
Fixed reader to disallow . in vectors: #(1 . 2) or #(1 . (3))
Removed global-defined-signature
Fixed string->number: explicit radix in string can override
  radix argument
Bug fixed in call/cc related to dynamic-wind (see !!! in 
  tests/basic.ss)
Fixed weak hash table's accumulation of hashing buckets
Added 'empty flag for make-namespace
Added two-argument form for global-defined-value
Added system-library-subpath
Changed standalone mzscheme to return -1 if a loaded file
  or evaluated expression returns an error without the rep
Refined error messages

Version 49, May 31, 1997 
Multiple superclass inheritance is no longer supported
Added (Java-ish) interfaces to object system
class* syntax changed to accomodate interfaces and removed
  multiple superclasses
uq-ivar always takes two arguments; class is not a legal argument
uq-make-generic accepts a class or an interface
Object system exceptions changed
Added custodian system
Embedded define conventions changed: "regular" defines are only
  allowed in begin expressions and the branches of an if;
  embedded defines can appear in a begin0 expression, but not
  in the first position; defines must all appear at the beginning
  of the block
Contents of a begin expression as an immediate unit or unit/sig 
  expression are promoted to immediate expressions
case supports only R4RS syntax; a single non-list "datum" is
  no longer allowed
Removed catch; use let/ec instead
Removed vector-append
Removed load-with-cd (use load/cd)
Added load/use-compiled
Added current-load-directory parameter (set by the default load
 handler while loading a file) and load-relative (uses the
 parameter for loading a relative filename)
unit/sig's include form is like load-relative instead of load/cd
require-library uses load or load/use-compiled instead of load/cd
Windows: expand-path does not put a drive on a driveless path
  anymore; use path->complete-path instead
compile-file moved out of MzScheme into MzLib "compile.ss"; now 
  takes a single flag list argument instead of two final Booleans
current-base-parameterization parameter replaced with 
  parameterization-branch-handler parameter
Parameterizations support sharing (in addition to defaulting);
  see docs for make-parameterization-with-sharing
Added print, port print handlers, and a global port print handler
Changed the default print handler to use print instead of write
Fixed bug in ports returned by make-pipe
Fixed bug in dynamic-wind; continuation jumps into the pre-thunk
  had a non-intuitive semantics; the correct semantics is now 
  implemented and documented (also for jumps with the post-thunk)
Changed time-apply to always return a list as its first return
  value; time form can return multiple values for its expressions
format, fprintf, and printf are case-insensitive for ~ directives;
  added ~v, ~e, ~<whitespace>
Added semaphore-wait/enable-break
Added thread-running? and thread-wait
Fixed bug in threads and timed sleeping
Fixed bug in breaking a blocked thread
Fixed bug in continuations returning multiple values through a
  dynamic-wind (multiple return values could be corrupted)
Fixed arity reporting for continuations
Fixed Windows system* and read from console stdin and process*
  ports: MzScheme threads no longer blocked; ctl-c breaking works
  in stand-alone console MzScheme
process and process* now return a list of 5 values (instead of 4)
map, for-each, andmap, and ormap raise exn:application:map-arity
 when the procedure's arity does not match the number of supplied
 lists; note that (map (lambda () 10) null) now signals an error
list-ref and list-tail accept arbitrarily large indices
Type for indices changed: must be an exact integer (matches R4RS better)
  affects make-vector, vector-ref, vector-set!, make-string, string-ref, 
  string-set!, substring, and struct-ref
make-namespace's '[no-]set!-undefined and '[no-]auto-else flags
  removed; replaced with two new parameters: 
  compile-allow-set!-undefined and compile-allow-cond-fallthrough
Fixed in units: (define x y) (define y 0) x => #<undefined> instead of 
  #<void>
exn:struct's super-type field renamed struct-type for consistency
exn:i/o:filesystem:filename split into exn:i/o:filesystem:path
  and exn:i/o:filesystem:file; username exception moved under path
Unix: system no longer blocks other MzScheme threads
Unix: processes created by process and process* are not zombies forever, 
  anymore. (The SIGCHLD signal is handled appropriately.)
MacOS: dynamic extension suopport via CFM (PPC only in the distributed
  applications from PLT)
Windows: removed attempted fix for thread-blocking problem 
  when reading stdin from console
Fixed auto-flush of stdout for read of stdin
Fixed <, >, <=, >= for certain exact rational number comparisons
Fixed inexact->exact for negative inexact numbers (fractional part
  was added to the resulting number with the wrong sign)
Fixed rational? to answer #t for inexact numbers
Fixed odd?, even?, and trig functions for +inf.0 and -inf.0
Fixed handling of +nan.0 by many math routines; fixed +nan.0 for
  everything under Windows
Added R4RS rationalize
compound-unit/sig export var clause syntax now matches documentation
Added require-library-use-zo
Moved cons? and last-pair into functio.ss instead of compat.ss
Library system generalized to supoprt multiple collections;
  current-library-path replaced with current-library-collection-path
require-library now returns the result of the loaded library
Removed load-recent from MzLib's file.ss; use load/use-compiled
  instead
Added reference-library, "refer.ss" [core], "XXXr.ss" MzLib libraries
Added build-string, build-vector, build-list, loop-until to MzLib's 
  functio.ss
Added thread.ss MzLib library [core]
Added inflate.ss MzLib library
Moved synrule.ss out of core
Fixed MzLib's stringu.ss to not use macro.ss
Updated MzLib's spidey.ss, added it to core
Removed define-some, define-virtual-struct, define-struct-tree from
  MzLib's macro.ss
begin-expansion-time returns the value of the last expression
set-thread-weight! replaced with 2-argument thread-weight
Inside MzScheme: changed class/object toolbox, added custodian
  toolbox
Upgraded to gc 4.11

Version 48: Skipped to avoid confusion with Scheme48

Version 47, January 11, 1997
WARNING: multiple inhertance is going away in the next version or so
Added will executors
pretty-print-print-hook and pretty-print-size-hook now take
 three arguments: value display? port
file-position can return the current position for any port
Fixed errors reading floating-point constants due to system
 library bugs:
   Linux: strtod("0e...", ...) quits looking after "0"
   SunOS/Solaris: strtod(".3e2666666666") returned 0.0
   HP/UX: strtod(".3e2666666666") fails
Windows: fixed thread-blocking problem for reading stdin from console
Insize MzScheme: when working with "fd_set" values, use
  MZ_FD_ZERO, MZ_FD_SET, MZ_FD_CLR, MZ_FD_ISSET; use 
  scheme_get_fdset() to get the second or third fd_set in an array;
  routines for thread-blocking are now documented in "Inside MzScheme"

Version 46, December 5, 1996
unit/sig macros moved out of MzLib and into core MzScheme; 
  (require-library "unitsig.ss") is obsolete, but still supported
  as a no-op
Unit signature matching is now position-independent, and the error
  messages are better
Removed obsolete install-unit-with-signature
(begin) or (begin0) is now a syntax error
Changed class* syntax so that an explicit name for `this' is provided
MzLib's class-asi* changed to class*-asi, while adding new `this' id
Prettier(?) printing for prims like >: #<|primitive:>|>
invoke-open-unit w/o path/prefix is now the same as #f instead of ();
  the path form will probably be phased out in a future release
quasiquote syntax changed slightly
stdout/stderr are not auto-flushed for read-char or peek-char on stdin
 (still flushed by read and read-line)
Added port-display-handler and port-write-handler

Version 45, November 12, 1996
Multiple return values are agressively supported
IMPORTANT: let-values is now analogous to let; the old 
  let-values is now let*-values
let-values, letrec-values, define-values, and begin0 are primitive
define-struct and let-struct expand to new struct form
Added thread-savy parameterization system; namespace system changed
pipe changed to make-pipe, returns 2 values
Case-sensitivity for the reader is a settable parameter
Reading [] and {} as parens is a settable parameter
class* syntax extended to allow local renaming of public ivars
delay/force support multiple values
else and => in cond and else are now "scoped"
normalize-path from MzLib signals an error for bad paths
Windows: build-path can join a drive to a (driveless) absolute path
  and //machine/disk drive names are supported; also fixed 
  file-system-root-list
Added complete-path? and current-drive (for Windows)
Fixed (begin (values ...) ...) and (begin0 (values ...) ...)
Fixed comparisons between inexact and exact when the
  exact to inexact conversion results in overflow or underflow,
  and fixed (exact->inexact (/ X Y)) and (/ +inf.0 X), etc. when 
  X & Y are larger than the largest floating-point, fixed modulo,
  remainder, quotient for infinities
Fixed TCP problems (Unix, Windows) and implemented for MacOS
Fixed dynamic-loading to always search from current directory
Fixed real process idling for a timed sleep
Fixed file read/write exceptions (write exceptions now raised)
Fixed quasiquote bug with ,@ and unquoting depth
Fixed filesystem-root-list for Windows
Fixed dynamic-wind when a continuation is invoked from the post-thunk
Fixed continuations for re-entry of a continuation that is mulitply-invoked
Fixed string->number with leading spaces; e.g., (string->number " 1") 
invoke-unit import variable restriction removed (locals are allowed)
(case-lambda) is now legal
\ escapes & and \ in regexp-replace replacement string
Added regexp-replace*
Added port-read-handler
Inside MzScheme: Changed use of scheme_sleep
Inside MzScheme: Changed primitive unit init func arguments
Inside MzScheme: Changed primitive accessing of unit boxes and environment boxes
Inside MzScheme: Revoked syntax extensibility
Reimplemented the core interpreter (chained closures -> flattened)

Version 44, September 9, 1996
load, load/cd return value of last loaded expression
scheme_load returns Scheme_Object* or NULL
Built-in TCP support (Not MacOS, yet)
unit clauses macro-expanded before checking `define' keywords
Better dynamic extension handling and compilation support
Fixed read blocking threads in FreeBSD
Extensions' scheme_initialize must return Scheme_Object*
scheme_sleep has internal default for basic sleeping, installed by
 scheme_basic_env if scheme_sleep is still NULL
Unix/Winsock: fds arg for needs_wakeup and scheme_sleep expanded 
 for writes and exceptions
Fixed quotient for inexact numbers
Fixed bug comparing a bignum rational with a fixnum rational
Fixed startup crash when PATH env variable is slightly bad
Sped up thread switching for Mac
Sped up thread switching for most Unix for a small number of threads
Upgraded to gc 11alpha3

Version 43 re-released August 12, 1996 with libguile

Version 43, August 9, 1996
"functor" -> "unit"
signed units added to and used by mzlib (sigfunctors gone)
Made .zo files smaller and faster to load
Use 64-bit fixnums for Alpha
system, system*, process*, and execute* supported for Windows
Fixed memory bug in printing hexadecimal
Fix bug in modulo
Better floating-point control for infinity, nan results
 on many platforms

Version 42: June 8, 1996
Functor system added
Fixed (cond (1)), etc.
Fixed type-checking for numerical comparisons; e.g., (< 2 1 'a)
Fixed dynamic-wind and call/ec for values
Fixed read for strings containing #\nul
Non-matching cond/case raises an error
Made string=?, char=?, etc. multi-arity like numerical =, etc.
Changed definition of time-apply (returns values, now)
MzScheme threads can almost be real OS threads under Solaris, but more work
  is needed to guarantee safety for the symbol table and globals. More thread 
  systems to follow.
spawn-eval replaced by make-eval
thread-input-port, thread-output-port, and thread-error-port removed
binary-and, etc. replaced with 2's complement bitwise-and, etc.
Fixed writing compiled quoted graph expressions
Fixed return value of system
test.scm expanded and broken into multiple files: (load/cd "tests/all.ss")

Version 0.41: April 15, 1996
Revised class syntax; see the manual
Exception system added; primitive errors raise exceptions
defmacro replaced by define-macro
Added define-id-macro
Fixed let-macro shadowing local vars
Improved error messages; error-print-width
Fixed stack checking for Win32
'. no longer allowed
unquote and unquote-splicing now defined at top level
equal? supports boxes

Version 0.40: March 24, 1996
structure:X => struct:x
mzlib path uses MZLIB or PLTHOME environment variables

Version 0.39: March 6, 1996
Fixed expand-defmacro for (lambda () (and)) et al.
Fixed sqrt on complex numbers; coefficients were reversed
Cleaned up read and display/write to handle C stack overflow
Arity checking bug fixed for arity 0
Pretty-print is parameterized by depth

Version 0.38: February 22, 1996
Fixed bug in compiling frame-sharing; e.g.,
  (let ([d 0]) ((car (cons (let ([a 4]) (lambda () a)) 
			   (let ([b 7]) b)))))
 returned 7 instead of 4
Fixed bug in closing port by call-with-input-file
Fixed magnitude on negative reals
Fixed angle on negative reals
Fixed cos, sin, etc. on rationals
Fixed min and max on rationals with non-rationals
Fixed (random 0)
Fixed equal? on really long lists
Fixed list procedures with arbitrary duration: checking for break
Fixed char-X? and characters past ASCII 127
Fixed hash table bug that causes infinite internal loop
Fixed bug in reading #| |# comments at the end of a list
Filesystem utilities added
"processes" are now called "threads"; procedure names changed accordingly
eval can return multiple values; r-e-p-l handles correctly
Some changes to compilation interface:
  must set new flag is_proc_closure in compile_info rec
  scheme_static_distance changed; use flags
scheme_sleep() must now take a float
current-prompt-read added
Console version reads ~/.mzschemerc init file (or mzscheme.rc)
NO_STAT compilation flag -> NO_STAT_PROC

Version 0.37: unreleased

Version 0.36: January 18, 1996
Fixed bug in bignum multiplication

Version 0.35: January 17, 1996
current-print added
x@y notation supported
~ expanded in pathnames (Unix)
Fixed bug parsing #T, etc.
Fixed bug parsing hex numbers and others
Fixed fp-initialization bug for Win32
Better printing for special symbols

Version 0.34: December 30, 1995
Various bignum operations sped up
Chez-style symbol parsing supported (escaping \ and quoting |)

Version 0.33: December 21, 1995
rationals and complex numbers supported
make-class and make-class* syntax changed (one set of parens
  added). The old syntax is still supported for now, but you
  should convert. The old syntax will eventualy go away (and
  Zodiac will never be compatible with it).
class variables and cvar no longer allowed
ivar always takes an object; if class included, must be first
threads/processes changed w.r.t. environment used during execution
error handler split into erro displayer and error escaper
stack limitation of expander/compiler removed
expand => expand-defmacro
expand-once => expand-defmacro-once
user-break-poll => user-break-poll-handler
enable-break => break-enabled
#% now legal for starting non-keyword symbols
full floating-point input format supported

Version 0.32: December 4, 1995
Added weak boxes
+inf.0, -inf.0, -nan.0, +nan.0 constants added
Better checking when using floats as indices (vector-ref, etc.)
Better (correct!) hashing procedure
Fixed threads in Win32s/WinNT by creating a new stack
Fixed bug in spawning new (MzScheme) processes
Fixed incorrect process progress (~deadlock) analysis
Fixed bug in resizing hash table
Fixed bug in read (reading "+", "-", or "." at EOF)
Fixed bug in read-number (fractions and forcing; e.g. "../")
Fixed bug in open-output-string (> 100 chars gave empty result)
Fixed regexp-replace (memory bug)

Version 0.31: November 14, 1995
Bignum bigs: subtracting from 0, comparing negative
(current-eval) initially returned the wrong procedure
tan procedure added
putenv
S-expression graph reading and printing

Version 0.30: October 25, 1995
Added call-with-values and regexp
Unix stack-checking setup code fixed

Version 0.29: October 18, 1995
Added `arity' procedure
Bug fix related to forms such as (let ([x (let ...)]) ...)

Verion 0.28: October 3, 1995
Fixed general stack overflow-checking for Unix

Verion 0.27: September 26, 1995
Moved compilation flags from the Makefile into "sconfig.h"
More general stack overflow-checking (when needed)
Computations can overflow the stack and continue
Changed command line flags; added -r (or --script) flag
Added multiple inheritance and `rename', `share', and `local' declarations
Merged Patrick Barta's Windows DLL implementation for `load-extention'
Re-implemented `quasiquote', `and', and `or' as a macros
Re-implemented let-forms to make small `let's efficient
`let*' expands to `let'
Made core syntactic form names keywords
Added #% keywords
Added `hash-table-map' and `hash-table-for-each'
Fixed bignum bugs: `eqv?'/`equal?' and `modulo'
Fixed inexact bugs: `floor', `ceiling', and `round'
Created this "HISTORY" file

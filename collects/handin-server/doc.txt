
_Handin Server and Client_

The "handin-server" directory contains a server to be run by a course
instructor for accepting homework assignments.

The "handin-client" directory contains a client to be customized then
re-distributed to students in the course. The customized client will
embed a particular hostname and port where the server is running, as
well as a server certificate.

With a customized client, students simply install a ".plt" file --- so
there's no futzing with configuration dialogs and certificates. A
student can install any number of clients at once (assuming that the
clients are properly customized, as described below).

The result, on the student's side, is a "Handin" button in DrScheme's
toolbar. Clicking the "Handin" button allows the student to type a
password and upload the current content of the definitions and
interactions window to the course instructor's server. The "File" menu
is also extended with a "Manage..." menu item for managing a handin
account (i.e., changing the password, or creating a new account if the
instructor configures the server to allow new accounts).

On the instructor's side, the handin server can be configured to check
the student's submission before accepting it. Other configuration of
the server includes setting the list of currently active assignments
(i.e., those for which handins are accepted).

The handin process uses SSL, so it is effectively as secure as the
server and each user's password.

  NOTE: The handin tool works only with DrScheme v205, and students
  must install the "OpenSSL" extension before installing a handing
  client. The OpenSSL extension is available at
             http://www.plt-scheme.org/software/openssl/


Quick Start for a Test Drive:
============================================

 1. Create a new directory.

 2. Copy "server-cert.pem" from the "handin-client" collection
    to the new directory.
       NOTE: for real use, you need a new certificate.
       NOTE: see also "Where is the collection?", below

 3. Copy "private-key.pem" from the "handin-server" collection
    to the new directory.
       NOTE: for real use, you need a new key.

 4. Create a file "users.ss" with the following content:
       ((tester ("8fe4c11451281c094a6578e6ddbf5eed"
                 "Chester Tester"
                 "123")))

 5. Make an "active" subdirectory in your new directory.

 6. Make a "test" subdirectory in "active".

 7. In your new directory, run
        mred -mvqM handin-server
     
 8. Start DrScheme, click "Handin" to run the client, submit with
    username "tester" and password "pw".

    The submitted file will be .../active/test/tester/handin0.
 
  -------------------------------------------------------------------
 | "Where is the collection?"                                        |
 |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -|
 | If you obtained the server and client by installing a .plt file,  |
 | then the "handin-server" and "handin-client" directories          |
 | are likely in your PLT addon space:                               |
 |  Windows:                                                         |
 |   %USERPROFILE%\Application Data\PLT Scheme\<version>\collects    |
 |  Unix:                                                            |
 |   ~/.plt-scheme/<version>/collects                                |
 |  Mac OS X:                                                        |
 |   ~/Library/PLT Scheme/<version>/collects                         |
  -------------------------------------------------------------------


Client Customization
============================================

To customize the client:

  1. Rename (or make a copy of) the "handin-client" collection
     directory. The new name should describe your class more or less
     uniquely. For example, "uu-cpsc2010" is a good name for CPSC 2010
     at the University of Utah.

  2. Edit the first four definitions of "info.ss" in your renamed
     client collection:

       * For `name', choose a name for the handin tool as it will
         appear in DrScheme's interface (e.g., the "XXX" for the
         "Manage XXX..."  menu item). Again, make the name specific to
         the course, in case a student installs multiple handin tools.
         It's a good idea to use "Handin" as the last part of the
         name, as in "2010 Handin", since the button is always named
         "Handin".

       * For `collection', use the name that you chose for your
         collection directory (i.e., whatever you changed
         "handin-client" to).

       * For `server', use the hostname where the server will be
         running to accept handin submissions.

       * For `port', use the port number where the server will be
         running to accept handin submissions. (The default is
         probably fine.)

      Optionally uncomment and edit the next two definitions,
      `web-menu-name' and `web-address', to add an item to the "Help"
      menu that opens a (course-specific) web page.

   3. Replace "icon.png" in your renamed directory with a new 32x32
      icon. This icon is displayed on startup with DrScheme's splash
      screen, and it is included at half size on the "Handin"
      button. Again, choose a distinct icon for the benefit of
      students who install multiple handin tools.

   4. Replace "server-cert.pem" in your renamed directory with a
      server certificate. The file "server-cert.pem" in
      "handin-client" collection is ok for testing, but the point of
      this certificate is to make handins secure, so you should
      generate a new (self-certifying) certificate and keep its key
      private. (See server setup, below.)

   5. Run
           mzc --collection-plt <name>.plt <name>
      where <name> is the name that you chose for your directory
      (i.e., whatever you changed "handin-client" to).

   6. Distribute <name>.plt to students for installation into their
      copies of DrScheme. The students need not have access to the
      DrScheme installation directory; the tool will be installed on
      the filesystem in the student's personal space. If you want to
      install it once on a shared installation, use setup-plt with the
      --all-users flag.


Server Setup
============================================

The server must be run from a directory that is specially prepared to
host the server. This directory contains the following files and
sub-directories:

  * server-cert.pem --- the server's certificate. To create a
    ceritificate and key with openssl:

     openssl req -new -nodes -x509 -days 365 -out server-cert.pem 
                 -keyout private-key.pem 

  * private-key.pem --- the private key to go with "server-cert.pem".
    Whereas "server-cert.pem" gets distributed to students with the
    handin client, "private-key.pem" is kept private.

  * config.ss (optional) --- configuration options. The file format
    is 

         ((<key> <val>) ...)

    for the following keys:

      'session-timeout : number of seconds a session can last,
         including execution of the submit-validation function;
         the default is 300

      'max-upload : maximum size in bytes of an acceptable submission;
         the default is 500000

      'max-upload-keep : maximum index of submissions to keep; the
         most recent submission is "handin0", the next oldest is
         "handin1", next oldest is "handin2", etc.; the default is 9

      'id-regexp : a regular expression used to validate a "free form"
         user id (possibly a student id) for a created account; the
         default is #rx"^.*$"

      'id-desc : a plain-words description of the acceptable format
         for a "free form" id; the default is "anything"

      'allow-new-users : a boolean indicating whether to allow
         new-user requests from a client tool; the default is #f

  * users.ss (created if not present if a user is added) --- keeps
    the list of user accounts, along with the associated password
    (actually the MD5 hash of the password), full name, and free-form
    id (perhaps a student id at a university) of the account. The file
    format is

      ((<username-sym> (<pw-md5-str> <full-name-str> <id-str>)) ...)

    If the 'allow-new-users configuration allows new users, the
    "users.ss" file can be updated by the server with new users. It
    can always be updated by the server to change passwords.

  * active/ --- sub-directory for active assignments. A list of active
    assignments is sent to a client tool when a student clicks
    "Handin". The student then selects from the list. The list of
    active assignments is built once by the server when it starts.
    The assignments are ordered in the student's menu using `string<?',
    and the first assignment is the default selection.

    Within each directory, the student id is used for a sub-directory
    name. Within each student sub-directory are "handin0", etc., for
    each student who submits an assignment. (The most recent handin is
    called "handin0", then "handin1" is an older submission for the
    same assignment, etc.) A `checker' procedure can replace the name
    "handin" with something else (possibly sensitive to the content of
    the submission); see below for more details.

    For submissions from a normal DrScheme frame, each "handin0",
    etc. file contains a copy of the student's definitions and
    interactions windows. The file is in a binary format (to support
    non-text code), and opening the file directly in DrScheme shows
    the definitions part. To get both the defintions and interactions
    parts, the file can be parsed with `unpack-submission' from
    "utils.ss" (see below).

    For submissions from a test-suite window, the file is a normal
    test-suite file.

  * active/<assignment>/checker.ss (optional) --- a module that
    exports a `checker' function. This function receives two
    strings. The first is a username and the second is the user's
    submission as a string. (See also `unpack-submission', etc. from
    "util.ss", below.) To reject the submission, the `checker'
    function can raise an exception; the exception message will be
    relayed back to the student.

    The checker should return a string, such as "handin", to use in
    naming the submission. For submissions that require both programs
    and test suites, the checker might use `is-test-suite-submission?'
    and return "tests" if the string is a test-suite submission or
    "program" if it is not.

  * log.ss (created if not present, appended otherwise) --- records
    connections and actions, where each entry is of the form
        (id time-str msg-str)
    and `id' is an integer reprsenting the connection (numbered
    consecutively from 1 when the server starts) or 0 for a message
    for server without a connection.

The server can be run within either MzScheme or MrEd, but "utils.ss"
requires MrEd (which means that `checker' modules will likely require
the server to run under MrEd).

The server currently provides no mechanism for a graceful shutdown,
but terminiating the server is no worse than a network outage. (In
particular, no data should be lost.) To reconfigure the server (e.g.,
to change the set of active assignments), stop it and restart it.

The client and server are designed to be robust against network
problems and timeouts. The client-side tool always provides a "cancel"
button for any network transaction. For handins, "cancel" is
guaranteed to work up to the point that the client sends a "commit"
command; this command is sent only after the server is ready to record
the submission (having run it through the checker, if any), but before
the server writes the "handin0" file. Also, the server responds to a
commit with "ok" only after it has written the file. Thus, when the
client-side tool reports that the handin was successful, the report is
reliable. Meanwhile, the tool can also report successful cancels most
of the time. In the (normally brief) time between a commit and an "ok"
response, the tool gives the student a suitable warning that the
cancel is unreliable.

To minimize human error, the number of active assignments should be
limited to 1 whenever possible. When multiple assignments are active,
design a checker to help ensure that the student has selected the
correct assignment in the handin dialog.


The _utils.ss_ module provides utilities helpful in implementing
`checker' functions:

> (unpack-submission string) - returns two text% objects corresponding
  to the submitted definitions and interactions windows.

> (unpack-test-suite-submission string) - resturns a pasteboard%
  object corresponding to the submitted test-suite window. The
  pasteboard contains a sequence of editor-snip% objects, each each
  editor-snip% contains a text% with three embedded editor-snip%s: one
  for the test expression, one for the expected result, and one for
  the equality predicate.

> (is-test-suitef-submission? string) - returns #t if `string' can be
  read as a test suite, #f otherwise.

> (make-evaluator language teachpack-paths) - returns a function of
  one argument for evaluating expressions in the designated teaching
  language, one of 'beginner, 'beginner-abbr, 'intermediate,
  'intermediate-lambda, or 'advanced. The `teachpack-paths' list
  contains paths to teachpacks to load in the evaluator.

  The actual evaluation of expressions happens in a separate
  eventspace and namespace.

> (evaluate-all source input-port eval) - like `load' on and input
  ports.

> (evaluate-submission string eval) - like `load' on a non-test-suite
  submission string.

(load-relative "sig.ss")
;(require-library "mred-interfaces.ss" "framework")
(require-library "frameworks.ss" "framework")

(compound-unit/sig
  (import)
  (link
   (F : mzlib:function^ (mzlib:function@))
   (STRING : mzlib:string^ (mzlib:string@))
   (CORE : mzlib:core^ ((require-library "corer.ss")))
   (FILE : mzlib:file^ (mzlib:file@ STRING F))
   ;(MRED : mred-interfaces^ (mred-interfaces@))
   (MRED : mred^ (mred@))
   (FRAME : framework^ ((require-library "frameworkr.ss" "framework") CORE MRED))
   (JVM : jvm^ (jvm@))
   (Q : queue^ ((load-relative "queue.ss")))
   (GJC : gjc^ ((load-relative "gjc.ss") JVM (GT : error^)))
   (SCAN : scanner^ ((load-relative "scanner.ss") JVM GJC Q))
   (SPLIT : split^ ((load-relative "split.ss") JVM Q GJC SCAN F FILE))
   (REPL : repl^ ((load-relative "repl.ss") JVM SCAN Q GJC SPLIT F))
   (GOOBER : goober^ ((load-relative "goober.ss") MRED))
   (GT : gui-text^ ((load-relative "gui-text.ss") MRED REPL JVM SCAN SPLIT GJC GOOBER FILE))
   (GUI : gui^ ((load-relative "gui-frame.ss") FRAME GT MRED F))
   (CH : channel^ ((load-relative "channel.ss") Q))
   (IN : () ((load-relative "input-gui.ss") JVM MRED FRAME CH))
   (AWT : () ((load-relative "awt.ss") JVM MRED)))
  (export (open GUI)))

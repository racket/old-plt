{ (define LIBNAME "Composing Images")
  (define FILENAME "image.ss")
  (include "head.tinc") }

This teachpack provides primitives for constructing and
manipulating images.

These functions create basic shapes. The mode can be either
<code>'solid</code>, meaning the shape is filled in, or
<code>'outline</code>, meaning the shape is hollow. Colors
can be either strings, symbols, or color structs (see
below).

<menu>
<li><code>{(idx rectangle)}</code> :  int int mode image-color -> image <br>
 to create an image of a rectangle using the given width, height, mode, and color
<li><code>{(idx circle)}</code> : int mode image-color -> image <br>
 to create an image of a circle using the given radius, mode, and color
<li><code>{(idx ellipse)}</code> : int int mode image-color -> image <br>
 to create an image of an ellipse using the given width, height, and color
<li><code>{(idx triangle)}</code> : int mode iamge-color -> image <br>
 to create an equilateral triangle using the given edge size and color
<li><code>{(idx line)}</code> : int int image-color -> image <br>
 to create an image with a colored line from (0,0) to the point with the given coordinates
<li><code>{(idx add-line)}</code> : image int int int int image-color -> image <br>
 to add a line to an existing image, drawn between the two given points
<li><code>{(idx text)}</code> : string size image-color -> image <br>
 to create an image from the given string, point size, and background color
</menu> 

These functions build more complex images from the basic
shapes.  When two images are laid on top of each other, the
are lined up at their <i>pinhole</i>. Most shapes have their
pinholes right in the middle. The exceptions are
<code>text</code> and <code>line</code> which have their
pinholes in the top-left corner.
<menu>
<li><code>{(idx overlay)}</code> : image image image ... -> image <br> 
 to add the pixels of the second image onto the first image, lining up the pinholes
<li><code>{(idx overlay/xy)}</code> :  image int int image -> image <br>
 to add the pixels of the second image onto the first image, lining up down and to the right of the first image's pinhole
</menu>

After an image has been built up using overlays, it is
possible to recover the position of the pieces of the image,
using the next two functions.
<menu>
<li><code>{(idx image-inside?)}</code> : image image -> boolean <br>
 to determine whether the pixels of the second image appear in the first
<li><code>{(idx find-image)}</code> : image image -> posn <br>
 to determine where the pixels of the second image appear in the first
</menu>

The rest of this teachpack are supplementary functions for
manipulating images and colors.

<menu>
<li><code>{(idx image-color?)}</code> :  anything -> boolean <br>
 to determine if the input names a valid color.

<li><code>{(idx image-width)}</code> :  image -> number <br>
 to obtain an image's width in pixels
<li><code>{(idx image-height)}</code> :  image -> number <br>
 to obtain an image's height in pixels
 
<li><code>{(idx image->color-list)}</code> : image -> list-of-color <br>
 to convert an image to a list of colors
<li><code>{(idx color-list->image)}</code> : list-of-color int int int int -> image <br>
 to convert a list of colors to an image with the given width and height
 
<li><code>{(idx make-color)}</code> : int int int -> color <br>
 to construct a color
<li><code>{(idx color?)}</code> : anything -> boolean <br>
 to determine if its input is a color
<li><code>{(idx color-red)}</code> : color -> int <br>
 to extract the red component of a color
<li><code>{(idx color-green)}</code> : color -> int <br>
 to extract the green component of a color
<li><code>{(idx color-blue)}</code> : color -> int <br>
 to extract the blue component of a color
 
<li><code>{(idx image->alpha-color-list)}</code> : image -> list-of-alpha-color <br>
 to convert an image to a list of alpha colors
<li><code>{(idx alpha-color-list->image)}</code> : list-of-alpha-color int int -> image <br>
 to convert a list of alpha colors to an image with the given width and height"

<li><code>{(idx make-alpha-color)}</code> : int int int int -> color <br>
 to construct an alpha color
<li><code>{(idx alpha-color?)}</code> : anything -> boolean <br>
 to determine if its input is a color
<li><code>{(idx alpha-color-alpha)}</code> : color -> int <br>
 to extract the alpha value of a color
<li><code>{(idx alpha-color-red)}</code> : color -> int <br>
 to extract the red component of a color
<li><code>{(idx alpha-color-green)}</code> : color -> int <br>
 to extract the green component of a color
<li><code>{(idx alpha-color-blue)}</code> : color -> int <br>
 to extract the blue component of a color"
</menu>

{(include "foot.tinc")}


{(include "foot.tinc")}

_Web-server_ Collection
=======================

The Web server collection provides a launcher named "web-server" that
optionally accepts one argument specifying what port to listen for requests
on.  The default is port 80, the standard HTTP port.

To use the _Web_ _server_, require web-server.ss:
  (require (lib "web-server.ss" "web-server"))

This provides one main function:
> serve : [nat] [(str -> host)] [nat] -> (-> void)
  (define (serve port virtual-hosts max-wait) ...)
  
  It starts the server, where port specifies an alternate port for the server
  to listen on besides 80 and max-wait lets the caller specify a maximum number
  of clients that can wait for a TCP connection other than the default of 40.
  The virtual-hosts function maps host names, which may or may not include a
  colon followed by a port number, to a directory name.  The result of invoking
  serve is a thunk that shuts down the server.

[FIX: what is a host structure?]

A later section decribes the remaining functions for the deveopment environment.


Serving Content
===============

By default, the Web server serves files out of the directory
(build-path (collection-path "web-server") "default-web-root" "htdocs"),
unless the function serve was called with a virtual-hosts argument or
the configuration tool modified the location.

Files in a subdirectory named "servlets" are (by default) executed instead of
served out verbatim.  Each file in that directory must evaluate to a servlet.
A servlet is a unit/sig that imports servlet^ and exports nothing.
To construct a unit/sig with the appropraite imports, the servlet must require
the two modules providing unit/sigs and the servlet^ signature:

  (require (lib "unitsig.ss")
	   (lib "servlet-sig.ss" "web-server"))

The last value in the unit/sig must be a response.

A response is either
  - an X-expression representing the response to the http request
  - a (cons mime-type (listof content)) where
    mime-type is a string and
    content are strings.
  - (make-response/full code message seconds mime extras body) where 
    - code is a natural number indicating the http response code
    - message is a string describing the code to a human
    - seconds is a natural number indicating the time the resource was
      created.  Use (current-seconds) for dynamically created responses.
    - mime is a string indicating the response type, usually  "text/html".
    - extras is a (listof (cons sym str)) containing extra headers
      for redirects, authentication, or cookies.
    - body is a (listof str)
    
The path part of URLs for servlets not in an association list is simply the
path to the file.  The path part of URLs referring to servlets inside
association lists is the path to the file followed by the symbol used as a key
in the association list.

Evaluating (require (lib "servlet-sig.ss" "web-server")) loads the servlet^
signature consisting of the following imports:

 - initial-request : request
   where a request is 
     (make-request method uri headers bindings host-ip client-ip)
     where
       method is either 'get or 'post
       uri is a URL---see the net collection for details
       headers : (listof (cons sym str))
	 optional http headers for this request
       bindings : (listof (cons sym str))
	 name value pairs from the form submitted or the query part of the URL.
       host-ip is a string representing the Internet address of the server.
               This may differ for different requests if the machine has
	       multiple network interfaces including local loopbacks.
       client-ip is the Internet address the request came from.  It could
                 refer to a proxy instead of the end user's machine.

The above import supports traditional servlet style request handling.  Usually,
the only one of interest is bindings.  To ease the development of more
interactive servlets, the servlet^ signature also contains the following
functions:

> send/suspend : (str -> response) -> request

  The argument, a function that consumes a string, is given a URL that
  can be used in the document.  The argument function must produce a
  response corresponding to the document's body.  Requests to the
  given URL resume the computation at the point send/suspend was
  invoked.  Thus, the argument function normally produces an HTML form
  with the "action" attribute set to the provided URL.  The result of
  send/suspend represents the next request.

> send/finish : response -> doesn't
  This provides a convenient way to report an error or otherwise produce
  a final response.  Once called, all URLs generated by send/suspend
  become invalid.  Calling send/finish allows the system to reclaim resources
  consumed by the servlet.

> adjust-timeout! : nat -> void
  The server will shutdown each instance of a servlet after an unspecified
  default amount of time since the last time the servlet handled a request.
  Calling adjust-timeout! allows the programmer to choose this number of
  seconds.  Larger numbers consume more resources while smaller numbers force
  the user to restart computations more often.

Another module available by requiring
  (lib "servlet-helpers.ss" "web-server")
provides a few additional functions helpful for constructing servlets:

> extract-binding/single : sym (listof (cons sym str)) -> str
  This extracts a single value associated with sym in the form bindings.
  If multiple or zero values are associated with the name, it raises an
  exception.

> extract-bindings : sym (listof (cons sym str)) -> (listof str)
  returns a list of values assocaited with the name sym.

> extract-user-pass : (listof (cons sym str)) -> (U #f (cons str str))
  (define (extract-user-pass headers) ...)
  Servlets may easily implement password based authentication by extracting
  password information from the HTTP headers.  The return value is either a
  pair consisting of the username and password from the headers or #f if no
  password was provided.


For small example servlets, look in the "examples" directory in
the "servlets" directory in the "default-web-root" of the web-server
collection.

Special URLs
============

The Web server caches passwords and servlets for performance reasons.
Requesting the URL
  http://my-host/conf/refresh-passwords
reloads the password file.  After updating a servlet, loading the URL
  http://my-host/conf/refresh-servlets
causes the server to reload each servlet on the next invocation.
A future extension mechanism should refresh only specified programs, since
reloading servlets loses any per-program state computed before the unit
invocation.    

Semi-Internal Functions
=======================

The following functions expose more of the Web server for use by the
development enviornment.  They are not intended for general use.
They may change at anytime or disappear entirely.

> server-loop : custodian tcp-listener config -> void
  where custodian is the parent custodian for servlets.
	tcp-listener is where requests arrive.
	config encapsulates most of the state of the server.

> make-config : host-table script-table instance-table access-table -> config
  where
    config = (make-config host-table script-table instance-table access-table)
    host-table = str -> host
		 maps host names to hosts
    script-table = (hash-table-of sym script)
		 maps servlet names to servlet units
    script = (unit servlet^ -> response)
	     represents a servlet that is invoked on each request
    instance-table = (hash-table-of sym servlet-instance)
		     maps the path part of a URL to the running servlet
    access-table = (hash-table-of sym (str sym str -> (U #f str)))
		   maps host names to functions that accept a protection
		   domain, a user name, and a password and either 
		   return #f if access is not denied (i.e. is accessble)
		   or a string prompting for a particular password
		   (i.e. "Course Grades").
    servlet-instance =
      (make-servlet-instance
        nat channel (hash-table-of sym (continuation request)))
      The natural number counts the continuations suspended by this servlet.  
      The channel communicates HTTP requests from the connection thread to
      the suspended servlet.  The hash-table maps parameter parts of URLs
      to suspended continuations.

> add-new-instance : sym instance-table -> void
  This creates a new servlet-instance and installs it in the instance-table
  under the name specified by sym.

> gen-send/suspend : url sym instance-table (response -> void) (-> void)
                     (channel -> void)
                  -> (str -> response)
                  -> request
  (define (gen-send/suspend uri invoke-id instances output-page
                            update-time! update-channel!)
    ...)

  This produces a function like send/suspend : ((str -> response) -> request),
  customized for a particular instance of a servlet.  The uri must 
  refer to the servlet, which instances must map invoke-id to.  The
  output-page function is called to send responses to the Web browser
  (remotely via HTTP in the normal server, locally via some other means
   in the development environment).  gen-send/suspend calls update-time! 
  (to reset timeouts) upon each Web request.  update-channel! receives the
  channel used to send responses to the connection thread.

/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_madm.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_media.h"
#include "wx_frame.h"
#include "wx_panel.h"





#include "wxscheme.h"
#include "wxs_madm.h"
#include "wxscomon.h"


#include "wxs_obj.h"


static Scheme_Object *style_wxMCANVAS_NO_H_SCROLL_sym = NULL;
static Scheme_Object *style_wxMCANVAS_NO_V_SCROLL_sym = NULL;
static Scheme_Object *style_wxMCANVAS_HIDE_H_SCROLL_sym = NULL;
static Scheme_Object *style_wxMCANVAS_HIDE_V_SCROLL_sym = NULL;

static void init_symset_style(void) {
  style_wxMCANVAS_NO_H_SCROLL_sym = scheme_intern_symbol("mcanvas-no-h-scroll");
  style_wxMCANVAS_NO_V_SCROLL_sym = scheme_intern_symbol("mcanvas-no-v-scroll");
  style_wxMCANVAS_HIDE_H_SCROLL_sym = scheme_intern_symbol("mcanvas-hide-h-scroll");
  style_wxMCANVAS_HIDE_V_SCROLL_sym = scheme_intern_symbol("mcanvas-hide-v-scroll");
}

static int unbundle_symset_style(Scheme_Object *v, const char *where) {
  if (!style_wxMCANVAS_HIDE_V_SCROLL_sym) init_symset_style();
  Scheme_Object *i, *l = v;
  long result = 0;
  while (SCHEME_PAIRP(l)) {
  i = SCHEME_CAR(l);
  if (0) { }
  else if (i == style_wxMCANVAS_NO_H_SCROLL_sym) { result = result | wxMCANVAS_NO_H_SCROLL; }
  else if (i == style_wxMCANVAS_NO_V_SCROLL_sym) { result = result | wxMCANVAS_NO_V_SCROLL; }
  else if (i == style_wxMCANVAS_HIDE_H_SCROLL_sym) { result = result | wxMCANVAS_HIDE_H_SCROLL; }
  else if (i == style_wxMCANVAS_HIDE_V_SCROLL_sym) { result = result | wxMCANVAS_HIDE_V_SCROLL; }
  else { break; } 
  l = SCHEME_CDR(l);
  }
  if (SCHEME_NULLP(l)) return result;
  if (where) scheme_wrong_type(where, "style symbol list", -1, 0, &v);
  return 0;
}

static int istype_symset_style(Scheme_Object *v, const char *where) {
  if (!style_wxMCANVAS_HIDE_V_SCROLL_sym) init_symset_style();
  Scheme_Object *i, *l = v;
  long result = 1;
  while (SCHEME_PAIRP(l)) {
  i = SCHEME_CAR(l);
  if (0) { }
  else if (i == style_wxMCANVAS_NO_H_SCROLL_sym) { ; }
  else if (i == style_wxMCANVAS_NO_V_SCROLL_sym) { ; }
  else if (i == style_wxMCANVAS_HIDE_H_SCROLL_sym) { ; }
  else if (i == style_wxMCANVAS_HIDE_V_SCROLL_sym) { ; }
  else { break; } 
  l = SCHEME_CDR(l);
  }
  if (SCHEME_NULLP(l)) return result;
  if (where) scheme_wrong_type(where, "style symbol list", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_style(int v) {
  if (!style_wxMCANVAS_HIDE_V_SCROLL_sym) init_symset_style();
  Scheme_Object *l = scheme_null;
  if (v & wxMCANVAS_NO_H_SCROLL) l = scheme_make_pair(style_wxMCANVAS_NO_H_SCROLL_sym, l);
  if (v & wxMCANVAS_NO_V_SCROLL) l = scheme_make_pair(style_wxMCANVAS_NO_V_SCROLL_sym, l);
  if (v & wxMCANVAS_HIDE_H_SCROLL) l = scheme_make_pair(style_wxMCANVAS_HIDE_H_SCROLL_sym, l);
  if (v & wxMCANVAS_HIDE_V_SCROLL) l = scheme_make_pair(style_wxMCANVAS_HIDE_V_SCROLL_sym, l);
  return l;
}



static Scheme_Object *bufferType_wxEDIT_BUFFER_sym = NULL;
static Scheme_Object *bufferType_wxPASTEBOARD_BUFFER_sym = NULL;

static void init_symset_bufferType(void) {
  bufferType_wxEDIT_BUFFER_sym = scheme_intern_symbol("edit-buffer");
  bufferType_wxPASTEBOARD_BUFFER_sym = scheme_intern_symbol("pasteboard-buffer");
}

static int unbundle_symset_bufferType(Scheme_Object *v, const char *where) {
  if (!bufferType_wxPASTEBOARD_BUFFER_sym) init_symset_bufferType();
  if (0) { }
  else if (v == bufferType_wxEDIT_BUFFER_sym) { return wxEDIT_BUFFER; }
  else if (v == bufferType_wxPASTEBOARD_BUFFER_sym) { return wxPASTEBOARD_BUFFER; }
  if (where) scheme_wrong_type(where, "bufferType symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_bufferType(Scheme_Object *v, const char *where) {
  if (!bufferType_wxPASTEBOARD_BUFFER_sym) init_symset_bufferType();
  if (0) { }
  else if (v == bufferType_wxEDIT_BUFFER_sym) { return 1; }
  else if (v == bufferType_wxPASTEBOARD_BUFFER_sym) { return 1; }
  if (where) scheme_wrong_type(where, "bufferType symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_bufferType(int v) {
  if (!bufferType_wxPASTEBOARD_BUFFER_sym) init_symset_bufferType();
  switch (v) {
  case wxEDIT_BUFFER: return bufferType_wxEDIT_BUFFER_sym;
  case wxPASTEBOARD_BUFFER: return bufferType_wxPASTEBOARD_BUFFER_sym;
  default: return NULL;
  }
}


static Scheme_Object *fileType_wxMEDIA_FF_GUESS_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_STD_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_TEXT_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_SAME_sym = NULL;
static Scheme_Object *fileType_wxMEDIA_FF_COPY_sym = NULL;

static void init_symset_fileType(void) {
  fileType_wxMEDIA_FF_GUESS_sym = scheme_intern_symbol("media-ff-guess");
  fileType_wxMEDIA_FF_STD_sym = scheme_intern_symbol("media-ff-std");
  fileType_wxMEDIA_FF_TEXT_sym = scheme_intern_symbol("media-ff-text");
  fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym = scheme_intern_symbol("media-ff-text-force-cr");
  fileType_wxMEDIA_FF_SAME_sym = scheme_intern_symbol("media-ff-same");
  fileType_wxMEDIA_FF_COPY_sym = scheme_intern_symbol("media-ff-copy");
}

static int unbundle_symset_fileType(Scheme_Object *v, const char *where) {
  if (!fileType_wxMEDIA_FF_COPY_sym) init_symset_fileType();
  if (0) { }
  else if (v == fileType_wxMEDIA_FF_GUESS_sym) { return wxMEDIA_FF_GUESS; }
  else if (v == fileType_wxMEDIA_FF_STD_sym) { return wxMEDIA_FF_STD; }
  else if (v == fileType_wxMEDIA_FF_TEXT_sym) { return wxMEDIA_FF_TEXT; }
  else if (v == fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym) { return wxMEDIA_FF_TEXT_FORCE_CR; }
  else if (v == fileType_wxMEDIA_FF_SAME_sym) { return wxMEDIA_FF_SAME; }
  else if (v == fileType_wxMEDIA_FF_COPY_sym) { return wxMEDIA_FF_COPY; }
  if (where) scheme_wrong_type(where, "fileType symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_fileType(Scheme_Object *v, const char *where) {
  if (!fileType_wxMEDIA_FF_COPY_sym) init_symset_fileType();
  if (0) { }
  else if (v == fileType_wxMEDIA_FF_GUESS_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_STD_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_TEXT_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_SAME_sym) { return 1; }
  else if (v == fileType_wxMEDIA_FF_COPY_sym) { return 1; }
  if (where) scheme_wrong_type(where, "fileType symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_fileType(int v) {
  if (!fileType_wxMEDIA_FF_COPY_sym) init_symset_fileType();
  switch (v) {
  case wxMEDIA_FF_GUESS: return fileType_wxMEDIA_FF_GUESS_sym;
  case wxMEDIA_FF_STD: return fileType_wxMEDIA_FF_STD_sym;
  case wxMEDIA_FF_TEXT: return fileType_wxMEDIA_FF_TEXT_sym;
  case wxMEDIA_FF_TEXT_FORCE_CR: return fileType_wxMEDIA_FF_TEXT_FORCE_CR_sym;
  case wxMEDIA_FF_SAME: return fileType_wxMEDIA_FF_SAME_sym;
  case wxMEDIA_FF_COPY: return fileType_wxMEDIA_FF_COPY_sym;
  default: return NULL;
  }
}


static Scheme_Object *focus_wxFOCUS_IMMEDIATE_sym = NULL;
static Scheme_Object *focus_wxFOCUS_DISPLAY_sym = NULL;
static Scheme_Object *focus_wxFOCUS_GLOBAL_sym = NULL;

static void init_symset_focus(void) {
  focus_wxFOCUS_IMMEDIATE_sym = scheme_intern_symbol("focus-immediate");
  focus_wxFOCUS_DISPLAY_sym = scheme_intern_symbol("focus-display");
  focus_wxFOCUS_GLOBAL_sym = scheme_intern_symbol("focus-global");
}

static int unbundle_symset_focus(Scheme_Object *v, const char *where) {
  if (!focus_wxFOCUS_GLOBAL_sym) init_symset_focus();
  if (0) { }
  else if (v == focus_wxFOCUS_IMMEDIATE_sym) { return wxFOCUS_IMMEDIATE; }
  else if (v == focus_wxFOCUS_DISPLAY_sym) { return wxFOCUS_DISPLAY; }
  else if (v == focus_wxFOCUS_GLOBAL_sym) { return wxFOCUS_GLOBAL; }
  if (where) scheme_wrong_type(where, "focus symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_focus(Scheme_Object *v, const char *where) {
  if (!focus_wxFOCUS_GLOBAL_sym) init_symset_focus();
  if (0) { }
  else if (v == focus_wxFOCUS_IMMEDIATE_sym) { return 1; }
  else if (v == focus_wxFOCUS_DISPLAY_sym) { return 1; }
  else if (v == focus_wxFOCUS_GLOBAL_sym) { return 1; }
  if (where) scheme_wrong_type(where, "focus symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_focus(int v) {
  if (!focus_wxFOCUS_GLOBAL_sym) init_symset_focus();
  switch (v) {
  case wxFOCUS_IMMEDIATE: return focus_wxFOCUS_IMMEDIATE_sym;
  case wxFOCUS_DISPLAY: return focus_wxFOCUS_DISPLAY_sym;
  case wxFOCUS_GLOBAL: return focus_wxFOCUS_GLOBAL_sym;
  default: return NULL;
  }
}


static Scheme_Object *caret_wxSNIP_DRAW_NO_CARET_sym = NULL;
static Scheme_Object *caret_wxSNIP_DRAW_SHOW_CARET_sym = NULL;
static Scheme_Object *caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym = NULL;

static void init_symset_caret(void) {
  caret_wxSNIP_DRAW_NO_CARET_sym = scheme_intern_symbol("snip-draw-no-caret");
  caret_wxSNIP_DRAW_SHOW_CARET_sym = scheme_intern_symbol("snip-draw-show-caret");
  caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym = scheme_intern_symbol("snip-draw-show-inactive-caret");
}

static int unbundle_symset_caret(Scheme_Object *v, const char *where) {
  if (!caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) init_symset_caret();
  if (0) { }
  else if (v == caret_wxSNIP_DRAW_NO_CARET_sym) { return wxSNIP_DRAW_NO_CARET; }
  else if (v == caret_wxSNIP_DRAW_SHOW_CARET_sym) { return wxSNIP_DRAW_SHOW_CARET; }
  else if (v == caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) { return wxSNIP_DRAW_SHOW_INACTIVE_CARET; }
  if (where) scheme_wrong_type(where, "caret symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_caret(Scheme_Object *v, const char *where) {
  if (!caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) init_symset_caret();
  if (0) { }
  else if (v == caret_wxSNIP_DRAW_NO_CARET_sym) { return 1; }
  else if (v == caret_wxSNIP_DRAW_SHOW_CARET_sym) { return 1; }
  else if (v == caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) { return 1; }
  if (where) scheme_wrong_type(where, "caret symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_caret(int v) {
  if (!caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym) init_symset_caret();
  switch (v) {
  case wxSNIP_DRAW_NO_CARET: return caret_wxSNIP_DRAW_NO_CARET_sym;
  case wxSNIP_DRAW_SHOW_CARET: return caret_wxSNIP_DRAW_SHOW_CARET_sym;
  case wxSNIP_DRAW_SHOW_INACTIVE_CARET: return caret_wxSNIP_DRAW_SHOW_INACTIVE_CARET_sym;
  default: return NULL;
  }
}


static void *DoCAPOCallback(void *data)
{
  jmp_buf savebuf;
  void *r;

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf))
    r = (void *)scheme_apply_multi((Scheme_Object *)data, 0, NULL);
  else
    r = (void *)scheme_false;

  COPY_JMPBUF(scheme_error_buf, savebuf);

  return r;
}

typedef void *(*CAPOFunc)(void*);




















class os_wxMediaCanvas : public wxMediaCanvas {
 public:

  os_wxMediaCanvas(Scheme_Object * obj, class wxFrame* x0, int x1 = -1, int x2 = -1, int x3 = -1, int x4 = -1, string x5 = "", int x6 = 0, int x7 = 100, class wxMediaBuffer* x8 = NULL);
  os_wxMediaCanvas(Scheme_Object * obj, class wxPanel* x0, int x1 = -1, int x2 = -1, int x3 = -1, int x4 = -1, string x5 = "", int x6 = 0, int x7 = 100, class wxMediaBuffer* x8 = NULL);
  ~os_wxMediaCanvas();
  void OnChar(class wxKeyEvent& x0);
  void OnEvent(class wxMouseEvent& x0);
  void OnPaint();
  Bool PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1);
  Bool PreOnChar(class wxWindow* x0, class wxKeyEvent* x1);
  void OnSize(int x0, int x1);
  void OnSetFocus();
  void OnKillFocus();
};

Scheme_Object *os_wxMediaCanvas_class;

os_wxMediaCanvas::os_wxMediaCanvas(Scheme_Object * o, class wxFrame* x0, int x1, int x2, int x3, int x4, string x5, int x6, int x7, class wxMediaBuffer* x8)
: wxMediaCanvas(x0, x1, x2, x3, x4, x5, x6, x7, x8)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMediaCanvas::os_wxMediaCanvas(Scheme_Object * o, class wxPanel* x0, int x1, int x2, int x3, int x4, string x5, int x6, int x7, class wxMediaBuffer* x8)
: wxMediaCanvas(x0, x1, x2, x3, x4, x5, x6, x7, x8)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMediaCanvas::~os_wxMediaCanvas()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxMediaCanvas::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaCanvas_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaCanvas::OnChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaCanvas::OnEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaCanvas_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaCanvas::OnEvent(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaCanvas::OnPaint()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaCanvas_class, "on-paint", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaCanvas::OnPaint();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaCanvas::PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaCanvas_class, "pre-on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxMouseEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-canvas%::pre-on-event"", extracting return value");
  }
}

Bool os_wxMediaCanvas::PreOnChar(class wxWindow* x0, class wxKeyEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaCanvas_class, "pre-on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxKeyEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-canvas%::pre-on-char"", extracting return value");
  }
}

void os_wxMediaCanvas::OnSize(int x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaCanvas_class, "on-size", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaCanvas::OnSize(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaCanvas::OnSetFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaCanvas_class, "on-set-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaCanvas::OnSetFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaCanvas::OnKillFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaCanvas_class, "on-kill-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaCanvas::OnKillFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "wx:media-canvas%::on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxMediaCanvas::OnChar(*x0);
  else
    ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "wx:media-canvas%::on-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxMediaCanvas::OnEvent(*x0);
  else
    ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasOnPaint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxMediaCanvas::OnPaint();
  else
    ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnPaint();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasPreOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxMouseEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "wx:media-canvas%::pre-on-event", 0);
  x1 = objscheme_unbundle_wxMouseEvent(p[1], "wx:media-canvas%::pre-on-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnEvent(x0, x1);
  else
    r = ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->PreOnEvent(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasPreOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxKeyEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "wx:media-canvas%::pre-on-char", 0);
  x1 = objscheme_unbundle_wxKeyEvent(p[1], "wx:media-canvas%::pre-on-char", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnChar(x0, x1);
  else
    r = ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->PreOnChar(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasOnSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-canvas%::on-size");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-canvas%::on-size");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxMediaCanvas::OnSize(x0, x1);
  else
    ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnSize(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasOnSetFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxMediaCanvas::OnSetFocus();
  else
    ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnSetFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasOnKillFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->wxMediaCanvas::OnKillFocus();
  else
    ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->OnKillFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasCallAsPrimaryOwner(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  void* r;
  objscheme_check_valid(obj);
  CAPOFunc x0;
  void* x1;

  
  x0 = DoCAPOCallback;
  x1 = p[0];

  
  r = ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->CallAsPrimaryOwner(x0, x1);

  
  
  return (Scheme_Object*)r;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasSetLazyRefresh(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-canvas%::set-lazy-refresh");

  
  ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetLazyRefresh(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasGetLazyRefresh(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetLazyRefresh();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasScrollWithBottomBase(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-canvas%::scroll-with-bottom-base");

  
  ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->ScrollWithBottomBase(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasAllowScrollToLast(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-canvas%::allow-scroll-to-last");

  
  ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->AllowScrollToLast(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasForceDisplayFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-canvas%::force-display-focus");

  
  ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->ForceDisplayFocus(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasIsFocusOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->IsFocusOn();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasGetMedia(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaBuffer* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->GetMedia();

  
  
  return objscheme_bundle_wxMediaBuffer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvasSetMedia(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaBuffer* x0;
  Bool x1;

  
  x0 = objscheme_unbundle_wxMediaBuffer(p[0], "wx:media-canvas%::set-media", 1);
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-canvas%::set-media");
  } else
    x1 = TRUE;

  
  ((wxMediaCanvas *)((Scheme_Class_Object *)obj)->primdata)->SetMedia(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaCanvas_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMediaCanvas *realobj;
  if ((n >= 1) && objscheme_istype_wxPanel(p[0], NULL, 0)) {
    class wxPanel* x0;
    int x1;
    int x2;
    int x3;
    int x4;
    string x5;
    int x6;
    int x7;
    class wxMediaBuffer* x8;

    
    if ((n < 1) ||(n > 9)) 
      scheme_wrong_count("wx:media-canvas%::initialization (panel case)", 1, 9, n, p);
    x0 = objscheme_unbundle_wxPanel(p[0], "wx:media-canvas%::initialization (panel case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:media-canvas%::initialization (panel case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:media-canvas%::initialization (panel case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:media-canvas%::initialization (panel case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_integer(p[4], "wx:media-canvas%::initialization (panel case)");
    } else
      x4 = -1;
    if (n > 5) {
      x5 = (string)objscheme_unbundle_string(p[5], "wx:media-canvas%::initialization (panel case)");
    } else
      x5 = "";
    if (n > 6) {
      x6 = unbundle_symset_style(p[6], "wx:media-canvas%::initialization (panel case)");;
    } else
      x6 = 0;
    if (n > 7) {
      x7 = objscheme_unbundle_integer(p[7], "wx:media-canvas%::initialization (panel case)");
    } else
      x7 = 100;
    if (n > 8) {
      x8 = objscheme_unbundle_wxMediaBuffer(p[8], "wx:media-canvas%::initialization (panel case)", 1);
    } else
      x8 = NULL;

    if (!x3) x3 = -1;if (!x4) x4 = -1;
    realobj = new os_wxMediaCanvas(obj, x0, x1, x2, x3, x4, x5, x6, x7, x8);
    
    
  } else  {
    class wxFrame* x0;
    int x1;
    int x2;
    int x3;
    int x4;
    string x5;
    int x6;
    int x7;
    class wxMediaBuffer* x8;

    
    if ((n < 1) ||(n > 9)) 
      scheme_wrong_count("wx:media-canvas%::initialization (frame case)", 1, 9, n, p);
    x0 = objscheme_unbundle_wxFrame(p[0], "wx:media-canvas%::initialization (frame case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:media-canvas%::initialization (frame case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:media-canvas%::initialization (frame case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:media-canvas%::initialization (frame case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_integer(p[4], "wx:media-canvas%::initialization (frame case)");
    } else
      x4 = -1;
    if (n > 5) {
      x5 = (string)objscheme_unbundle_string(p[5], "wx:media-canvas%::initialization (frame case)");
    } else
      x5 = "";
    if (n > 6) {
      x6 = unbundle_symset_style(p[6], "wx:media-canvas%::initialization (frame case)");;
    } else
      x6 = 0;
    if (n > 7) {
      x7 = objscheme_unbundle_integer(p[7], "wx:media-canvas%::initialization (frame case)");
    } else
      x7 = 100;
    if (n > 8) {
      x8 = objscheme_unbundle_wxMediaBuffer(p[8], "wx:media-canvas%::initialization (frame case)", 1);
    } else
      x8 = NULL;

    if (!x3) x3 = -1;if (!x4) x4 = -1;
    realobj = new os_wxMediaCanvas(obj, x0, x1, x2, x3, x4, x5, x6, x7, x8);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxMediaCanvas(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:media-canvas%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:media-canvas%");
}

void objscheme_setup_wxMediaCanvas(void *env)
{
if (os_wxMediaCanvas_class) {
    objscheme_add_global_class(os_wxMediaCanvas_class,  "wx:media-canvas%", env);
} else {
  os_wxMediaCanvas_class = objscheme_def_prim_class(env, "wx:media-canvas%", "wx:canvas%", os_wxMediaCanvas_ConstructScheme, 18);

  scheme_add_method_w_arity(os_wxMediaCanvas_class,"get-class-name",objscheme_classname_os_wxMediaCanvas, 0, 0);

 scheme_add_method_w_arity(os_wxMediaCanvas_class, "on-char", os_wxMediaCanvasOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "on-event", os_wxMediaCanvasOnEvent, 1, 1);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "on-paint", os_wxMediaCanvasOnPaint, 0, 0);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "pre-on-event", os_wxMediaCanvasPreOnEvent, 2, 2);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "pre-on-char", os_wxMediaCanvasPreOnChar, 2, 2);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "on-size", os_wxMediaCanvasOnSize, 2, 2);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "on-set-focus", os_wxMediaCanvasOnSetFocus, 0, 0);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "on-kill-focus", os_wxMediaCanvasOnKillFocus, 0, 0);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "call-as-primary-owner", os_wxMediaCanvasCallAsPrimaryOwner, 1, 1);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "set-lazy-refresh", os_wxMediaCanvasSetLazyRefresh, 1, 1);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "get-lazy-refresh", os_wxMediaCanvasGetLazyRefresh, 0, 0);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "scroll-with-bottom-base", os_wxMediaCanvasScrollWithBottomBase, 1, 1);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "allow-scroll-to-last", os_wxMediaCanvasAllowScrollToLast, 1, 1);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "force-display-focus", os_wxMediaCanvasForceDisplayFocus, 1, 1);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "is-focus-on?", os_wxMediaCanvasIsFocusOn, 0, 0);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "get-media", os_wxMediaCanvasGetMedia, 0, 0);
 scheme_add_method_w_arity(os_wxMediaCanvas_class, "set-media", os_wxMediaCanvasSetMedia, 1, 2);


  scheme_made_class(os_wxMediaCanvas_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMediaCanvas, wxTYPE_MEDIA_CANVAS);

}
}

int objscheme_istype_wxMediaCanvas(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMediaCanvas_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:media-canvas%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMediaCanvas(class wxMediaCanvas *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_MEDIA_CANVAS) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMediaCanvas_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMediaCanvas *objscheme_unbundle_wxMediaCanvas(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMediaCanvas(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMediaCanvas *)o->primdata;
  else
    return (wxMediaCanvas *)o->primdata;
}








class os_wxMediaAdmin : public wxMediaAdmin {
 public:

  os_wxMediaAdmin(Scheme_Object * obj);
  ~os_wxMediaAdmin();
  Bool DelayRefresh();
  void UpdateCursor();
  void NeedsUpdate(float x0, float x1, float x2, float x3);
  void Resized(Bool x0);
  void GrabCaret(int x0 = wxFOCUS_GLOBAL);
  Bool ScrollTo(float x0, float x1, float x2, float x3, Bool x4 = TRUE, int x5 = 0);
  void GetMaxView(float* x0, float* x1, float* x2, float* x3, Bool x4 = FALSE);
  void GetView(float* x0, float* x1, float* x2, float* x3, Bool x4 = FALSE);
  class wxDC* GetDC(float* x0 = NULL, float* x1 = NULL);
};

Scheme_Object *os_wxMediaAdmin_class;

os_wxMediaAdmin::os_wxMediaAdmin(Scheme_Object * o)
: wxMediaAdmin()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMediaAdmin::~os_wxMediaAdmin()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

Bool os_wxMediaAdmin::DelayRefresh()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "refresh-delayed?", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-admin%::refresh-delayed?"", extracting return value");
  }
}

void os_wxMediaAdmin::UpdateCursor()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "update-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaAdmin::NeedsUpdate(float x0, float x1, float x2, float x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "needs-update", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaAdmin::Resized(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "resized", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaAdmin::GrabCaret(int x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "grab-caret", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = bundle_symset_focus(x0);;
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaAdmin::ScrollTo(float x0, float x1, float x2, float x3, Bool x4, int x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "scroll-to", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = (x4 ? scheme_true : scheme_false);
  p[5] = scheme_make_integer(x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-admin%::scroll-to"", extracting return value");
  }
}

void os_wxMediaAdmin::GetMaxView(float* x0, float* x1, float* x2, float* x3, Bool x4)
{
  Scheme_Object *p[5];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "get-max-view", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = ((x0) ? objscheme_box(scheme_make_double((*x0))) : scheme_null);
  p[1] = ((x1) ? objscheme_box(scheme_make_double((*x1))) : scheme_null);
  p[2] = ((x2) ? objscheme_box(scheme_make_double((*x2))) : scheme_null);
  p[3] = ((x3) ? objscheme_box(scheme_make_double((*x3))) : scheme_null);
  p[4] = (x4 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 5, p);
  
  if (x0) *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-admin%::get-max-view"", extracting return value via box"), "wx:media-admin%::get-max-view"", extracting return value via box");
  if (x1) *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-admin%::get-max-view"", extracting return value via box"), "wx:media-admin%::get-max-view"", extracting return value via box");
  if (x2) *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:media-admin%::get-max-view"", extracting return value via box"), "wx:media-admin%::get-max-view"", extracting return value via box");
  if (x3) *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:media-admin%::get-max-view"", extracting return value via box"), "wx:media-admin%::get-max-view"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaAdmin::GetView(float* x0, float* x1, float* x2, float* x3, Bool x4)
{
  Scheme_Object *p[5];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "get-view", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = ((x0) ? objscheme_box(scheme_make_double((*x0))) : scheme_null);
  p[1] = ((x1) ? objscheme_box(scheme_make_double((*x1))) : scheme_null);
  p[2] = ((x2) ? objscheme_box(scheme_make_double((*x2))) : scheme_null);
  p[3] = ((x3) ? objscheme_box(scheme_make_double((*x3))) : scheme_null);
  p[4] = (x4 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 5, p);
  
  if (x0) *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-admin%::get-view"", extracting return value via box"), "wx:media-admin%::get-view"", extracting return value via box");
  if (x1) *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-admin%::get-view"", extracting return value via box"), "wx:media-admin%::get-view"", extracting return value via box");
  if (x2) *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:media-admin%::get-view"", extracting return value via box"), "wx:media-admin%::get-view"", extracting return value via box");
  if (x3) *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:media-admin%::get-view"", extracting return value via box"), "wx:media-admin%::get-view"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxDC* os_wxMediaAdmin::GetDC(float* x0, float* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaAdmin_class, "get-dc", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return NULL;
  } else {
  
  p[0] = ((x0) ? objscheme_box(scheme_make_double((*x0))) : scheme_null);
  p[1] = ((x1) ? objscheme_box(scheme_make_double((*x1))) : scheme_null);
  

  v = scheme_apply(method, 2, p);
  
  if (x0) *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-admin%::get-dc"", extracting return value via box"), "wx:media-admin%::get-dc"", extracting return value via box");
  if (x1) *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-admin%::get-dc"", extracting return value via box"), "wx:media-admin%::get-dc"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxDC(v, "wx:media-admin%::get-dc"", extracting return value", 1);
  }
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminDelayRefresh(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->DelayRefresh();
  else
    r = ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->DelayRefresh();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminUpdateCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->UpdateCursor();
  else
    ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->UpdateCursor();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminNeedsUpdate(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-admin%::needs-update");
  x1 = objscheme_unbundle_float(p[1], "wx:media-admin%::needs-update");
  x2 = objscheme_unbundle_float(p[2], "wx:media-admin%::needs-update");
  x3 = objscheme_unbundle_float(p[3], "wx:media-admin%::needs-update");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->NeedsUpdate(x0, x1, x2, x3);
  else
    ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->NeedsUpdate(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminResized(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-admin%::resized");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->Resized(x0);
  else
    ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->Resized(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminGrabCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  if (n > 0) {
    x0 = unbundle_symset_focus(p[0], "wx:media-admin%::grab-caret");;
  } else
    x0 = wxFOCUS_GLOBAL;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GrabCaret(x0);
  else
    ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GrabCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminScrollTo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;
  float x3;
  Bool x4;
  int x5;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-admin%::scroll-to");
  x1 = objscheme_unbundle_float(p[1], "wx:media-admin%::scroll-to");
  x2 = objscheme_unbundle_float(p[2], "wx:media-admin%::scroll-to");
  x3 = objscheme_unbundle_float(p[3], "wx:media-admin%::scroll-to");
  if (n > 4) {
    x4 = objscheme_unbundle_bool(p[4], "wx:media-admin%::scroll-to");
  } else
    x4 = TRUE;
  if (n > 5) {
    x5 = objscheme_unbundle_integer(p[5], "wx:media-admin%::scroll-to");
  } else
    x5 = 0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->ScrollTo(x0, x1, x2, x3, x4, x5);
  else
    r = ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->ScrollTo(x0, x1, x2, x3, x4, x5);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminGetMaxView(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  float _x3;
  float* x3 = &_x3;
  Bool x4;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-admin%::get-max-view"), "wx:media-admin%::get-max-view");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-admin%::get-max-view"), "wx:media-admin%::get-max-view");
  if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:media-admin%::get-max-view"), "wx:media-admin%::get-max-view");
  if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:media-admin%::get-max-view"), "wx:media-admin%::get-max-view");
  if (n > 4) {
    x4 = objscheme_unbundle_bool(p[4], "wx:media-admin%::get-max-view");
  } else
    x4 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetMaxView(x0, x1, x2, x3, x4);
  else
    ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetMaxView(x0, x1, x2, x3, x4);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], scheme_make_double(_x2));
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminGetView(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  float _x3;
  float* x3 = &_x3;
  Bool x4;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-admin%::get-view"), "wx:media-admin%::get-view");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-admin%::get-view"), "wx:media-admin%::get-view");
  if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:media-admin%::get-view"), "wx:media-admin%::get-view");
  if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:media-admin%::get-view"), "wx:media-admin%::get-view");
  if (n > 4) {
    x4 = objscheme_unbundle_bool(p[4], "wx:media-admin%::get-view");
  } else
    x4 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetView(x0, x1, x2, x3, x4);
  else
    ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetView(x0, x1, x2, x3, x4);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], scheme_make_double(_x2));
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaAdminGetDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxDC* r;
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;

  
  if (n > 0) {
    if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:media-admin%::get-dc"), "wx:media-admin%::get-dc");
  } else
    x0 = NULL;
  if (n > 1) {
    if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:media-admin%::get-dc"), "wx:media-admin%::get-dc");
  } else
    x1 = NULL;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetDC(x0, x1);
  else
    r = ((wxMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetDC(x0, x1);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  
  return objscheme_bundle_wxDC(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaAdmin_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMediaAdmin *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:media-admin%::initialization", 0, 0, n, p);

  
  realobj = new os_wxMediaAdmin(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxMediaAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:media-admin%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:media-admin%");
}

void objscheme_setup_wxMediaAdmin(void *env)
{
if (os_wxMediaAdmin_class) {
    objscheme_add_global_class(os_wxMediaAdmin_class,  "wx:media-admin%", env);
} else {
  os_wxMediaAdmin_class = objscheme_def_prim_class(env, "wx:media-admin%", "wx:object%", os_wxMediaAdmin_ConstructScheme, 10);

  scheme_add_method_w_arity(os_wxMediaAdmin_class,"get-class-name",objscheme_classname_os_wxMediaAdmin, 0, 0);

 scheme_add_method_w_arity(os_wxMediaAdmin_class, "refresh-delayed?", os_wxMediaAdminDelayRefresh, 0, 0);
 scheme_add_method_w_arity(os_wxMediaAdmin_class, "update-cursor", os_wxMediaAdminUpdateCursor, 0, 0);
 scheme_add_method_w_arity(os_wxMediaAdmin_class, "needs-update", os_wxMediaAdminNeedsUpdate, 4, 4);
 scheme_add_method_w_arity(os_wxMediaAdmin_class, "resized", os_wxMediaAdminResized, 1, 1);
 scheme_add_method_w_arity(os_wxMediaAdmin_class, "grab-caret", os_wxMediaAdminGrabCaret, 0, 1);
 scheme_add_method_w_arity(os_wxMediaAdmin_class, "scroll-to", os_wxMediaAdminScrollTo, 4, 6);
 scheme_add_method_w_arity(os_wxMediaAdmin_class, "get-max-view", os_wxMediaAdminGetMaxView, 4, 5);
 scheme_add_method_w_arity(os_wxMediaAdmin_class, "get-view", os_wxMediaAdminGetView, 4, 5);
 scheme_add_method_w_arity(os_wxMediaAdmin_class, "get-dc", os_wxMediaAdminGetDC, 0, 2);


  scheme_made_class(os_wxMediaAdmin_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMediaAdmin, wxTYPE_MEDIA_ADMIN);

}
}

int objscheme_istype_wxMediaAdmin(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMediaAdmin_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:media-admin%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMediaAdmin(class wxMediaAdmin *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_MEDIA_ADMIN) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMediaAdmin_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMediaAdmin *objscheme_unbundle_wxMediaAdmin(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMediaAdmin(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMediaAdmin *)o->primdata;
  else
    return (wxMediaAdmin *)o->primdata;
}


#define FIXCMA os_wxCanvasMediaAdmin() : wxCanvasMediaAdmin(NULL) {}





class os_wxCanvasMediaAdmin : public wxCanvasMediaAdmin {
 public:
  FIXCMA

  ~os_wxCanvasMediaAdmin();
};

Scheme_Object *os_wxCanvasMediaAdmin_class;

os_wxCanvasMediaAdmin::~os_wxCanvasMediaAdmin()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxCanvasMediaAdminGetCanvas(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaCanvas* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxCanvasMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetCanvas();

  
  
  return objscheme_bundle_wxMediaCanvas(r);
}

static Scheme_Object *objscheme_classname_os_wxCanvasMediaAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:canvas-media-admin%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:canvas-media-admin%");
}

void objscheme_setup_wxCanvasMediaAdmin(void *env)
{
if (os_wxCanvasMediaAdmin_class) {
    objscheme_add_global_class(os_wxCanvasMediaAdmin_class,  "wx:canvas-media-admin%", env);
} else {
  os_wxCanvasMediaAdmin_class = objscheme_def_prim_class(env, "wx:canvas-media-admin%", "wx:media-admin%", NULL, 2);

  scheme_add_method_w_arity(os_wxCanvasMediaAdmin_class,"get-class-name",objscheme_classname_os_wxCanvasMediaAdmin, 0, 0);

 scheme_add_method_w_arity(os_wxCanvasMediaAdmin_class, "get-canvas", os_wxCanvasMediaAdminGetCanvas, 0, 0);


  scheme_made_class(os_wxCanvasMediaAdmin_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxCanvasMediaAdmin, wxTYPE_CANVAS_MEDIA_ADMIN);

}
}

int objscheme_istype_wxCanvasMediaAdmin(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxCanvasMediaAdmin_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:canvas-media-admin%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxCanvasMediaAdmin(class wxCanvasMediaAdmin *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_CANVAS_MEDIA_ADMIN) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxCanvasMediaAdmin_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxCanvasMediaAdmin *objscheme_unbundle_wxCanvasMediaAdmin(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxCanvasMediaAdmin(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxCanvasMediaAdmin *)o->primdata;
  else
    return (wxCanvasMediaAdmin *)o->primdata;
}


#define FIXMSMA os_wxMediaSnipMediaAdmin() : wxMediaSnipMediaAdmin(NULL) {}





class os_wxMediaSnipMediaAdmin : public wxMediaSnipMediaAdmin {
 public:
  FIXMSMA

  ~os_wxMediaSnipMediaAdmin();
};

Scheme_Object *os_wxMediaSnipMediaAdmin_class;

os_wxMediaSnipMediaAdmin::~os_wxMediaSnipMediaAdmin()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipMediaAdminGetSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaSnip* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaSnipMediaAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetSnip();

  
  
  return objscheme_bundle_wxMediaSnip(r);
}

static Scheme_Object *objscheme_classname_os_wxMediaSnipMediaAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:media-snip-media-admin%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:media-snip-media-admin%");
}

void objscheme_setup_wxMediaSnipMediaAdmin(void *env)
{
if (os_wxMediaSnipMediaAdmin_class) {
    objscheme_add_global_class(os_wxMediaSnipMediaAdmin_class,  "wx:media-snip-media-admin%", env);
} else {
  os_wxMediaSnipMediaAdmin_class = objscheme_def_prim_class(env, "wx:media-snip-media-admin%", "wx:media-admin%", NULL, 2);

  scheme_add_method_w_arity(os_wxMediaSnipMediaAdmin_class,"get-class-name",objscheme_classname_os_wxMediaSnipMediaAdmin, 0, 0);

 scheme_add_method_w_arity(os_wxMediaSnipMediaAdmin_class, "get-snip", os_wxMediaSnipMediaAdminGetSnip, 0, 0);


  scheme_made_class(os_wxMediaSnipMediaAdmin_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMediaSnipMediaAdmin, wxTYPE_MEDIA_SNIP_MEDIA_ADMIN);

}
}

int objscheme_istype_wxMediaSnipMediaAdmin(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMediaSnipMediaAdmin_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:media-snip-media-admin%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMediaSnipMediaAdmin(class wxMediaSnipMediaAdmin *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_MEDIA_SNIP_MEDIA_ADMIN) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMediaSnipMediaAdmin_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMediaSnipMediaAdmin *objscheme_unbundle_wxMediaSnipMediaAdmin(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMediaSnipMediaAdmin(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMediaSnipMediaAdmin *)o->primdata;
  else
    return (wxMediaSnipMediaAdmin *)o->primdata;
}







class os_wxSnipAdmin : public wxSnipAdmin {
 public:

  os_wxSnipAdmin(Scheme_Object * obj);
  ~os_wxSnipAdmin();
  void UpdateCursor();
  Bool ReleaseSnip(class wxSnip* x0);
  void NeedsUpdate(class wxSnip* x0, float x1, float x2, float x3, float x4);
  Bool Recounted(class wxSnip* x0, Bool x1);
  void Resized(class wxSnip* x0, Bool x1);
  void SetCaretOwner(class wxSnip* x0, int x1);
  Bool ScrollTo(class wxSnip* x0, float x1, float x2, float x3, float x4, Bool x5, int x6 = 0);
  void GetView(float* x0, float* x1, float* x2, float* x3, class wxSnip* x4 = NULL);
  void GetViewSize(float* x0, float* x1);
  class wxDC* GetDC();
  class wxMediaBuffer* GetMedia();
};

Scheme_Object *os_wxSnipAdmin_class;

os_wxSnipAdmin::os_wxSnipAdmin(Scheme_Object * o)
: wxSnipAdmin()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxSnipAdmin::~os_wxSnipAdmin()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxSnipAdmin::UpdateCursor()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "update-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxSnipAdmin::ReleaseSnip(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "release-snip", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:snip-admin%::release-snip"", extracting return value");
  }
}

void os_wxSnipAdmin::NeedsUpdate(class wxSnip* x0, float x1, float x2, float x3, float x4)
{
  Scheme_Object *p[5];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "needs-update", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  

  v = scheme_apply(method, 5, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxSnipAdmin::Recounted(class wxSnip* x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "recounted", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:snip-admin%::recounted"", extracting return value");
  }
}

void os_wxSnipAdmin::Resized(class wxSnip* x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "resized", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxSnipAdmin::SetCaretOwner(class wxSnip* x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "set-caret-owner", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = bundle_symset_focus(x1);;
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxSnipAdmin::ScrollTo(class wxSnip* x0, float x1, float x2, float x3, float x4, Bool x5, int x6)
{
  Scheme_Object *p[7];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "scroll-to", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = (x5 ? scheme_true : scheme_false);
  p[6] = scheme_make_integer(x6);
  

  v = scheme_apply(method, 7, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:snip-admin%::scroll-to"", extracting return value");
  }
}

void os_wxSnipAdmin::GetView(float* x0, float* x1, float* x2, float* x3, class wxSnip* x4)
{
  Scheme_Object *p[5];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "get-view", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = ((x0) ? objscheme_box(scheme_make_double((*x0))) : scheme_null);
  p[1] = ((x1) ? objscheme_box(scheme_make_double((*x1))) : scheme_null);
  p[2] = ((x2) ? objscheme_box(scheme_make_double((*x2))) : scheme_null);
  p[3] = ((x3) ? objscheme_box(scheme_make_double((*x3))) : scheme_null);
  p[4] = objscheme_bundle_wxSnip(x4);
  

  v = scheme_apply(method, 5, p);
  
  if (x0) *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:snip-admin%::get-view"", extracting return value via box"), "wx:snip-admin%::get-view"", extracting return value via box");
  if (x1) *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:snip-admin%::get-view"", extracting return value via box"), "wx:snip-admin%::get-view"", extracting return value via box");
  if (x2) *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:snip-admin%::get-view"", extracting return value via box"), "wx:snip-admin%::get-view"", extracting return value via box");
  if (x3) *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:snip-admin%::get-view"", extracting return value via box"), "wx:snip-admin%::get-view"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxSnipAdmin::GetViewSize(float* x0, float* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "get-view-size", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return;
  } else {
  
  p[0] = ((x0) ? objscheme_box(scheme_make_double((*x0))) : scheme_null);
  p[1] = ((x1) ? objscheme_box(scheme_make_double((*x1))) : scheme_null);
  

  v = scheme_apply(method, 2, p);
  
  if (x0) *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:snip-admin%::get-view-size"", extracting return value via box"), "wx:snip-admin%::get-view-size"", extracting return value via box");
  if (x1) *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:snip-admin%::get-view-size"", extracting return value via box"), "wx:snip-admin%::get-view-size"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxDC* os_wxSnipAdmin::GetDC()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "get-dc", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return NULL;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxDC(v, "wx:snip-admin%::get-dc"", extracting return value", 0);
  }
}

class wxMediaBuffer* os_wxSnipAdmin::GetMedia()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipAdmin_class, "get-media", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return NULL;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxMediaBuffer(v, "wx:snip-admin%::get-media"", extracting return value", 1);
  }
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminUpdateCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->UpdateCursor();
  else
    ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->UpdateCursor();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminReleaseSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:snip-admin%::release-snip", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->ReleaseSnip(x0);
  else
    r = ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->ReleaseSnip(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminNeedsUpdate(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  float x1;
  float x2;
  float x3;
  float x4;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:snip-admin%::needs-update", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:snip-admin%::needs-update");
  x2 = objscheme_unbundle_float(p[2], "wx:snip-admin%::needs-update");
  x3 = objscheme_unbundle_float(p[3], "wx:snip-admin%::needs-update");
  x4 = objscheme_unbundle_float(p[4], "wx:snip-admin%::needs-update");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->NeedsUpdate(x0, x1, x2, x3, x4);
  else
    ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->NeedsUpdate(x0, x1, x2, x3, x4);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminRecounted(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;
  Bool x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:snip-admin%::recounted", 0);
  x1 = objscheme_unbundle_bool(p[1], "wx:snip-admin%::recounted");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->Recounted(x0, x1);
  else
    r = ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->Recounted(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminResized(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  Bool x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:snip-admin%::resized", 0);
  x1 = objscheme_unbundle_bool(p[1], "wx:snip-admin%::resized");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->Resized(x0, x1);
  else
    ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->Resized(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminSetCaretOwner(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnip* x0;
  int x1;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:snip-admin%::set-caret-owner", 0);
  x1 = unbundle_symset_focus(p[1], "wx:snip-admin%::set-caret-owner");;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->SetCaretOwner(x0, x1);
  else
    ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->SetCaretOwner(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminScrollTo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  Bool x5;
  int x6;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:snip-admin%::scroll-to", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:snip-admin%::scroll-to");
  x2 = objscheme_unbundle_float(p[2], "wx:snip-admin%::scroll-to");
  x3 = objscheme_unbundle_float(p[3], "wx:snip-admin%::scroll-to");
  x4 = objscheme_unbundle_float(p[4], "wx:snip-admin%::scroll-to");
  x5 = objscheme_unbundle_bool(p[5], "wx:snip-admin%::scroll-to");
  if (n > 6) {
    x6 = objscheme_unbundle_integer(p[6], "wx:snip-admin%::scroll-to");
  } else
    x6 = 0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->ScrollTo(x0, x1, x2, x3, x4, x5, x6);
  else
    r = ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->ScrollTo(x0, x1, x2, x3, x4, x5, x6);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminGetView(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;
  float _x3;
  float* x3 = &_x3;
  class wxSnip* x4;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:snip-admin%::get-view"), "wx:snip-admin%::get-view");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:snip-admin%::get-view"), "wx:snip-admin%::get-view");
  if (SCHEME_NULLP(p[2]))
    x2 = NULL;
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:snip-admin%::get-view"), "wx:snip-admin%::get-view");
  if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:snip-admin%::get-view"), "wx:snip-admin%::get-view");
  if (n > 4) {
    x4 = objscheme_unbundle_wxSnip(p[4], "wx:snip-admin%::get-view", 1);
  } else
    x4 = NULL;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetView(x0, x1, x2, x3, x4);
  else
    ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetView(x0, x1, x2, x3, x4);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2 && !SCHEME_NULLP(p[2]))
    objscheme_set_box(p[2], scheme_make_double(_x2));
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminGetViewSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:snip-admin%::get-view-size"), "wx:snip-admin%::get-view-size");
  if (SCHEME_NULLP(p[1]))
    x1 = NULL;
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:snip-admin%::get-view-size"), "wx:snip-admin%::get-view-size");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetViewSize(x0, x1);
  else
    ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetViewSize(x0, x1);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1 && !SCHEME_NULLP(p[1]))
    objscheme_set_box(p[1], scheme_make_double(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminGetDC(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxDC* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetDC();
  else
    r = ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetDC();

  
  
  return objscheme_bundle_wxDC(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipAdminGetMedia(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaBuffer* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetMedia();
  else
    r = ((wxSnipAdmin *)((Scheme_Class_Object *)obj)->primdata)->GetMedia();

  
  
  return objscheme_bundle_wxMediaBuffer(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipAdmin_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxSnipAdmin *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:snip-admin%::initialization", 0, 0, n, p);

  
  realobj = new os_wxSnipAdmin(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxSnipAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:snip-admin%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:snip-admin%");
}

void objscheme_setup_wxSnipAdmin(void *env)
{
if (os_wxSnipAdmin_class) {
    objscheme_add_global_class(os_wxSnipAdmin_class,  "wx:snip-admin%", env);
} else {
  os_wxSnipAdmin_class = objscheme_def_prim_class(env, "wx:snip-admin%", "wx:object%", os_wxSnipAdmin_ConstructScheme, 12);

  scheme_add_method_w_arity(os_wxSnipAdmin_class,"get-class-name",objscheme_classname_os_wxSnipAdmin, 0, 0);

 scheme_add_method_w_arity(os_wxSnipAdmin_class, "update-cursor", os_wxSnipAdminUpdateCursor, 0, 0);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "release-snip", os_wxSnipAdminReleaseSnip, 1, 1);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "needs-update", os_wxSnipAdminNeedsUpdate, 5, 5);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "recounted", os_wxSnipAdminRecounted, 2, 2);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "resized", os_wxSnipAdminResized, 2, 2);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "set-caret-owner", os_wxSnipAdminSetCaretOwner, 2, 2);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "scroll-to", os_wxSnipAdminScrollTo, 6, 7);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "get-view", os_wxSnipAdminGetView, 4, 5);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "get-view-size", os_wxSnipAdminGetViewSize, 2, 2);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "get-dc", os_wxSnipAdminGetDC, 0, 0);
 scheme_add_method_w_arity(os_wxSnipAdmin_class, "get-media", os_wxSnipAdminGetMedia, 0, 0);


  scheme_made_class(os_wxSnipAdmin_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxSnipAdmin, wxTYPE_MEDIA_SNIP_ADMIN);

}
}

int objscheme_istype_wxSnipAdmin(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxSnipAdmin_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:snip-admin%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxSnipAdmin(class wxSnipAdmin *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_MEDIA_SNIP_ADMIN) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxSnipAdmin_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxSnipAdmin *objscheme_unbundle_wxSnipAdmin(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxSnipAdmin(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxSnipAdmin *)o->primdata;
  else
    return (wxSnipAdmin *)o->primdata;
}









class os_wxSnipClass : public wxSnipClass {
 public:

  os_wxSnipClass(Scheme_Object * obj);
  ~os_wxSnipClass();
  void WriteDone();
  Bool WriteHeader(class wxMediaStreamOut& x0);
  void ReadDone();
  Bool ReadHeader(class wxMediaStreamIn& x0);
  class wxSnip* Read(class wxMediaStreamIn& x0);
};

Scheme_Object *os_wxSnipClass_class;

os_wxSnipClass::os_wxSnipClass(Scheme_Object * o)
: wxSnipClass()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxSnipClass::~os_wxSnipClass()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxSnipClass::WriteDone()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipClass_class, "write-done", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnipClass::WriteDone();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxSnipClass::WriteHeader(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipClass_class, "write-header", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnipClass::WriteHeader(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:snip-class%::write-header"", extracting return value");
  }
}

void os_wxSnipClass::ReadDone()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipClass_class, "read-done", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnipClass::ReadDone();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxSnipClass::ReadHeader(class wxMediaStreamIn& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipClass_class, "read-header", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnipClass::ReadHeader(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamIn(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:snip-class%::read-header"", extracting return value");
  }
}

class wxSnip* os_wxSnipClass::Read(class wxMediaStreamIn& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnipClass_class, "read", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return NULL;
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamIn(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:snip-class%::read"", extracting return value", 1);
  }
}

#pragma argsused
static Scheme_Object *os_wxSnipClassWriteDone(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->wxSnipClass::WriteDone();
  else
    ((wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->WriteDone();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipClassWriteHeader(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:snip-class%::write-header", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->wxSnipClass::WriteHeader(*x0);
  else
    r = ((wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->WriteHeader(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipClassReadDone(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->wxSnipClass::ReadDone();
  else
    ((wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->ReadDone();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipClassReadHeader(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamIn* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:snip-class%::read-header", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->wxSnipClass::ReadHeader(*x0);
  else
    r = ((wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->ReadHeader(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipClassRead(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  class wxMediaStreamIn* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:snip-class%::read", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->Read(*x0);
  else
    r = ((wxSnipClass *)((Scheme_Class_Object *)obj)->primdata)->Read(*x0);

  
  
  return objscheme_bundle_wxSnip(r);
}

static Scheme_Object *objscheme_wxSnipClass_Getclassname(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  string v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-classname", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxSnipClass *)cobj->primdata)->wxSnipClass::classname;
  else
    v = ((wxSnipClass *)cobj->primdata)->classname;

  return objscheme_bundle_string((char *)v);
}

static Scheme_Object *objscheme_wxSnipClass_Setclassname(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  string v;

  if (n != 1) scheme_wrong_count("set-classname", 1, 1, n, p);

  v = (string)objscheme_unbundle_string(p[0], "wx:snip-class%::classname");
  ((wxSnipClass *)cobj->primdata)->classname = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxSnipClass_Getversion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-version", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxSnipClass *)cobj->primdata)->wxSnipClass::version;
  else
    v = ((wxSnipClass *)cobj->primdata)->version;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxSnipClass_Setversion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-version", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:snip-class%::version");
  ((wxSnipClass *)cobj->primdata)->version = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipClass_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxSnipClass *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:snip-class%::initialization", 0, 0, n, p);

  
  realobj = new os_wxSnipClass(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxSnipClass(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:snip-class%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:snip-class%");
}

void objscheme_setup_wxSnipClass(void *env)
{
if (os_wxSnipClass_class) {
    objscheme_add_global_class(os_wxSnipClass_class,  "wx:snip-class%", env);
} else {
  os_wxSnipClass_class = objscheme_def_prim_class(env, "wx:snip-class%", "wx:object%", os_wxSnipClass_ConstructScheme, 10);

  scheme_add_method_w_arity(os_wxSnipClass_class,"get-class-name",objscheme_classname_os_wxSnipClass, 0, 0);

 scheme_add_method_w_arity(os_wxSnipClass_class, "write-done", os_wxSnipClassWriteDone, 0, 0);
 scheme_add_method_w_arity(os_wxSnipClass_class, "write-header", os_wxSnipClassWriteHeader, 1, 1);
 scheme_add_method_w_arity(os_wxSnipClass_class, "read-done", os_wxSnipClassReadDone, 0, 0);
 scheme_add_method_w_arity(os_wxSnipClass_class, "read-header", os_wxSnipClassReadHeader, 1, 1);
 scheme_add_method_w_arity(os_wxSnipClass_class, "read", os_wxSnipClassRead, 1, 1);

  scheme_add_method_w_arity(os_wxSnipClass_class,"get-classname", objscheme_wxSnipClass_Getclassname, 0, 0);
  scheme_add_method_w_arity(os_wxSnipClass_class,"set-classname", objscheme_wxSnipClass_Setclassname, 1, 1);
  scheme_add_method_w_arity(os_wxSnipClass_class,"get-version", objscheme_wxSnipClass_Getversion, 0, 0);
  scheme_add_method_w_arity(os_wxSnipClass_class,"set-version", objscheme_wxSnipClass_Setversion, 1, 1);

  scheme_made_class(os_wxSnipClass_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxSnipClass, wxTYPE_SNIP_CLASS);

}
}

int objscheme_istype_wxSnipClass(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxSnipClass_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:snip-class%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxSnipClass(class wxSnipClass *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_SNIP_CLASS) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxSnipClass_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxSnipClass *objscheme_unbundle_wxSnipClass(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxSnipClass(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxSnipClass *)o->primdata;
  else
    return (wxSnipClass *)o->primdata;
}






class os_wxSnipClassList : public wxSnipClassList {
 public:

  ~os_wxSnipClassList();
};

Scheme_Object *os_wxSnipClassList_class;

os_wxSnipClassList::~os_wxSnipClassList()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxSnipClassListReadingVersion(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  class wxSnipClass* x0;

  
  x0 = objscheme_unbundle_wxSnipClass(p[0], "wx:snip-class-list%::reading-version", 0);

  
  r = ((wxSnipClassList *)((Scheme_Class_Object *)obj)->primdata)->ReadingVersion(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipClassListNth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnipClass* r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:snip-class-list%::nth");

  
  r = ((wxSnipClassList *)((Scheme_Class_Object *)obj)->primdata)->Nth(x0);

  
  
  return objscheme_bundle_wxSnipClass(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipClassListNumber(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxSnipClassList *)((Scheme_Class_Object *)obj)->primdata)->Number();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipClassListAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnipClass* x0;

  
  x0 = objscheme_unbundle_wxSnipClass(p[0], "wx:snip-class-list%::add", 0);

  
  ((wxSnipClassList *)((Scheme_Class_Object *)obj)->primdata)->Add(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipClassListFindPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  short r;
  objscheme_check_valid(obj);
  class wxSnipClass* x0;

  
  x0 = objscheme_unbundle_wxSnipClass(p[0], "wx:snip-class-list%::find-position", 0);

  
  r = ((wxSnipClassList *)((Scheme_Class_Object *)obj)->primdata)->FindPosition(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipClassListFind(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnipClass* r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:snip-class-list%::find");

  
  r = ((wxSnipClassList *)((Scheme_Class_Object *)obj)->primdata)->Find(x0);

  
  
  return objscheme_bundle_wxSnipClass(r);
}

static Scheme_Object *objscheme_classname_os_wxSnipClassList(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:snip-class-list%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:snip-class-list%");
}

void objscheme_setup_wxSnipClassList(void *env)
{
if (os_wxSnipClassList_class) {
    objscheme_add_global_class(os_wxSnipClassList_class,  "wx:snip-class-list%", env);
} else {
  os_wxSnipClassList_class = objscheme_def_prim_class(env, "wx:snip-class-list%", "wx:object%", NULL, 7);

  scheme_add_method_w_arity(os_wxSnipClassList_class,"get-class-name",objscheme_classname_os_wxSnipClassList, 0, 0);

 scheme_add_method_w_arity(os_wxSnipClassList_class, "reading-version", os_wxSnipClassListReadingVersion, 1, 1);
 scheme_add_method_w_arity(os_wxSnipClassList_class, "nth", os_wxSnipClassListNth, 1, 1);
 scheme_add_method_w_arity(os_wxSnipClassList_class, "number", os_wxSnipClassListNumber, 0, 0);
 scheme_add_method_w_arity(os_wxSnipClassList_class, "add", os_wxSnipClassListAdd, 1, 1);
 scheme_add_method_w_arity(os_wxSnipClassList_class, "find-position", os_wxSnipClassListFindPosition, 1, 1);
 scheme_add_method_w_arity(os_wxSnipClassList_class, "find", os_wxSnipClassListFind, 1, 1);


  scheme_made_class(os_wxSnipClassList_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxSnipClassList, wxTYPE_SNIP_CLASS_LIST);

}
}

int objscheme_istype_wxSnipClassList(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxSnipClassList_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:snip-class-list%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxSnipClassList(class wxSnipClassList *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_SNIP_CLASS_LIST) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxSnipClassList_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxSnipClassList *objscheme_unbundle_wxSnipClassList(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxSnipClassList(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxSnipClassList *)o->primdata;
  else
    return (wxSnipClassList *)o->primdata;
}




typedef Scheme_Object KeymapCallbackToSchemeRec;
#define kctsr(o) o

static int KeyCallbackToScheme(wxObject *, wxKeyEvent &, KeymapCallbackToSchemeRec *data);
static int MouseCallbackToScheme(wxObject *, wxMouseEvent &, KeymapCallbackToSchemeRec *data);
static int GrabKeyCallbackToScheme(char *s, wxKeymap *km, wxObject *, wxKeyEvent &, KeymapCallbackToSchemeRec *data);
static int GrabMouseCallbackToScheme(char *s, wxKeymap *km, wxObject *, wxMouseEvent &, KeymapCallbackToSchemeRec *data);
static void ErrorCallbackToScheme(KeymapCallbackToSchemeRec *data, char *str);
static void BreakSequenceCallbackToScheme(KeymapCallbackToSchemeRec *data);










class os_wxKeymap : public wxKeymap {
 public:

  os_wxKeymap(Scheme_Object * obj);
  ~os_wxKeymap();
  Bool HandleMouseEvent(class wxObject* x0, class wxMouseEvent& x1);
  Bool HandleKeyEvent(class wxObject* x0, class wxKeyEvent& x1);
};

Scheme_Object *os_wxKeymap_class;

os_wxKeymap::os_wxKeymap(Scheme_Object * o)
: wxKeymap()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxKeymap::~os_wxKeymap()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

Bool os_wxKeymap::HandleMouseEvent(class wxObject* x0, class wxMouseEvent& x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxKeymap_class, "handle-mouse-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxKeymap::HandleMouseEvent(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxObject(x0);
  p[1] = objscheme_bundle_wxMouseEvent(&x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:keymap%::handle-mouse-event"", extracting return value");
  }
}

Bool os_wxKeymap::HandleKeyEvent(class wxObject* x0, class wxKeyEvent& x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxKeymap_class, "handle-key-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxKeymap::HandleKeyEvent(x0, x1);
  } else {
  
  p[0] = objscheme_bundle_wxObject(x0);
  p[1] = objscheme_bundle_wxKeyEvent(&x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:keymap%::handle-key-event"", extracting return value");
  }
}

#pragma argsused
static Scheme_Object *os_wxKeymapRemoveChainedKeymap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeymap* x0;

  
  x0 = objscheme_unbundle_wxKeymap(p[0], "wx:keymap%::remove-chained-keymap", 0);

  
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->RemoveChainedKeymap(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapChainToKeymap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeymap* x0;
  Bool x1;

  
  x0 = objscheme_unbundle_wxKeymap(p[0], "wx:keymap%::chain-to-keymap", 0);
  x1 = objscheme_unbundle_bool(p[1], "wx:keymap%::chain-to-keymap");

  
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->ChainToKeymap(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapSetBreakSequenceCallback(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  wxBreakSequenceFunction x0;
  void* x1;

  KeymapCallbackToSchemeRec *cb;
  x0 = (wxBreakSequenceFunction)BreakSequenceCallbackToScheme;

  kctsr(cb) = p[0]; x1 = (void *)cb;
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->SetBreakSequenceCallback(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapSetErrorCallback(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  wxKeyErrorFunction x0;
  void* x1;

  KeymapCallbackToSchemeRec *cb;
  x0 = (wxKeyErrorFunction)ErrorCallbackToScheme;

  kctsr(cb) = p[0]; x1 = (void *)cb;
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->SetErrorCallback(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapCallFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  if ((n >= 3) && objscheme_istype_string(p[0], NULL) && objscheme_istype_wxObject(p[1], NULL, 0) && objscheme_istype_wxKeyEvent(p[2], NULL, 0)) {
    string x0;
    class wxObject* x1;
    class wxKeyEvent* x2;
    Bool x3;

    
    if ((n < 3) ||(n > 4)) 
      scheme_wrong_count("wx:keymap%::call-function (wx:key-event% case)", 3, 4, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:keymap%::call-function (wx:key-event% case)");
    x1 = objscheme_unbundle_wxObject(p[1], "wx:keymap%::call-function (wx:key-event% case)", 0);
    x2 = objscheme_unbundle_wxKeyEvent(p[2], "wx:keymap%::call-function (wx:key-event% case)", 0);
    if (n > 3) {
      x3 = objscheme_unbundle_bool(p[3], "wx:keymap%::call-function (wx:key-event% case)");
    } else
      x3 = FALSE;

    
    r = ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->CallFunction(x0, x1, *x2, x3);

    
    
  } else  {
    string x0;
    class wxObject* x1;
    class wxMouseEvent* x2;
    Bool x3;

    
    if ((n < 3) ||(n > 4)) 
      scheme_wrong_count("wx:keymap%::call-function (wx:mouse-event% case)", 3, 4, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:keymap%::call-function (wx:mouse-event% case)");
    x1 = objscheme_unbundle_wxObject(p[1], "wx:keymap%::call-function (wx:mouse-event% case)", 0);
    x2 = objscheme_unbundle_wxMouseEvent(p[2], "wx:keymap%::call-function (wx:mouse-event% case)", 0);
    if (n > 3) {
      x3 = objscheme_unbundle_bool(p[3], "wx:keymap%::call-function (wx:mouse-event% case)");
    } else
      x3 = FALSE;

    
    r = ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->CallFunction(x0, x1, *x2, x3);

    
    
  }

  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxKeymapRemoveGrabMouseFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->RemoveGrabMouseFunction();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapSetGrabMouseFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  wxGrabMouseFunction x0;
  void* x1;

  KeymapCallbackToSchemeRec *cb;
  x0 = (wxGrabMouseFunction)GrabMouseCallbackToScheme;

  kctsr(cb) = p[0]; x1 = (void *)cb;
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->SetGrabMouseFunction(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapAddMouseFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  wxMouseFunction x1;
  void* x2;

  KeymapCallbackToSchemeRec *cb;
  x0 = (string)objscheme_unbundle_string(p[0], "wx:keymap%::add-mouse-function");
  x1 = (wxMouseFunction)MouseCallbackToScheme;

  kctsr(cb) = p[1]; x2 = (void *)cb;
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->AddMouseFunction(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapRemoveGrabKeyFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->RemoveGrabKeyFunction();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapSetGrabKeyFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  wxGrabKeyFunction x0;
  void* x1;

  KeymapCallbackToSchemeRec *cb;
  x0 = (wxGrabKeyFunction)GrabKeyCallbackToScheme;

  kctsr(cb) = p[0]; x1 = (void *)cb;
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->SetGrabKeyFunction(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapAddKeyFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  wxKeyFunction x1;
  void* x2;

  KeymapCallbackToSchemeRec *cb;
  x0 = (string)objscheme_unbundle_string(p[0], "wx:keymap%::add-key-function");
  x1 = (wxKeyFunction)KeyCallbackToScheme;

  kctsr(cb) = p[1]; x2 = (void *)cb;
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->AddKeyFunction(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapImpliesShift(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:keymap%::implies-shift");

  
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->ImpliesShift(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapMapFunction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  string x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:keymap%::map-function");
  x1 = (string)objscheme_unbundle_string(p[1], "wx:keymap%::map-function");

  
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->MapFunction(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapBreakSequence(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->BreakSequence();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapHandleMouseEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxObject* x0;
  class wxMouseEvent* x1;

  
  x0 = objscheme_unbundle_wxObject(p[0], "wx:keymap%::handle-mouse-event", 0);
  x1 = objscheme_unbundle_wxMouseEvent(p[1], "wx:keymap%::handle-mouse-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->wxKeymap::HandleMouseEvent(x0, *x1);
  else
    r = ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->HandleMouseEvent(x0, *x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxKeymapHandleKeyEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxObject* x0;
  class wxKeyEvent* x1;

  
  x0 = objscheme_unbundle_wxObject(p[0], "wx:keymap%::handle-key-event", 0);
  x1 = objscheme_unbundle_wxKeyEvent(p[1], "wx:keymap%::handle-key-event", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->wxKeymap::HandleKeyEvent(x0, *x1);
  else
    r = ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->HandleKeyEvent(x0, *x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxKeymapSetDoubleClickInterval(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:keymap%::set-double-click-interval");

  
  ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->SetDoubleClickInterval(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeymapGetDoubleClickInterval(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxKeymap *)((Scheme_Class_Object *)obj)->primdata)->GetDoubleClickInterval();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxKeymap_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxKeymap *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:keymap%::initialization", 0, 0, n, p);

  
  realobj = new os_wxKeymap(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxKeymap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:keymap%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:keymap%");
}

void objscheme_setup_wxKeymap(void *env)
{
if (os_wxKeymap_class) {
    objscheme_add_global_class(os_wxKeymap_class,  "wx:keymap%", env);
} else {
  os_wxKeymap_class = objscheme_def_prim_class(env, "wx:keymap%", "wx:object%", os_wxKeymap_ConstructScheme, 19);

  scheme_add_method_w_arity(os_wxKeymap_class,"get-class-name",objscheme_classname_os_wxKeymap, 0, 0);

 scheme_add_method_w_arity(os_wxKeymap_class, "remove-chained-keymap", os_wxKeymapRemoveChainedKeymap, 1, 1);
 scheme_add_method_w_arity(os_wxKeymap_class, "chain-to-keymap", os_wxKeymapChainToKeymap, 2, 2);
 scheme_add_method_w_arity(os_wxKeymap_class, "set-break-sequence-callback", os_wxKeymapSetBreakSequenceCallback, 1, 1);
 scheme_add_method_w_arity(os_wxKeymap_class, "set-error-callback", os_wxKeymapSetErrorCallback, 1, 1);
 scheme_add_method(os_wxKeymap_class, "call-function", os_wxKeymapCallFunction);
 scheme_add_method_w_arity(os_wxKeymap_class, "remove-grab-mouse-function", os_wxKeymapRemoveGrabMouseFunction, 0, 0);
 scheme_add_method_w_arity(os_wxKeymap_class, "set-grab-mouse-function", os_wxKeymapSetGrabMouseFunction, 1, 1);
 scheme_add_method_w_arity(os_wxKeymap_class, "add-mouse-function", os_wxKeymapAddMouseFunction, 2, 2);
 scheme_add_method_w_arity(os_wxKeymap_class, "remove-grab-key-function", os_wxKeymapRemoveGrabKeyFunction, 0, 0);
 scheme_add_method_w_arity(os_wxKeymap_class, "set-grab-key-function", os_wxKeymapSetGrabKeyFunction, 1, 1);
 scheme_add_method_w_arity(os_wxKeymap_class, "add-key-function", os_wxKeymapAddKeyFunction, 2, 2);
 scheme_add_method_w_arity(os_wxKeymap_class, "implies-shift", os_wxKeymapImpliesShift, 1, 1);
 scheme_add_method_w_arity(os_wxKeymap_class, "map-function", os_wxKeymapMapFunction, 2, 2);
 scheme_add_method_w_arity(os_wxKeymap_class, "break-sequence", os_wxKeymapBreakSequence, 0, 0);
 scheme_add_method_w_arity(os_wxKeymap_class, "handle-mouse-event", os_wxKeymapHandleMouseEvent, 2, 2);
 scheme_add_method_w_arity(os_wxKeymap_class, "handle-key-event", os_wxKeymapHandleKeyEvent, 2, 2);
 scheme_add_method_w_arity(os_wxKeymap_class, "set-double-click-interval", os_wxKeymapSetDoubleClickInterval, 1, 1);
 scheme_add_method_w_arity(os_wxKeymap_class, "get-double-click-interval", os_wxKeymapGetDoubleClickInterval, 0, 0);


  scheme_made_class(os_wxKeymap_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxKeymap, wxTYPE_KEYMAP);

}
}

int objscheme_istype_wxKeymap(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxKeymap_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:keymap%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxKeymap(class wxKeymap *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_KEYMAP) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxKeymap_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxKeymap *objscheme_unbundle_wxKeymap(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxKeymap(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxKeymap *)o->primdata;
  else
    return (wxKeymap *)o->primdata;
}


static Bool KeyCallbackToScheme(wxObject *media, wxKeyEvent &event, 
			       KeymapCallbackToSchemeRec *data)
{
  extern Scheme_Object *objscheme_bundle_wxKeyEvent(wxKeyEvent *);
  Scheme_Object *p[2], *obj;
  Bool retval;
  jmp_buf savebuf;

  p[0] = objscheme_bundle_wxObject(media);
  p[1] = objscheme_bundle_wxKeyEvent(&event);

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    obj = scheme_apply(kctsr(data), 2, p);
    retval = objscheme_unbundle_bool(obj, "Scheme key callback");
  } else
    retval = 0;

  COPY_JMPBUF(scheme_error_buf, savebuf);
 
  return retval;
}

static Bool GrabKeyCallbackToScheme(char *s, wxKeymap *km,
				    wxObject *media, wxKeyEvent &event, 
				    KeymapCallbackToSchemeRec *data)
{
  extern Scheme_Object *objscheme_bundle_wxKeyEvent(wxKeyEvent *);
  Scheme_Object *p[4], *obj;
  Bool retval;
  jmp_buf savebuf;

  p[0] = objscheme_bundle_string(s);
  p[1] = objscheme_bundle_wxKeymap(km);
  p[2] = objscheme_bundle_wxObject(media);
  p[3] = objscheme_bundle_wxKeyEvent(&event);

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    obj = scheme_apply(kctsr(data), 4, p);
    retval = objscheme_unbundle_bool(obj, "Scheme grab-key callback");
  } else
    retval = 0;

  COPY_JMPBUF(scheme_error_buf, savebuf);
 
  return retval;
}

static Bool MouseCallbackToScheme(wxObject *media, wxMouseEvent &event, 
				 KeymapCallbackToSchemeRec *data)
{
  extern Scheme_Object *objscheme_bundle_wxMouseEvent(wxMouseEvent *);
  Scheme_Object *p[2], *obj;
  Bool retval;
  jmp_buf savebuf;

  p[0] = objscheme_bundle_wxObject(media);
  p[1] = objscheme_bundle_wxMouseEvent(&event);

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    obj = scheme_apply(kctsr(data), 2, p);
    retval = objscheme_unbundle_bool(obj, "Scheme mouse callback");
  } else
    retval = 0;

  COPY_JMPBUF(scheme_error_buf, savebuf);
  
  return retval;
}

static Bool GrabMouseCallbackToScheme(char *s, wxKeymap *km,
				      wxObject *media, wxMouseEvent &event, 
				      KeymapCallbackToSchemeRec *data)
{
  extern Scheme_Object *objscheme_bundle_wxMouseEvent(wxMouseEvent *);
  Scheme_Object *p[3], *obj;
  Bool retval;
  jmp_buf savebuf;

  p[0] = objscheme_bundle_string(s);
  p[1] = objscheme_bundle_wxKeymap(km);
  p[2] = objscheme_bundle_wxObject(media);
  p[3] = objscheme_bundle_wxMouseEvent(&event);

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    obj = scheme_apply(kctsr(data), 4, p);
    retval = objscheme_unbundle_bool(obj, "Scheme grab-mouse callback");
  } else
    retval = 0;

  COPY_JMPBUF(scheme_error_buf, savebuf);
 
  return retval;
}

static void ErrorCallbackToScheme(KeymapCallbackToSchemeRec *data, char *err)
{
  Scheme_Object *p[1];
  jmp_buf savebuf;

  p[0] = objscheme_bundle_string(err);

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    scheme_apply_multi(kctsr(data), 1, p);
  }

  COPY_JMPBUF(scheme_error_buf, savebuf);
}

static void BreakSequenceCallbackToScheme(KeymapCallbackToSchemeRec *data)
{
  jmp_buf savebuf;

  COPY_JMPBUF(savebuf, scheme_error_buf);

  if (!scheme_setjmp(scheme_error_buf)) {
    scheme_apply_multi(kctsr(data), 0, NULL);
  }

  COPY_JMPBUF(scheme_error_buf, savebuf);
}


static Scheme_Object *breakType_wxBREAK_FOR_CARET_sym = NULL;
static Scheme_Object *breakType_wxBREAK_FOR_LINE_sym = NULL;
static Scheme_Object *breakType_wxBREAK_FOR_SELECTION_sym = NULL;
static Scheme_Object *breakType_wxBREAK_FOR_USER_1_sym = NULL;
static Scheme_Object *breakType_wxBREAK_FOR_USER_2_sym = NULL;

static void init_symset_breakType(void) {
  breakType_wxBREAK_FOR_CARET_sym = scheme_intern_symbol("break-for-caret");
  breakType_wxBREAK_FOR_LINE_sym = scheme_intern_symbol("break-for-line");
  breakType_wxBREAK_FOR_SELECTION_sym = scheme_intern_symbol("break-for-selection");
  breakType_wxBREAK_FOR_USER_1_sym = scheme_intern_symbol("break-for-user-1");
  breakType_wxBREAK_FOR_USER_2_sym = scheme_intern_symbol("break-for-user-2");
}

static int unbundle_symset_breakType(Scheme_Object *v, const char *where) {
  if (!breakType_wxBREAK_FOR_USER_2_sym) init_symset_breakType();
  if (0) { }
  else if (v == breakType_wxBREAK_FOR_CARET_sym) { return wxBREAK_FOR_CARET; }
  else if (v == breakType_wxBREAK_FOR_LINE_sym) { return wxBREAK_FOR_LINE; }
  else if (v == breakType_wxBREAK_FOR_SELECTION_sym) { return wxBREAK_FOR_SELECTION; }
  else if (v == breakType_wxBREAK_FOR_USER_1_sym) { return wxBREAK_FOR_USER_1; }
  else if (v == breakType_wxBREAK_FOR_USER_2_sym) { return wxBREAK_FOR_USER_2; }
  if (where) scheme_wrong_type(where, "breakType symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_breakType(Scheme_Object *v, const char *where) {
  if (!breakType_wxBREAK_FOR_USER_2_sym) init_symset_breakType();
  if (0) { }
  else if (v == breakType_wxBREAK_FOR_CARET_sym) { return 1; }
  else if (v == breakType_wxBREAK_FOR_LINE_sym) { return 1; }
  else if (v == breakType_wxBREAK_FOR_SELECTION_sym) { return 1; }
  else if (v == breakType_wxBREAK_FOR_USER_1_sym) { return 1; }
  else if (v == breakType_wxBREAK_FOR_USER_2_sym) { return 1; }
  if (where) scheme_wrong_type(where, "breakType symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_breakType(int v) {
  if (!breakType_wxBREAK_FOR_USER_2_sym) init_symset_breakType();
  switch (v) {
  case wxBREAK_FOR_CARET: return breakType_wxBREAK_FOR_CARET_sym;
  case wxBREAK_FOR_LINE: return breakType_wxBREAK_FOR_LINE_sym;
  case wxBREAK_FOR_SELECTION: return breakType_wxBREAK_FOR_SELECTION_sym;
  case wxBREAK_FOR_USER_1: return breakType_wxBREAK_FOR_USER_1_sym;
  case wxBREAK_FOR_USER_2: return breakType_wxBREAK_FOR_USER_2_sym;
  default: return NULL;
  }
}








class os_wxMediaWordbreakMap : public wxMediaWordbreakMap {
 public:

  os_wxMediaWordbreakMap(Scheme_Object * obj);
  ~os_wxMediaWordbreakMap();
};

Scheme_Object *os_wxMediaWordbreakMap_class;

os_wxMediaWordbreakMap::os_wxMediaWordbreakMap(Scheme_Object * o)
: wxMediaWordbreakMap()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMediaWordbreakMap::~os_wxMediaWordbreakMap()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxMediaWordbreakMapIsUsed(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaWordbreakMap *)((Scheme_Class_Object *)obj)->primdata)->IsUsed();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaWordbreakMapAdjustUsage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-wordbreak-map%::adjust-usage");

  
  ((wxMediaWordbreakMap *)((Scheme_Class_Object *)obj)->primdata)->AdjustUsage(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaWordbreakMapGetMap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-wordbreak-map%::get-map");

  
  r = ((wxMediaWordbreakMap *)((Scheme_Class_Object *)obj)->primdata)->GetMap(x0);

  
  
  return bundle_symset_breakType(r);;
}

#pragma argsused
static Scheme_Object *os_wxMediaWordbreakMapSetMap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-wordbreak-map%::set-map");
  x1 = unbundle_symset_breakType(p[1], "wx:media-wordbreak-map%::set-map");;

  
  ((wxMediaWordbreakMap *)((Scheme_Class_Object *)obj)->primdata)->SetMap(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaWordbreakMap_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMediaWordbreakMap *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:media-wordbreak-map%::initialization", 0, 0, n, p);

  
  realobj = new os_wxMediaWordbreakMap(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxMediaWordbreakMap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:media-wordbreak-map%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:media-wordbreak-map%");
}

void objscheme_setup_wxMediaWordbreakMap(void *env)
{
if (os_wxMediaWordbreakMap_class) {
    objscheme_add_global_class(os_wxMediaWordbreakMap_class,  "wx:media-wordbreak-map%", env);
} else {
  os_wxMediaWordbreakMap_class = objscheme_def_prim_class(env, "wx:media-wordbreak-map%", "wx:object%", os_wxMediaWordbreakMap_ConstructScheme, 5);

  scheme_add_method_w_arity(os_wxMediaWordbreakMap_class,"get-class-name",objscheme_classname_os_wxMediaWordbreakMap, 0, 0);

 scheme_add_method_w_arity(os_wxMediaWordbreakMap_class, "is-used?", os_wxMediaWordbreakMapIsUsed, 0, 0);
 scheme_add_method_w_arity(os_wxMediaWordbreakMap_class, "adjust-usage", os_wxMediaWordbreakMapAdjustUsage, 1, 1);
 scheme_add_method_w_arity(os_wxMediaWordbreakMap_class, "get-map", os_wxMediaWordbreakMapGetMap, 1, 1);
 scheme_add_method_w_arity(os_wxMediaWordbreakMap_class, "set-map", os_wxMediaWordbreakMapSetMap, 2, 2);


  scheme_made_class(os_wxMediaWordbreakMap_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMediaWordbreakMap, wxTYPE_WORDBREAK_MAP);

}
  scheme_install_xc_global("wx:the-media-wordbreak-map", objscheme_bundle_wxMediaWordbreakMap(&wxTheMediaWordbreakMap), env);
}

int objscheme_istype_wxMediaWordbreakMap(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMediaWordbreakMap_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:media-wordbreak-map%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMediaWordbreakMap(class wxMediaWordbreakMap *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_WORDBREAK_MAP) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMediaWordbreakMap_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMediaWordbreakMap *objscheme_unbundle_wxMediaWordbreakMap(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMediaWordbreakMap(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMediaWordbreakMap *)o->primdata;
  else
    return (wxMediaWordbreakMap *)o->primdata;
}



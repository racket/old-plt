(module search mzscheme
  
  (require "board.ss"
           "heuristics.ss"
           "weights.scm")
  
  (provide compute-move best-cmd)
  
  (define (weight-from-goal x) (* (step-weight) x))
  
  ;(make-qelt qelt move qelt)
  (define-struct qelt (left move right))
  
  ;(make-move num num num cord num command)
  (define-struct move (weight x y back step orig))
  ;(make-cord num num)
  (define-struct cord (x y))
  
  (define current-player (make-parameter null))
  
  (define best-cmd (make-parameter null))
  (define best-weight (make-parameter -inf.0))
  (define queue-head (make-parameter null))
  (define in-queue (make-parameter 0))
  
  (define (enqueue move)
    (cond
      ((void? move) (void))
      ((null? (queue-head)) 
       (best-cmd (move-orig move))
       (best-weight (move-weight move))

       (queue-head (make-qelt null move null))
       (in-queue 1))
      (else
       (let loop ((current (queue-head)))
         (if (> (move-weight move) (move-weight (qelt-move current)))
             (let ((q (make-qelt (qelt-left current) move current)))
               (cond 
                 ((and (= (in-queue) 6) (eq? current (queue-head)))
                  (when (> (move-weight move) (best-weight))
                    (best-cmd (move-orig move))
                    (best-weight (move-weight move)))
                  (queue-head q)
                  (set-qelt-left! current q)
                  (remove-queue-tail))
                 ((= (in-queue) 6)
                  (set-qelt-left! current q)
                  (set-qelt-right! (qelt-left q) q)
                  (remove-queue-tail))
                 ((eq? current (queue-head))
                  (when (> (move-weight move) (best-weight))
                    (best-cmd (move-orig move))
                    (best-weight (move-weight move)))
                  (queue-head q)
                  (set-qelt-left! current q)
                  (in-queue (add1 (in-queue))))
                 (else
                  (set-qelt-left! current q)
                  (set-qelt-right! (qelt-left q) q)
                  (in-queue (add1 (in-queue))))))
             (if (null? (qelt-right current))
                 (when (< (in-queue) 6)
                   (let ((q (make-qelt current move null)))
                     (set-qelt-right! current q)
                     (in-queue (add1 (in-queue)))))
                 (loop (qelt-right current))))))))
  
  (define (dequeue)
    (let ((current (queue-head)))
      (queue-head (qelt-right current))
      (unless (null? (queue-head)) (set-qelt-left! (queue-head) null))
      (in-queue (sub1 (in-queue)))
      (qelt-move current)))
  
  (define (remove-queue-tail)
    (let loop ((current (queue-head)))
      (if (null? (qelt-right current))
          (set-qelt-right! (qelt-left current) null)
          (loop (qelt-right current)))))
  
  (define (get-move-weight x y)
    (let-values (((weight bid _ __) (calc-weight 'M x y (current-player) null)))
      (values weight bid)))
  
  (define (move-maker weighted-g back g command?)
    (lambda (weight x y bid . special)
      (make-move (+ weighted-g weight) x y back g (if command? command? (make-command bid (car special) (cadr special))))))
  
  (define (generate-first-moves x y packages)
    (let ((maker (move-maker (weight-from-goal 1) (make-cord x y) 1 #f)))
      (let-values (((p-weight p-bid _ p) (calc-weight 'P x y (current-player) packages))
                   ((d-weight d-bid d __) (if (not (null? (search-player-packages (current-player))))
                                              (calc-weight 'D x y (current-player) null)
                                              (values #f void void void)))
                   ((s-weight s-bid) (if (> x 1) (get-move-weight (sub1 x) y) (values #f void)))
                   ((n-weight n-bid) (if (< x (board-height)) (get-move-weight (add1 x) y) (values #f void)))
                   ((w-weight w-bid) (if (> y 1) (get-move-weight x (sub1 y)) (values #f void)))
                   ((e-weight e-bid) (if (< y (board-width)) (get-move-weight x (add1 y)) (values #f void))))
        (list (maker p-weight x y p-bid 'P p)
              (when d-weight (maker d-weight x y d-bid 'D d))
              (when n-weight (maker n-weight (add1 x) y n-bid 'N null))
              (when s-weight (maker s-weight (sub1 x) y s-bid 'S null))
              (when e-weight (maker e-weight x (add1 y) e-bid 'E null))
              (when w-weight (maker w-weight x (sub1 y) w-bid 'W null))))))          
  
  (define (generate-moves x y back back-check g command)
    (let ((maker (move-maker (weight-from-goal g) back g command))
          (old-x (cord-x back-check))
          (old-y (cord-y back-check)))
      (let-values (((d-weight d-bid d _) (if (not (null? (search-player-packages (current-player))))
                                             (calc-weight 'D x y (current-player) null)
                                             (values #f void void void)))
                   ((s-weight s-bid) (if (and (> x 1)
                                              (not (and (= old-x (sub1 x))
                                                        (= old-y y))))
                                         (get-move-weight (sub1 x) y) (values #f void)))
                   ((n-weight n-bid) (if (and (< x (board-height))
                                              (not (and (= old-x (add1 x))
                                                        (= old-y y))))
                                         (get-move-weight (add1 x) y) (values #f void)))
                   ((w-weight w-bid) (if (and (> y 1)
                                              (not (and (= old-x x)
                                                        (= old-y (sub1 y)))))
                                         (get-move-weight x (sub1 y)) (values #f void)))
                   ((e-weight e-bid) (if (and (< y (board-width))
                                              (not (and (= old-x x)
                                                        (= old-y (add1 y)))))
                                         (get-move-weight x (add1 y)) (values #f void))))
        (list (when d-weight (maker d-weight x y d-bid))
              (when n-weight (maker n-weight (add1 x) y n-bid))
              (when s-weight (maker s-weight (sub1 x) y s-bid))
              (when e-weight (maker e-weight x (add1 y) e-bid))
              (when w-weight (maker w-weight x (sub1 y) w-bid))))))
  
  (define (compute-move packages robots)
    (display "calling compute-move") (newline)
    (display (get-player-x))(display " : ")(display (get-player-y))(newline)
    (queue-head null)
    (in-queue 0)
    (best-cmd null)
    (best-weight -inf.0)
    
    (current-player (make-search-player (get-player-x) (get-player-y) (player-id) (player-money) (player-capacity) (packages-held)))
    (update-robots robots (current-player))
    
    (for-each enqueue 
              (generate-first-moves (get-player-x) (get-player-y) packages))
    (search-node (dequeue))
    (printf "~a~n" (best-cmd))
    (printf "~a~n" (player-money))
    (best-cmd)
    )

  
  (define (search-node move)
    (when (< (move-step move) 10)
      (for-each enqueue (generate-moves (move-x move) 
                                        (move-y move) 
                                        (make-cord (move-x move) (move-y move)) 
                                        (move-back move) 
                                        (add1 (move-step move))  
                                        (move-orig move)))
      (search-node (dequeue))))
  
  )
_Dromedary_

Dromedary provides a CAML-like dialect of ML based on the Objective
Caml system release 3.04 Documentation and user's manual by Xavier
Leroy et al. It (purposely) does not provide full ML functionality,
but only that which would be necessary for a teaching environment.

The following features of OCAML are supported:
 - Built-in constant types: int, float, bool, char, string, unit
 - More complex data-types: lists, tuples, exceptions, option types,
references, and arrays
 - User-defined datatypes
 - let and recursive let, both when used for local bindings and top-level
definitions
 - Comments
 - Pattern matching
 - Exception handling
 - Sequences
 - While and for loops
 - The List library and the Array library (as well as the built-in
functions for lists and arrays).

Dromedary first type-checks a program (including any necessary
type-inferencing) before it compiles it. It then displays the
result(s) of the program in the standard ocaml "type = value" format.

Programs may be entered in the definitions window or interactions
window. In order to evaluate what you have typed into the interactions
window, you must press ALT-<Enter> (The enter key on the numerical
keypad).

Known bugs/limitations:
 - Syntax highlighting (from Check Syntax) is currently minimal.
 - No good default indentation.
 - Patten matching does not check to make sure the pattern is
exhaustive for the type and that there is no overlap.
 - let rec only works for functions and not other recursive
definitions that ocaml allows (such as the infinite list of 1s, e.g.,
"let rec ones = 1 :: ones;;".
 - I don't believe it is very rigorous about differentiating between
ints and floats.
 - It does not warn if the types of all but the last expression in a
sequence are not unit.
 - It does not check that the same variable isn't bound multiple times
in a let or match.

Please submit any poor error messages as bugs so I can make sure I have nice error messages with appropriate syntax highlighting.

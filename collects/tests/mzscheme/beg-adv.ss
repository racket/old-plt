
(syntax-test #'())
(syntax-test #'#%app)

(syntax-test #'define)
(syntax-test #'(define))
(syntax-test #'(define x))
(syntax-test #'(define x 10 12))
(syntax-test #'(define (10 y) 12))
(syntax-test #'(define ("x" y) 12))
(syntax-test #'(define (y 10) 12))
(syntax-test #'(define (y "x") 12))
(syntax-test #'(define (y z 10) 12))
(syntax-test #'(define (x y) 10 12))
(syntax-test #'(define (x y y) 10))
(syntax-test #'(define () 10))
(syntax-test #'(define 1 10))
(syntax-test #'(define x lambda))
(syntax-test #'(define x (lambda)))
(syntax-test #'(define x (lambda (x))))
(syntax-test #'(define x (lambda y)))
(syntax-test #'(define x (lambda y 10)))
(syntax-test #'(define x (lambda (10) 10)))
(syntax-test #'(define x (lambda (x 10) 10)))
(syntax-test #'(define x (lambda (y) 10 11)))
(syntax-test #'(define x (lambda (y) 10 11)))
(syntax-test #'(define x (lambda (y y) 10)))
(syntax-test #'(+ (define x 5)))

(syntax-test #'define-struct)
(syntax-test #'(define-struct))
(syntax-test #'(define-struct a))
(syntax-test #'(define-struct a (b) 10))
(syntax-test #'(define-struct a (b) 10 11 12))
(syntax-test #'(define-struct 10 (b)))
(syntax-test #'(define-struct a b))
(syntax-test #'(define-struct a (10)))
(syntax-test #'(define-struct a (b 10)))
(syntax-test #'(define-struct (a) (b)))
(syntax-test #'(define-struct a (b b)))
(syntax-test #'(+ 1 (define-struct a (b))))

(define x 5)
(define (f y) (+ x y))
(test 5 'lookup x)
(test 9 f 4)
(define f2 (lambda (y) (+ x y)))
(test 15 f 10)

(define-struct a0 ())
(define-struct a1 (b))
(define-struct a3 (b c d))
(test #t a0? (make-a0))
(test #t a1? (make-a1 1))
(test #t a3? (make-a3 1 2 3))
(test #f a1? (make-a3 1 2 3))
(test #f a3? (make-a1 1))

(syntax-test #'cond)
(syntax-test #'(cond))
(syntax-test #'(cond 1))
(syntax-test #'(cond [#t 6] 2))
(syntax-test #'(cond [else 6] [#f 10]))
(syntax-test #'(cond [else 6] [else 10]))
(syntax-test #'(cond []))
(syntax-test #'(cond [1]))
(syntax-test #'(cond [1 2 3]))
(syntax-test #'(cond [1 2][]))
(syntax-test #'(cond [1 2][3 4 5]))

(test 17 'cond (cond [else 17]))
(test 18 'cond (cond [#t 18]))
(test 19 'cond (cond [(zero? 10) 0] [#t 19]))
(test 19 'cond (cond [(zero? 10) 0] [else 19]))

(err/rt-test (cond [#f 10]) exn:user?) ;; Should it be a different exception?
(err/rt-test (cond [1 10]))

(syntax-test #'if)
(syntax-test #'(if))
(syntax-test #'(if #t))
(syntax-test #'(if #t 1))
(syntax-test #'(if #t 1 2 3))

(err/rt-test (if 1 2 3))

(syntax-test #'and)
(syntax-test #'(and))
(syntax-test #'(and #t))

(err/rt-test (and 1 #t))
(err/rt-test (and #t 1))
(test #f 'ok-and (and #t #f 1))

(syntax-test #'or)
(syntax-test #'(or))
(syntax-test #'(or #t))

(err/rt-test (or 1 #f))
(err/rt-test (or #f 1))
(test #t 'ok-or (or #f #t 1))

(test #t empty? empty)
(test #t cons? (cons 1 empty))

(err/rt-test (cons 1 2))
(err/rt-test (append (list 1) 2))

(test #t boolean? true)
(test #t boolean? false)
(test #t eq? #t true)
(test #t eq? #f false)

(arity-test + 2 -1)
(arity-test * 2 -1)
(arity-test / 2 -1)
(arity-test - 1 -1)

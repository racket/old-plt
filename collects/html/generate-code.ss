;; copyright by Paul Graunke June 2000 AD
(require-library "pretty.ss")
(require-library "date.ss")

;; date-string : -> String
(define (date-string) (date->string (seconds->date (current-seconds)) 'seconds-please))

(define names
  (apply append (map car (call-with-input-file "html-spec" read))))

;; generate-structs : -> Void
(define (generate-structs)
  (call-with-output-file "html-structs.ss"
    (lambda (out)
      (fprintf out ";; This code was machine generated by generate-code.ss ~a~n" (date-string))
      (for-each
       (lambda (x) (pretty-print x  out))
       (cons
        '(define-struct html-element (attributes content))
        (map (lambda (x)
               `(define-struct (,x struct:html-element) ()))
             names))))
    'truncate))

;; generate-case : -> Void
(define (generate-case)
  (call-with-output-file "case.ss"
    (lambda (out)
      (fprintf out ";;This file was generated by genrate-code.ss on ~a~n" (date-string))
      (fprintf out "~n;; xml-single-content->html : Content (listof Html-content) -> (listof Html-content)~n")
      (pretty-print
       `(define (xml-single-content->html x acc)
          (cond
            [(element? x)
             (cons (case (element-name x)
                     ,@(map (lambda (name)
                              `[(,name) (,(string->symbol (string-append "make-" (symbol->string name)))
                                         (element-attributes x)
                                         (xml-contents->html (element-content x)))])
                            names))
                   acc)]
            [(or (pcdata? x) (entity? x)) (cons x acc)]
            [else acc]))
       out))
    'truncate))

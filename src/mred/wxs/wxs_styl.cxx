/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_styl.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_style.h"
#include "wx_mtype.h"





#include "wxscheme.h"
#include "wxs_styl.h"
#include "wxscomon.h"





class os_wxMultColour : public wxMultColour {
 public:

  ~os_wxMultColour();
};

Scheme_Object *os_wxMultColour_class;

os_wxMultColour::~os_wxMultColour()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxMultColourSet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;

  
  x0 = objscheme_unbundle_float(p[0], "wx:mult-colour%::set");
  x1 = objscheme_unbundle_float(p[1], "wx:mult-colour%::set");
  x2 = objscheme_unbundle_float(p[2], "wx:mult-colour%::set");

  
  ((wxMultColour *)((Scheme_Class_Object *)obj)->primdata)->Set(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMultColourGet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:mult-colour%::get", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "wx:mult-colour%::get"), "wx:mult-colour%::get");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:mult-colour%::get", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "wx:mult-colour%::get"), "wx:mult-colour%::get");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:mult-colour%::get", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "wx:mult-colour%::get"), "wx:mult-colour%::get");

  
  ((wxMultColour *)((Scheme_Class_Object *)obj)->primdata)->Get(x0, x1, x2);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_double(_x2));
  
  return scheme_void;
}

static Scheme_Object *objscheme_wxMultColour_Getr(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-r", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMultColour *)cobj->primdata)->wxMultColour::r;
  else
    v = ((wxMultColour *)cobj->primdata)->r;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxMultColour_Setr(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-r", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:mult-colour%::r");
  ((wxMultColour *)cobj->primdata)->r = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMultColour_Getg(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-g", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMultColour *)cobj->primdata)->wxMultColour::g;
  else
    v = ((wxMultColour *)cobj->primdata)->g;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxMultColour_Setg(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-g", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:mult-colour%::g");
  ((wxMultColour *)cobj->primdata)->g = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMultColour_Getb(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-b", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMultColour *)cobj->primdata)->wxMultColour::b;
  else
    v = ((wxMultColour *)cobj->primdata)->b;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxMultColour_Setb(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-b", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:mult-colour%::b");
  ((wxMultColour *)cobj->primdata)->b = v;

  return scheme_void;
}

static Scheme_Object *objscheme_classname_os_wxMultColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:mult-colour%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:mult-colour%");
}

void objscheme_setup_wxMultColour(void *env)
{
if (os_wxMultColour_class) {
    objscheme_add_global_class(os_wxMultColour_class,  "wx:mult-colour%", env);
} else {
  os_wxMultColour_class = objscheme_def_prim_class(env, "wx:mult-colour%", "wx:object%", NULL, 9);

  scheme_add_method_w_arity(os_wxMultColour_class,"get-class-name",objscheme_classname_os_wxMultColour, 0, 0);

 scheme_add_method_w_arity(os_wxMultColour_class, "set", os_wxMultColourSet, 3, 3);
 scheme_add_method_w_arity(os_wxMultColour_class, "get", os_wxMultColourGet, 3, 3);

  scheme_add_method_w_arity(os_wxMultColour_class,"get-r", objscheme_wxMultColour_Getr, 0, 0);
  scheme_add_method_w_arity(os_wxMultColour_class,"set-r", objscheme_wxMultColour_Setr, 1, 1);
  scheme_add_method_w_arity(os_wxMultColour_class,"get-g", objscheme_wxMultColour_Getg, 0, 0);
  scheme_add_method_w_arity(os_wxMultColour_class,"set-g", objscheme_wxMultColour_Setg, 1, 1);
  scheme_add_method_w_arity(os_wxMultColour_class,"get-b", objscheme_wxMultColour_Getb, 0, 0);
  scheme_add_method_w_arity(os_wxMultColour_class,"set-b", objscheme_wxMultColour_Setb, 1, 1);

  scheme_made_class(os_wxMultColour_class);


}
}

int objscheme_istype_wxMultColour(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMultColour_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:mult-colour%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMultColour(class wxMultColour *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMultColour_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMultColour *objscheme_unbundle_wxMultColour(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMultColour(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMultColour *)o->primdata;
  else
    return (wxMultColour *)o->primdata;
}





class os_wxAddColour : public wxAddColour {
 public:

  ~os_wxAddColour();
};

Scheme_Object *os_wxAddColour_class;

os_wxAddColour::~os_wxAddColour()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxAddColourSet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  short x0;
  short x1;
  short x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:add-colour%::set");
  x1 = objscheme_unbundle_integer(p[1], "wx:add-colour%::set");
  x2 = objscheme_unbundle_integer(p[2], "wx:add-colour%::set");

  
  ((wxAddColour *)((Scheme_Class_Object *)obj)->primdata)->Set(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxAddColourGet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  short _x0;
  short* x0 = &_x0;
  short _x1;
  short* x1 = &_x1;
  short _x2;
  short* x2 = &_x2;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:add-colour%::get", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:add-colour%::get"), "wx:add-colour%::get");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:add-colour%::get", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:add-colour%::get"), "wx:add-colour%::get");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:add-colour%::get", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_integer(objscheme_unbox(p[2], "wx:add-colour%::get"), "wx:add-colour%::get");

  
  ((wxAddColour *)((Scheme_Class_Object *)obj)->primdata)->Get(x0, x1, x2);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_integer(_x2));
  
  return scheme_void;
}

static Scheme_Object *objscheme_wxAddColour_Getr(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  short v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-r", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxAddColour *)cobj->primdata)->wxAddColour::r;
  else
    v = ((wxAddColour *)cobj->primdata)->r;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxAddColour_Setr(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  short v;

  if (n != 1) scheme_wrong_count("set-r", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:add-colour%::r");
  ((wxAddColour *)cobj->primdata)->r = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxAddColour_Getg(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  short v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-g", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxAddColour *)cobj->primdata)->wxAddColour::g;
  else
    v = ((wxAddColour *)cobj->primdata)->g;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxAddColour_Setg(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  short v;

  if (n != 1) scheme_wrong_count("set-g", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:add-colour%::g");
  ((wxAddColour *)cobj->primdata)->g = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxAddColour_Getb(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  short v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-b", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxAddColour *)cobj->primdata)->wxAddColour::b;
  else
    v = ((wxAddColour *)cobj->primdata)->b;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxAddColour_Setb(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  short v;

  if (n != 1) scheme_wrong_count("set-b", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:add-colour%::b");
  ((wxAddColour *)cobj->primdata)->b = v;

  return scheme_void;
}

static Scheme_Object *objscheme_classname_os_wxAddColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:add-colour%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:add-colour%");
}

void objscheme_setup_wxAddColour(void *env)
{
if (os_wxAddColour_class) {
    objscheme_add_global_class(os_wxAddColour_class,  "wx:add-colour%", env);
} else {
  os_wxAddColour_class = objscheme_def_prim_class(env, "wx:add-colour%", "wx:object%", NULL, 9);

  scheme_add_method_w_arity(os_wxAddColour_class,"get-class-name",objscheme_classname_os_wxAddColour, 0, 0);

 scheme_add_method_w_arity(os_wxAddColour_class, "set", os_wxAddColourSet, 3, 3);
 scheme_add_method_w_arity(os_wxAddColour_class, "get", os_wxAddColourGet, 3, 3);

  scheme_add_method_w_arity(os_wxAddColour_class,"get-r", objscheme_wxAddColour_Getr, 0, 0);
  scheme_add_method_w_arity(os_wxAddColour_class,"set-r", objscheme_wxAddColour_Setr, 1, 1);
  scheme_add_method_w_arity(os_wxAddColour_class,"get-g", objscheme_wxAddColour_Getg, 0, 0);
  scheme_add_method_w_arity(os_wxAddColour_class,"set-g", objscheme_wxAddColour_Setg, 1, 1);
  scheme_add_method_w_arity(os_wxAddColour_class,"get-b", objscheme_wxAddColour_Getb, 0, 0);
  scheme_add_method_w_arity(os_wxAddColour_class,"set-b", objscheme_wxAddColour_Setb, 1, 1);

  scheme_made_class(os_wxAddColour_class);


}
}

int objscheme_istype_wxAddColour(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxAddColour_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:add-colour%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxAddColour(class wxAddColour *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxAddColour_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxAddColour *objscheme_unbundle_wxAddColour(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxAddColour(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxAddColour *)o->primdata;
  else
    return (wxAddColour *)o->primdata;
}




  







class os_wxStyleDelta : public wxStyleDelta {
 public:

  os_wxStyleDelta(Scheme_Object * obj, int x0 = wxCHANGE_NOTHING, int x1 = 0);
  ~os_wxStyleDelta();
};

Scheme_Object *os_wxStyleDelta_class;

os_wxStyleDelta::os_wxStyleDelta(Scheme_Object * o, int x0, int x1)
: wxStyleDelta(x0, x1)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxStyleDelta::~os_wxStyleDelta()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "wx:style-delta%::copy", 0);

  
  ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->Copy(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaCollapse(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "wx:style-delta%::collapse", 0);

  
  r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->Collapse(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaEqual(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "wx:style-delta%::equal?", 0);

  
  r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->Equal(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaSetDeltaForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleDelta* r;
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:style-delta%::set-delta-foreground (color name case)", 1, 1, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:style-delta%::set-delta-foreground (color name case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaForeground(x0);

    
    
  } else  {
    class wxColour* x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:style-delta%::set-delta-foreground (wx:colour% case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "wx:style-delta%::set-delta-foreground (wx:colour% case)", 0);

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaForeground(*x0);

    
    
  }

  return objscheme_bundle_wxStyleDelta(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaSetDeltaBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleDelta* r;
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:style-delta%::set-delta-background (color name case)", 1, 1, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:style-delta%::set-delta-background (color name case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaBackground(x0);

    
    
  } else  {
    class wxColour* x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:style-delta%::set-delta-background (wx:colour% case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "wx:style-delta%::set-delta-background (wx:colour% case)", 0);

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaBackground(*x0);

    
    
  }

  return objscheme_bundle_wxStyleDelta(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaSetDeltaFace(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleDelta* r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:style-delta%::set-delta-face");

  
  r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaFace(x0);

  
  
  return objscheme_bundle_wxStyleDelta(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaSetDelta(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleDelta* r;
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:style-delta%::set-delta");
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:style-delta%::set-delta");
  } else
    x1 = 0;

  
  r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(x0, x1);

  
  
  return objscheme_bundle_wxStyleDelta(r);
}

static Scheme_Object *objscheme_wxStyleDelta_Getfamily(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-family", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::family;
  else
    v = ((wxStyleDelta *)cobj->primdata)->family;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_Setfamily(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-family", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:style-delta%::family");
  ((wxStyleDelta *)cobj->primdata)->family = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_Getface(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  nstring v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-face", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::face;
  else
    v = ((wxStyleDelta *)cobj->primdata)->face;

  return objscheme_bundle_string((char *)v);
}

static Scheme_Object *objscheme_wxStyleDelta_Setface(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  nstring v;

  if (n != 1) scheme_wrong_count("set-face", 1, 1, n, p);

  v = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:style-delta%::face");
  ((wxStyleDelta *)cobj->primdata)->face = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetsizeMult(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-size-mult", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::sizeMult;
  else
    v = ((wxStyleDelta *)cobj->primdata)->sizeMult;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetsizeMult(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-size-mult", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:style-delta%::size-mult");
  ((wxStyleDelta *)cobj->primdata)->sizeMult = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetsizeAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-size-add", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::sizeAdd;
  else
    v = ((wxStyleDelta *)cobj->primdata)->sizeAdd;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetsizeAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-size-add", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:style-delta%::size-add");
  ((wxStyleDelta *)cobj->primdata)->sizeAdd = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetweightOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-weight-on", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::weightOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->weightOn;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetweightOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-weight-on", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:style-delta%::weight-on");
  ((wxStyleDelta *)cobj->primdata)->weightOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetweightOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-weight-off", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::weightOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->weightOff;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetweightOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-weight-off", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:style-delta%::weight-off");
  ((wxStyleDelta *)cobj->primdata)->weightOff = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetstyleOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-style-on", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::styleOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->styleOn;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetstyleOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-style-on", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:style-delta%::style-on");
  ((wxStyleDelta *)cobj->primdata)->styleOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetstyleOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-style-off", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::styleOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->styleOff;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetstyleOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-style-off", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:style-delta%::style-off");
  ((wxStyleDelta *)cobj->primdata)->styleOff = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetunderlinedOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-underlined-on", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::underlinedOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->underlinedOn;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxStyleDelta_SetunderlinedOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-underlined-on", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:style-delta%::underlined-on");
  ((wxStyleDelta *)cobj->primdata)->underlinedOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetunderlinedOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-underlined-off", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::underlinedOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->underlinedOff;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxStyleDelta_SetunderlinedOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-underlined-off", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:style-delta%::underlined-off");
  ((wxStyleDelta *)cobj->primdata)->underlinedOff = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GettransparentTextBackingOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-transparent-text-backing-on", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::transparentTextBackingOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->transparentTextBackingOn;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxStyleDelta_SettransparentTextBackingOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-transparent-text-backing-on", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:style-delta%::transparent-text-backing-on");
  ((wxStyleDelta *)cobj->primdata)->transparentTextBackingOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GettransparentTextBackingOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-transparent-text-backing-off", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::transparentTextBackingOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->transparentTextBackingOff;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxStyleDelta_SettransparentTextBackingOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-transparent-text-backing-off", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:style-delta%::transparent-text-backing-off");
  ((wxStyleDelta *)cobj->primdata)->transparentTextBackingOff = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetforegroundMult(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxMultColour* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-foreground-mult", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = &((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::foregroundMult;
  else
    v = &((wxStyleDelta *)cobj->primdata)->foregroundMult;

  return objscheme_bundle_wxMultColour(v);
}

static Scheme_Object *objscheme_wxStyleDelta_GetbackgroundMult(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxMultColour* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-background-mult", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = &((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::backgroundMult;
  else
    v = &((wxStyleDelta *)cobj->primdata)->backgroundMult;

  return objscheme_bundle_wxMultColour(v);
}

static Scheme_Object *objscheme_wxStyleDelta_GetforegroundAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxAddColour* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-foreground-add", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = &((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::foregroundAdd;
  else
    v = &((wxStyleDelta *)cobj->primdata)->foregroundAdd;

  return objscheme_bundle_wxAddColour(v);
}

static Scheme_Object *objscheme_wxStyleDelta_GetbackgroundAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxAddColour* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-background-add", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = &((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::backgroundAdd;
  else
    v = &((wxStyleDelta *)cobj->primdata)->backgroundAdd;

  return objscheme_bundle_wxAddColour(v);
}

static Scheme_Object *objscheme_wxStyleDelta_GetalignmentOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-alignment-on", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::alignmentOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->alignmentOn;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetalignmentOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-alignment-on", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:style-delta%::alignment-on");
  ((wxStyleDelta *)cobj->primdata)->alignmentOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetalignmentOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-alignment-off", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::alignmentOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->alignmentOff;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetalignmentOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-alignment-off", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:style-delta%::alignment-off");
  ((wxStyleDelta *)cobj->primdata)->alignmentOff = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleDelta_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxStyleDelta *realobj;
  int x0;
  int x1;

  
  if ((n > 2)) 
    scheme_wrong_count("wx:style-delta%::initialization", 0, 2, n, p);
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:style-delta%::initialization");
  } else
    x0 = wxCHANGE_NOTHING;
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:style-delta%::initialization");
  } else
    x1 = 0;

  
  realobj = new os_wxStyleDelta(obj, x0, x1);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxStyleDelta(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:style-delta%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:style-delta%");
}

void objscheme_setup_wxStyleDelta(void *env)
{
if (os_wxStyleDelta_class) {
    objscheme_add_global_class(os_wxStyleDelta_class,  "wx:style-delta%", env);
} else {
  os_wxStyleDelta_class = objscheme_def_prim_class(env, "wx:style-delta%", "wx:object%", os_wxStyleDelta_ConstructScheme, 40);

  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-class-name",objscheme_classname_os_wxStyleDelta, 0, 0);

 scheme_add_method_w_arity(os_wxStyleDelta_class, "copy", os_wxStyleDeltaCopy, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "collapse", os_wxStyleDeltaCollapse, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "equal?", os_wxStyleDeltaEqual, 1, 1);
 scheme_add_method(os_wxStyleDelta_class, "set-delta-foreground", os_wxStyleDeltaSetDeltaForeground);
 scheme_add_method(os_wxStyleDelta_class, "set-delta-background", os_wxStyleDeltaSetDeltaBackground);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "set-delta-face", os_wxStyleDeltaSetDeltaFace, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "set-delta", os_wxStyleDeltaSetDelta, 1, 2);

  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-family", objscheme_wxStyleDelta_Getfamily, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-family", objscheme_wxStyleDelta_Setfamily, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-face", objscheme_wxStyleDelta_Getface, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-face", objscheme_wxStyleDelta_Setface, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-size-mult", objscheme_wxStyleDelta_GetsizeMult, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-size-mult", objscheme_wxStyleDelta_SetsizeMult, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-size-add", objscheme_wxStyleDelta_GetsizeAdd, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-size-add", objscheme_wxStyleDelta_SetsizeAdd, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-weight-on", objscheme_wxStyleDelta_GetweightOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-weight-on", objscheme_wxStyleDelta_SetweightOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-weight-off", objscheme_wxStyleDelta_GetweightOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-weight-off", objscheme_wxStyleDelta_SetweightOff, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-style-on", objscheme_wxStyleDelta_GetstyleOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-style-on", objscheme_wxStyleDelta_SetstyleOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-style-off", objscheme_wxStyleDelta_GetstyleOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-style-off", objscheme_wxStyleDelta_SetstyleOff, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-underlined-on", objscheme_wxStyleDelta_GetunderlinedOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-underlined-on", objscheme_wxStyleDelta_SetunderlinedOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-underlined-off", objscheme_wxStyleDelta_GetunderlinedOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-underlined-off", objscheme_wxStyleDelta_SetunderlinedOff, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-transparent-text-backing-on", objscheme_wxStyleDelta_GettransparentTextBackingOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-transparent-text-backing-on", objscheme_wxStyleDelta_SettransparentTextBackingOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-transparent-text-backing-off", objscheme_wxStyleDelta_GettransparentTextBackingOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-transparent-text-backing-off", objscheme_wxStyleDelta_SettransparentTextBackingOff, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-foreground-mult", objscheme_wxStyleDelta_GetforegroundMult, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-background-mult", objscheme_wxStyleDelta_GetbackgroundMult, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-foreground-add", objscheme_wxStyleDelta_GetforegroundAdd, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-background-add", objscheme_wxStyleDelta_GetbackgroundAdd, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-alignment-on", objscheme_wxStyleDelta_GetalignmentOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-alignment-on", objscheme_wxStyleDelta_SetalignmentOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-alignment-off", objscheme_wxStyleDelta_GetalignmentOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-alignment-off", objscheme_wxStyleDelta_SetalignmentOff, 1, 1);

  scheme_made_class(os_wxStyleDelta_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxStyleDelta, wxTYPE_STYLE_DELTA);

}
  scheme_install_xc_global("wx:const-base", scheme_make_integer(wxBASE), env);
  scheme_install_xc_global("wx:const-change-nothing", scheme_make_integer(wxCHANGE_NOTHING), env);
  scheme_install_xc_global("wx:const-change-normal", scheme_make_integer(wxCHANGE_NORMAL), env);
  scheme_install_xc_global("wx:const-change-style", scheme_make_integer(wxCHANGE_STYLE), env);
  scheme_install_xc_global("wx:const-change-weight", scheme_make_integer(wxCHANGE_WEIGHT), env);
  scheme_install_xc_global("wx:const-change-underline", scheme_make_integer(wxCHANGE_UNDERLINE), env);
  scheme_install_xc_global("wx:const-change-size", scheme_make_integer(wxCHANGE_SIZE), env);
  scheme_install_xc_global("wx:const-change-bold", scheme_make_integer(wxCHANGE_BOLD), env);
  scheme_install_xc_global("wx:const-change-italic", scheme_make_integer(wxCHANGE_ITALIC), env);
  scheme_install_xc_global("wx:const-change-toggle-style", scheme_make_integer(wxCHANGE_TOGGLE_STYLE), env);
  scheme_install_xc_global("wx:const-change-toggle-weight", scheme_make_integer(wxCHANGE_TOGGLE_WEIGHT), env);
  scheme_install_xc_global("wx:const-change-toggle-underline", scheme_make_integer(wxCHANGE_TOGGLE_UNDERLINE), env);
  scheme_install_xc_global("wx:const-change-bigger", scheme_make_integer(wxCHANGE_BIGGER), env);
  scheme_install_xc_global("wx:const-change-smaller", scheme_make_integer(wxCHANGE_SMALLER), env);
  scheme_install_xc_global("wx:const-change-family", scheme_make_integer(wxCHANGE_FAMILY), env);
  scheme_install_xc_global("wx:const-change-alignment", scheme_make_integer(wxCHANGE_ALIGNMENT), env);
  scheme_install_xc_global("wx:const-change-normal-colour", scheme_make_integer(wxCHANGE_NORMAL_COLOUR), env);
  scheme_install_xc_global("wx:const-align-top", scheme_make_integer(wxALIGN_TOP), env);
  scheme_install_xc_global("wx:const-align-bottom", scheme_make_integer(wxALIGN_BOTTOM), env);
  scheme_install_xc_global("wx:const-align-center", scheme_make_integer(wxALIGN_CENTER), env);
}

int objscheme_istype_wxStyleDelta(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxStyleDelta_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:style-delta%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxStyleDelta(class wxStyleDelta *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_STYLE_DELTA) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxStyleDelta_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxStyleDelta *objscheme_unbundle_wxStyleDelta(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxStyleDelta(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxStyleDelta *)o->primdata;
  else
    return (wxStyleDelta *)o->primdata;
}












class os_wxStyle : public wxStyle {
 public:

  ~os_wxStyle();
};

Scheme_Object *os_wxStyle_class;

os_wxStyle::~os_wxStyle()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxStyleSwitchTo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  class wxStyle* x1;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:style%::switch-to", 0);
  x1 = objscheme_unbundle_wxStyle(p[1], "wx:style%::switch-to", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:style%::switch-to");
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->SwitchTo(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleSetShiftStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "wx:style%::set-shift-style", 0);

  
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->SetShiftStyle(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleGetShiftStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetShiftStyle();

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleIsJoin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->IsJoin();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleSetDelta(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "wx:style%::set-delta", 0);

  
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleGetDelta(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "wx:style%::get-delta", 0);

  
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetDelta(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleSetBaseStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "wx:style%::set-base-style", 0);

  
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->SetBaseStyle(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleGetBaseStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetBaseStyle();

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTextWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:style%::get-text-width", 0);

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTextWidth(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTextSpace(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:style%::get-text-space", 0);

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTextSpace(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTextDescent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:style%::get-text-descent", 0);

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTextDescent(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTextHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:style%::get-text-height", 0);

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTextHeight(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTransparentTextBacking(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTransparentTextBacking();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetAlignment(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetAlignment();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = &((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetBackground();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = &((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetForeground();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxFont* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetFont();

  
  
  return objscheme_bundle_wxFont(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetUnderlined(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetUnderlined();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetStyle();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetWeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetWeight();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetSize();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetFace(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetFace();

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetFamily(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetFamily();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetName(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetName();

  
  
  return objscheme_bundle_string((char *)r);
}

static Scheme_Object *objscheme_classname_os_wxStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:style%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:style%");
}

void objscheme_setup_wxStyle(void *env)
{
if (os_wxStyle_class) {
    objscheme_add_global_class(os_wxStyle_class,  "wx:style%", env);
} else {
  os_wxStyle_class = objscheme_def_prim_class(env, "wx:style%", "wx:object%", NULL, 25);

  scheme_add_method_w_arity(os_wxStyle_class,"get-class-name",objscheme_classname_os_wxStyle, 0, 0);

 scheme_add_method_w_arity(os_wxStyle_class, "switch-to", os_wxStyleSwitchTo, 2, 2);
 scheme_add_method_w_arity(os_wxStyle_class, "set-shift-style", os_wxStyleSetShiftStyle, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-shift-style", os_wxStyleGetShiftStyle, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "is-join?", os_wxStyleIsJoin, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "set-delta", os_wxStyleSetDelta, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-delta", os_wxStyleGetDelta, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "set-base-style", os_wxStyleSetBaseStyle, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-base-style", os_wxStyleGetBaseStyle, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-text-width", os_wxStyleGetTextWidth, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-text-space", os_wxStyleGetTextSpace, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-text-descent", os_wxStyleGetTextDescent, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-text-height", os_wxStyleGetTextHeight, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-transparent-text-backing", os_wxStyleGetTransparentTextBacking, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-alignment", os_wxStyleGetAlignment, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-colour", os_wxStyleGetBackground, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-foreground", os_wxStyleGetForeground, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-font", os_wxStyleGetFont, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-underlined", os_wxStyleGetUnderlined, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-style", os_wxStyleGetStyle, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-weight", os_wxStyleGetWeight, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-size", os_wxStyleGetSize, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-face", os_wxStyleGetFace, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-family", os_wxStyleGetFamily, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-name", os_wxStyleGetName, 0, 0);


  scheme_made_class(os_wxStyle_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxStyle, wxTYPE_STYLE);

}
}

int objscheme_istype_wxStyle(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxStyle_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:style%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxStyle(class wxStyle *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_STYLE) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxStyle_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxStyle *objscheme_unbundle_wxStyle(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxStyle(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxStyle *)o->primdata;
  else
    return (wxStyle *)o->primdata;
}











// @ "notify-on-change" : long NotifyOnChange(wxStyleNotifyFunc f, void *data);
// @ "forget-notification" : void ForgetNotification(long);




class os_wxStyleList : public wxStyleList {
 public:

  os_wxStyleList(Scheme_Object * obj);
  ~os_wxStyleList();
};

Scheme_Object *os_wxStyleList_class;

os_wxStyleList::os_wxStyleList(Scheme_Object * o)
: wxStyleList()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxStyleList::~os_wxStyleList()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxStyleListIsUsed(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->IsUsed();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleListAdjustUsage(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:style-list%::adjust-usage");

  
  ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->AdjustUsage(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleListStyleToIndex(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "wx:style-list%::style-to-index", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->StyleToIndex(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListIndexToStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:style-list%::index-to-style");

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->IndexToStyle(x0);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListConvert(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "wx:style-list%::convert", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->Convert(x0);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListReplaceNamedStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  string x0;
  class wxStyle* x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:style-list%::replace-named-style");
  x1 = objscheme_unbundle_wxStyle(p[1], "wx:style-list%::replace-named-style", 1);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->ReplaceNamedStyle(x0, x1);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListNewNamedStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  string x0;
  class wxStyle* x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:style-list%::new-named-style");
  x1 = objscheme_unbundle_wxStyle(p[1], "wx:style-list%::new-named-style", 1);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->NewNamedStyle(x0, x1);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListFindNamedStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:style-list%::find-named-style");

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->FindNamedStyle(x0);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListFindOrCreateJoinStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  class wxStyle* x0;
  class wxStyle* x1;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "wx:style-list%::find-or-create-join-style", 1);
  x1 = objscheme_unbundle_wxStyle(p[1], "wx:style-list%::find-or-create-join-style", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateJoinStyle(x0, x1);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListFindOrCreateStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  class wxStyle* x0;
  class wxStyleDelta* x1;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "wx:style-list%::find-or-create-style", 1);
  x1 = objscheme_unbundle_wxStyleDelta(p[1], "wx:style-list%::find-or-create-style", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateStyle(x0, x1);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListNumber(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->Number();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListBasicStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->BasicStyle();

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleList* x0;

  
  x0 = objscheme_unbundle_wxStyleList(p[0], "wx:style-list%::copy", 0);

  
  ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->Copy(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleListClear(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->Clear();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleList_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxStyleList *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:style-list%::initialization", 0, 0, n, p);

  
  realobj = new os_wxStyleList(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxStyleList(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:style-list%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:style-list%");
}

void objscheme_setup_wxStyleList(void *env)
{
if (os_wxStyleList_class) {
    objscheme_add_global_class(os_wxStyleList_class,  "wx:style-list%", env);
} else {
  os_wxStyleList_class = objscheme_def_prim_class(env, "wx:style-list%", "wx:object%", os_wxStyleList_ConstructScheme, 15);

  scheme_add_method_w_arity(os_wxStyleList_class,"get-class-name",objscheme_classname_os_wxStyleList, 0, 0);

 scheme_add_method_w_arity(os_wxStyleList_class, "is-used? ", os_wxStyleListIsUsed, 0, 0);
 scheme_add_method_w_arity(os_wxStyleList_class, "adjust-usage", os_wxStyleListAdjustUsage, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "style-to-index", os_wxStyleListStyleToIndex, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "index-to-style", os_wxStyleListIndexToStyle, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "convert", os_wxStyleListConvert, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "replace-named-style", os_wxStyleListReplaceNamedStyle, 2, 2);
 scheme_add_method_w_arity(os_wxStyleList_class, "new-named-style", os_wxStyleListNewNamedStyle, 2, 2);
 scheme_add_method_w_arity(os_wxStyleList_class, "find-named-style", os_wxStyleListFindNamedStyle, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "find-or-create-join-style", os_wxStyleListFindOrCreateJoinStyle, 2, 2);
 scheme_add_method_w_arity(os_wxStyleList_class, "find-or-create-style", os_wxStyleListFindOrCreateStyle, 2, 2);
 scheme_add_method_w_arity(os_wxStyleList_class, "number", os_wxStyleListNumber, 0, 0);
 scheme_add_method_w_arity(os_wxStyleList_class, "basic-style", os_wxStyleListBasicStyle, 0, 0);
 scheme_add_method_w_arity(os_wxStyleList_class, "copy", os_wxStyleListCopy, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "clear", os_wxStyleListClear, 0, 0);


  scheme_made_class(os_wxStyleList_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxStyleList, wxTYPE_STYLE_LIST);

}
  scheme_install_xc_global("wx:the-style-list", objscheme_bundle_wxStyleList(wxTheStyleList), env);
}

int objscheme_istype_wxStyleList(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxStyleList_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:style-list%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxStyleList(class wxStyleList *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_STYLE_LIST) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxStyleList_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxStyleList *objscheme_unbundle_wxStyleList(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxStyleList(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxStyleList *)o->primdata;
  else
    return (wxStyleList *)o->primdata;
}



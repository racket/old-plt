/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_snip.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_media.h"





#include "wxscheme.h"
#include "wxs_snip.h"
#include "wxscomon.h"


static Scheme_Object *flags_wxSNIP_CAN_APPEND_sym = NULL;
static Scheme_Object *flags_wxSNIP_NEWLINE_sym = NULL;
static Scheme_Object *flags_wxSNIP_HARD_NEWLINE_sym = NULL;
static Scheme_Object *flags_wxSNIP_IS_TEXT_sym = NULL;
static Scheme_Object *flags_wxSNIP_INVISIBLE_sym = NULL;
static Scheme_Object *flags_wxSNIP_HANDLES_EVENTS_sym = NULL;
static Scheme_Object *flags_wxSNIP_WIDTH_DEPENDS_ON_X_sym = NULL;
static Scheme_Object *flags_wxSNIP_HEIGHT_DEPENDS_ON_X_sym = NULL;
static Scheme_Object *flags_wxSNIP_WIDTH_DEPENDS_ON_Y_sym = NULL;
static Scheme_Object *flags_wxSNIP_HEIGHT_DEPENDS_ON_Y_sym = NULL;
static Scheme_Object *flags_wxSNIP_ANCHORED_sym = NULL;
static Scheme_Object *flags_wxSNIP_USES_BUFFER_PATH_sym = NULL;

static void init_symset_flags(void) {
  flags_wxSNIP_CAN_APPEND_sym = scheme_intern_symbol("snip-can-append");
  flags_wxSNIP_NEWLINE_sym = scheme_intern_symbol("snip-newline");
  flags_wxSNIP_HARD_NEWLINE_sym = scheme_intern_symbol("snip-hard-newline");
  flags_wxSNIP_IS_TEXT_sym = scheme_intern_symbol("snip-is-text");
  flags_wxSNIP_INVISIBLE_sym = scheme_intern_symbol("snip-invisible");
  flags_wxSNIP_HANDLES_EVENTS_sym = scheme_intern_symbol("snip-handles-events");
  flags_wxSNIP_WIDTH_DEPENDS_ON_X_sym = scheme_intern_symbol("snip-width-depends-on-x");
  flags_wxSNIP_HEIGHT_DEPENDS_ON_X_sym = scheme_intern_symbol("snip-height-depends-on-x");
  flags_wxSNIP_WIDTH_DEPENDS_ON_Y_sym = scheme_intern_symbol("snip-width-depends-on-y");
  flags_wxSNIP_HEIGHT_DEPENDS_ON_Y_sym = scheme_intern_symbol("snip-height-depends-on-y");
  flags_wxSNIP_ANCHORED_sym = scheme_intern_symbol("snip-anchored");
  flags_wxSNIP_USES_BUFFER_PATH_sym = scheme_intern_symbol("snip-uses-buffer-path");
}

static int unbundle_symset_flags(Scheme_Object *v, const char *where) {
  if (!flags_wxSNIP_USES_BUFFER_PATH_sym) init_symset_flags();
  Scheme_Object *i, *l = v;
  long result = 0;
  while (SCHEME_PAIRP(l)) {
  i = SCHEME_CAR(l);
  if (0) { }
  else if (i == flags_wxSNIP_CAN_APPEND_sym) { result = result | wxSNIP_CAN_APPEND; }
  else if (i == flags_wxSNIP_NEWLINE_sym) { result = result | wxSNIP_NEWLINE; }
  else if (i == flags_wxSNIP_HARD_NEWLINE_sym) { result = result | wxSNIP_HARD_NEWLINE; }
  else if (i == flags_wxSNIP_IS_TEXT_sym) { result = result | wxSNIP_IS_TEXT; }
  else if (i == flags_wxSNIP_INVISIBLE_sym) { result = result | wxSNIP_INVISIBLE; }
  else if (i == flags_wxSNIP_HANDLES_EVENTS_sym) { result = result | wxSNIP_HANDLES_EVENTS; }
  else if (i == flags_wxSNIP_WIDTH_DEPENDS_ON_X_sym) { result = result | wxSNIP_WIDTH_DEPENDS_ON_X; }
  else if (i == flags_wxSNIP_HEIGHT_DEPENDS_ON_X_sym) { result = result | wxSNIP_HEIGHT_DEPENDS_ON_X; }
  else if (i == flags_wxSNIP_WIDTH_DEPENDS_ON_Y_sym) { result = result | wxSNIP_WIDTH_DEPENDS_ON_Y; }
  else if (i == flags_wxSNIP_HEIGHT_DEPENDS_ON_Y_sym) { result = result | wxSNIP_HEIGHT_DEPENDS_ON_Y; }
  else if (i == flags_wxSNIP_ANCHORED_sym) { result = result | wxSNIP_ANCHORED; }
  else if (i == flags_wxSNIP_USES_BUFFER_PATH_sym) { result = result | wxSNIP_USES_BUFFER_PATH; }
  else { break; } 
  l = SCHEME_CDR(l);
  }
  if (SCHEME_NULLP(l)) return result;
  if (where) scheme_wrong_type(where, "flags symbol list", -1, 0, &v);
  return 0;
}

static int istype_symset_flags(Scheme_Object *v, const char *where) {
  if (!flags_wxSNIP_USES_BUFFER_PATH_sym) init_symset_flags();
  Scheme_Object *i, *l = v;
  long result = 1;
  while (SCHEME_PAIRP(l)) {
  i = SCHEME_CAR(l);
  if (0) { }
  else if (i == flags_wxSNIP_CAN_APPEND_sym) { ; }
  else if (i == flags_wxSNIP_NEWLINE_sym) { ; }
  else if (i == flags_wxSNIP_HARD_NEWLINE_sym) { ; }
  else if (i == flags_wxSNIP_IS_TEXT_sym) { ; }
  else if (i == flags_wxSNIP_INVISIBLE_sym) { ; }
  else if (i == flags_wxSNIP_HANDLES_EVENTS_sym) { ; }
  else if (i == flags_wxSNIP_WIDTH_DEPENDS_ON_X_sym) { ; }
  else if (i == flags_wxSNIP_HEIGHT_DEPENDS_ON_X_sym) { ; }
  else if (i == flags_wxSNIP_WIDTH_DEPENDS_ON_Y_sym) { ; }
  else if (i == flags_wxSNIP_HEIGHT_DEPENDS_ON_Y_sym) { ; }
  else if (i == flags_wxSNIP_ANCHORED_sym) { ; }
  else if (i == flags_wxSNIP_USES_BUFFER_PATH_sym) { ; }
  else { break; } 
  l = SCHEME_CDR(l);
  }
  if (SCHEME_NULLP(l)) return result;
  if (where) scheme_wrong_type(where, "flags symbol list", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_flags(int v) {
  if (!flags_wxSNIP_USES_BUFFER_PATH_sym) init_symset_flags();
  Scheme_Object *l = scheme_null;
  if (v & wxSNIP_CAN_APPEND) l = scheme_make_pair(flags_wxSNIP_CAN_APPEND_sym, l);
  if (v & wxSNIP_NEWLINE) l = scheme_make_pair(flags_wxSNIP_NEWLINE_sym, l);
  if (v & wxSNIP_HARD_NEWLINE) l = scheme_make_pair(flags_wxSNIP_HARD_NEWLINE_sym, l);
  if (v & wxSNIP_IS_TEXT) l = scheme_make_pair(flags_wxSNIP_IS_TEXT_sym, l);
  if (v & wxSNIP_INVISIBLE) l = scheme_make_pair(flags_wxSNIP_INVISIBLE_sym, l);
  if (v & wxSNIP_HANDLES_EVENTS) l = scheme_make_pair(flags_wxSNIP_HANDLES_EVENTS_sym, l);
  if (v & wxSNIP_WIDTH_DEPENDS_ON_X) l = scheme_make_pair(flags_wxSNIP_WIDTH_DEPENDS_ON_X_sym, l);
  if (v & wxSNIP_HEIGHT_DEPENDS_ON_X) l = scheme_make_pair(flags_wxSNIP_HEIGHT_DEPENDS_ON_X_sym, l);
  if (v & wxSNIP_WIDTH_DEPENDS_ON_Y) l = scheme_make_pair(flags_wxSNIP_WIDTH_DEPENDS_ON_Y_sym, l);
  if (v & wxSNIP_HEIGHT_DEPENDS_ON_Y) l = scheme_make_pair(flags_wxSNIP_HEIGHT_DEPENDS_ON_Y_sym, l);
  if (v & wxSNIP_ANCHORED) l = scheme_make_pair(flags_wxSNIP_ANCHORED_sym, l);
  if (v & wxSNIP_USES_BUFFER_PATH) l = scheme_make_pair(flags_wxSNIP_USES_BUFFER_PATH_sym, l);
  return l;
}




















class os_wxSnip : public wxSnip {
 public:

  os_wxSnip(Scheme_Object * obj);
  ~os_wxSnip();
  void SetAdmin(class wxSnipAdmin* x0);
  Bool Resize(float x0, float x1);
  void Write(class wxMediaStreamOut& x0);
  Bool Match(class wxSnip* x0);
  void DoFont(int x0, Bool x1 = TRUE);
  void DoEdit(int x0, Bool x1 = TRUE, long x2 = 0);
  void OwnCaret(Bool x0);
  class wxCursor* AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5);
  void OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void SizeCacheInvalid();
  class wxSnip* Copy();
  string GetText(long x0, long x1, Bool x2 = FALSE, long* x3 = NULL);
  class wxSnip* MergeWith(class wxSnip* x0);
  void Split(long x0, class wxSnip** x1, class wxSnip** x2);
  void Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9);
  float PartialOffset(class wxDC* x0, float x1, float x2, long x3);
  void GetExtent(class wxDC* x0, float x1, float x2, float* x3 = NULL, float* x4 = NULL, float* x5 = NULL, float* x6 = NULL, float* x7 = NULL, float* x8 = NULL);
};

Scheme_Object *os_wxSnip_class;

os_wxSnip::os_wxSnip(Scheme_Object * o)
: wxSnip()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxSnip::~os_wxSnip()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxSnip::SetAdmin(class wxSnipAdmin* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "set-admin", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::SetAdmin(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnipAdmin(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxSnip::Resize(float x0, float x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "resize", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnip::Resize(x0, x1);
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:snip%::resize"", extracting return value");
  }
}

void os_wxSnip::Write(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "write", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::Write(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxSnip::Match(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "match?", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnip::Match(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:snip%::match?"", extracting return value");
  }
}

void os_wxSnip::DoFont(int x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "do-font", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::DoFont(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxSnip::DoEdit(int x0, Bool x1, long x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "do-edit", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::DoEdit(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  p[2] = scheme_make_integer(x2);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxSnip::OwnCaret(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "own-caret", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::OwnCaret(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxCursor* os_wxSnip::AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "adjust-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnip::AdjustCursor(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxCursor(v, "wx:snip%::adjust-cursor"", extracting return value", 1);
  }
}

void os_wxSnip::OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::OnChar(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxKeyEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxSnip::OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::OnEvent(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxSnip::SizeCacheInvalid()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "size-cache-invalid", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::SizeCacheInvalid();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxSnip* os_wxSnip::Copy()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "copy", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnip::Copy();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:snip%::copy"", extracting return value", 0);
  }
}

string os_wxSnip::GetText(long x0, long x1, Bool x2, long* x3)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "get-text", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnip::GetText(x0, x1, x2, x3);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  p[2] = (x2 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (string)objscheme_unbundle_string(v, "wx:snip%::get-text"", extracting return value");
  }
}

class wxSnip* os_wxSnip::MergeWith(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "merge-with", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnip::MergeWith(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:snip%::merge-with"", extracting return value", 0);
  }
}

void os_wxSnip::Split(long x0, class wxSnip** x1, class wxSnip** x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "split", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::Split(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = objscheme_box(objscheme_bundle_wxSnip((*x1)));
  p[2] = objscheme_box(objscheme_bundle_wxSnip((*x2)));
  

  v = scheme_apply(method, 3, p);
  
  if (x1) *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:snip%::split"", extracting return value via box"), "wx:snip%::split"", extracting return value via box", 0);
  if (x2) *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:snip%::split"", extracting return value via box"), "wx:snip%::split"", extracting return value via box", 0);
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxSnip::Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9)
{
  Scheme_Object *p[10];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "draw", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = scheme_make_double(x5);
  p[6] = scheme_make_double(x6);
  p[7] = scheme_make_double(x7);
  p[8] = scheme_make_double(x8);
  p[9] = scheme_make_integer(x9);
  

  v = scheme_apply(method, 10, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

float os_wxSnip::PartialOffset(class wxDC* x0, float x1, float x2, long x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "partial-offset", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxSnip::PartialOffset(x0, x1, x2, x3);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_integer(x3);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_float(v, "wx:snip%::partial-offset"", extracting return value");
  }
}

void os_wxSnip::GetExtent(class wxDC* x0, float x1, float x2, float* x3, float* x4, float* x5, float* x6, float* x7, float* x8)
{
  Scheme_Object *p[9];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxSnip_class, "get-extent", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = ((x3) ? objscheme_box(scheme_make_double((*x3))) : scheme_null);
  p[4] = ((x4) ? objscheme_box(scheme_make_double((*x4))) : scheme_null);
  p[5] = ((x5) ? objscheme_box(scheme_make_double((*x5))) : scheme_null);
  p[6] = ((x6) ? objscheme_box(scheme_make_double((*x6))) : scheme_null);
  p[7] = ((x7) ? objscheme_box(scheme_make_double((*x7))) : scheme_null);
  p[8] = ((x8) ? objscheme_box(scheme_make_double((*x8))) : scheme_null);
  

  v = scheme_apply(method, 9, p);
  
  if (x3) *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:snip%::get-extent"", extracting return value via box"), "wx:snip%::get-extent"", extracting return value via box");
  if (x4) *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:snip%::get-extent"", extracting return value via box"), "wx:snip%::get-extent"", extracting return value via box");
  if (x5) *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:snip%::get-extent"", extracting return value via box"), "wx:snip%::get-extent"", extracting return value via box");
  if (x6) *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:snip%::get-extent"", extracting return value via box"), "wx:snip%::get-extent"", extracting return value via box");
  if (x7) *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:snip%::get-extent"", extracting return value via box"), "wx:snip%::get-extent"", extracting return value via box");
  if (x8) *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:snip%::get-extent"", extracting return value via box"), "wx:snip%::get-extent"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxSnipPrevious(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->Previous();

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipNext(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->Next();

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipSetAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnipAdmin* x0;

  
  x0 = objscheme_unbundle_wxSnipAdmin(p[0], "wx:snip%::set-admin", 1);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::SetAdmin(x0);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->SetAdmin(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipResize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:snip%::resize");
  x1 = objscheme_unbundle_float(p[1], "wx:snip%::resize");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::Resize(x0, x1);
  else
    r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->Resize(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipWrite(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:snip%::write", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::Write(*x0);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->Write(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipMatch(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:snip%::match?", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::Match(x0);
  else
    r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->Match(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipDoFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:snip%::do-font");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:snip%::do-font");
  } else
    x1 = TRUE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::DoFont(x0, x1);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->DoFont(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipDoEdit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;
  long x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:snip%::do-edit");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:snip%::do-edit");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:snip%::do-edit");
  } else
    x2 = 0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::DoEdit(x0, x1, x2);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->DoEdit(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipOwnCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:snip%::own-caret");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::OwnCaret(x0);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->OwnCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipAdjustCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxCursor* r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:snip%::adjust-cursor", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:snip%::adjust-cursor");
  x2 = objscheme_unbundle_float(p[2], "wx:snip%::adjust-cursor");
  x3 = objscheme_unbundle_float(p[3], "wx:snip%::adjust-cursor");
  x4 = objscheme_unbundle_float(p[4], "wx:snip%::adjust-cursor");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:snip%::adjust-cursor", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::adjust-cursor");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::AdjustCursor(x0, x1, x2, x3, x4, *x5);
  else
    r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->AdjustCursor(x0, x1, x2, x3, x4, *x5);

  
  
  return objscheme_bundle_wxCursor(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxKeyEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:snip%::on-char", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:snip%::on-char");
  x2 = objscheme_unbundle_float(p[2], "wx:snip%::on-char");
  x3 = objscheme_unbundle_float(p[3], "wx:snip%::on-char");
  x4 = objscheme_unbundle_float(p[4], "wx:snip%::on-char");
  x5 = objscheme_unbundle_wxKeyEvent(p[5], "wx:snip%::on-char", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-char");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::OnChar(x0, x1, x2, x3, x4, *x5);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->OnChar(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:snip%::on-event", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:snip%::on-event");
  x2 = objscheme_unbundle_float(p[2], "wx:snip%::on-event");
  x3 = objscheme_unbundle_float(p[3], "wx:snip%::on-event");
  x4 = objscheme_unbundle_float(p[4], "wx:snip%::on-event");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:snip%::on-event", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-event");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::OnEvent(x0, x1, x2, x3, x4, *x5);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipSizeCacheInvalid(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::SizeCacheInvalid();
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->SizeCacheInvalid();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::Copy();
  else
    r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->Copy();

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipGetText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  long x0;
  long x1;
  Bool x2;
  long _x3;
  long* x3 = &_x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:snip%::get-text");
  x1 = objscheme_unbundle_integer(p[1], "wx:snip%::get-text");
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:snip%::get-text");
  } else
    x2 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::GetText(x0, x1, x2, x3);
  else
    r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->GetText(x0, x1, x2, x3);

  
  
  return scheme_make_sized_string(r, _x3, 0);
}

#pragma argsused
static Scheme_Object *os_wxSnipMergeWith(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:snip%::merge-with", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::MergeWith(x0);
  else
    r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->MergeWith(x0);

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipSplit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  class wxSnip* _x1;
  class wxSnip** x1 = &_x1;
  class wxSnip* _x2;
  class wxSnip** x2 = &_x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:snip%::split");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:snip%::split", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:snip%::split"), "wx:snip%::split", 0);
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:snip%::split", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:snip%::split"), "wx:snip%::split", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::Split(x0, x1, x2);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->Split(x0, x1, x2);

  
  if (n > 1)
    objscheme_set_box(p[1], objscheme_bundle_wxSnip(_x1));
  if (n > 2)
    objscheme_set_box(p[2], objscheme_bundle_wxSnip(_x2));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipDraw(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;
  float x6;
  float x7;
  float x8;
  int x9;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:snip%::draw", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:snip%::draw");
  x2 = objscheme_unbundle_float(p[2], "wx:snip%::draw");
  x3 = objscheme_unbundle_float(p[3], "wx:snip%::draw");
  x4 = objscheme_unbundle_float(p[4], "wx:snip%::draw");
  x5 = objscheme_unbundle_float(p[5], "wx:snip%::draw");
  x6 = objscheme_unbundle_float(p[6], "wx:snip%::draw");
  x7 = objscheme_unbundle_float(p[7], "wx:snip%::draw");
  x8 = objscheme_unbundle_float(p[8], "wx:snip%::draw");
  x9 = objscheme_unbundle_integer(p[9], "wx:snip%::draw");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::draw");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipPartialOffset(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  long x3;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:snip%::partial-offset", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:snip%::partial-offset");
  x2 = objscheme_unbundle_float(p[2], "wx:snip%::partial-offset");
  x3 = objscheme_unbundle_integer(p[3], "wx:snip%::partial-offset");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::partial-offset");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::PartialOffset(x0, x1, x2, x3);
  else
    r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->PartialOffset(x0, x1, x2, x3);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxSnipGetExtent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float _x3;
  float* x3 = &_x3;
  float _x4;
  float* x4 = &_x4;
  float _x5;
  float* x5 = &_x5;
  float _x6;
  float* x6 = &_x6;
  float _x7;
  float* x7 = &_x7;
  float _x8;
  float* x8 = &_x8;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:snip%::get-extent", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:snip%::get-extent");
  x2 = objscheme_unbundle_float(p[2], "wx:snip%::get-extent");
  if (n > 3) {
    if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:snip%::get-extent"), "wx:snip%::get-extent");
  } else
    x3 = NULL;
  if (n > 4) {
    if (SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:snip%::get-extent"), "wx:snip%::get-extent");
  } else
    x4 = NULL;
  if (n > 5) {
    if (SCHEME_NULLP(p[5]))
    x5 = NULL;
  else
    *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:snip%::get-extent"), "wx:snip%::get-extent");
  } else
    x5 = NULL;
  if (n > 6) {
    if (SCHEME_NULLP(p[6]))
    x6 = NULL;
  else
    *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:snip%::get-extent"), "wx:snip%::get-extent");
  } else
    x6 = NULL;
  if (n > 7) {
    if (SCHEME_NULLP(p[7]))
    x7 = NULL;
  else
    *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:snip%::get-extent"), "wx:snip%::get-extent");
  } else
    x7 = NULL;
  if (n > 8) {
    if (SCHEME_NULLP(p[8]))
    x8 = NULL;
  else
    *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:snip%::get-extent"), "wx:snip%::get-extent");
  } else
    x8 = NULL;

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::get-extent");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxSnip *)((Scheme_Class_Object *)obj)->primdata)->wxSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  else
    ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  if (n > 4 && !SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  if (n > 5 && !SCHEME_NULLP(p[5]))
    objscheme_set_box(p[5], scheme_make_double(_x5));
  if (n > 6 && !SCHEME_NULLP(p[6]))
    objscheme_set_box(p[6], scheme_make_double(_x6));
  if (n > 7 && !SCHEME_NULLP(p[7]))
    objscheme_set_box(p[7], scheme_make_double(_x7));
  if (n > 8 && !SCHEME_NULLP(p[8]))
    objscheme_set_box(p[8], scheme_make_double(_x8));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipReleaseFromOwner(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->ReleaseFromOwner();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipIsOwned(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->IsOwned();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxSnipSetStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "wx:snip%::set-style", 0);

  
  ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->SetStyle(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipSetFlags(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = unbundle_symset_flags(p[0], "wx:snip%::set-flags");;

  
  ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->SetFlags(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipSetCount(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:snip%::set-count");

  
  ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->SetCount(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnipGetAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnipAdmin* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxSnip *)((Scheme_Class_Object *)obj)->primdata)->GetAdmin();

  
  
  return objscheme_bundle_wxSnipAdmin(r);
}

static Scheme_Object *objscheme_wxSnip_Getcount(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  long v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-count", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxSnip *)cobj->primdata)->wxSnip::count;
  else
    v = ((wxSnip *)cobj->primdata)->count;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxSnip_Getflags(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-flags", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxSnip *)cobj->primdata)->wxSnip::flags;
  else
    v = ((wxSnip *)cobj->primdata)->flags;

  return bundle_symset_flags(v);;
}

static Scheme_Object *objscheme_wxSnip_Getstyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxStyle* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-style", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxSnip *)cobj->primdata)->wxSnip::style;
  else
    v = ((wxSnip *)cobj->primdata)->style;

  return objscheme_bundle_wxStyle(v);
}

static Scheme_Object *objscheme_wxSnip_Getsnipclass(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxSnipClass* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-snipclass", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxSnip *)cobj->primdata)->wxSnip::snipclass;
  else
    v = ((wxSnip *)cobj->primdata)->snipclass;

  return objscheme_bundle_wxSnipClass(v);
}

static Scheme_Object *objscheme_wxSnip_Setsnipclass(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  class wxSnipClass* v;

  if (n != 1) scheme_wrong_count("set-snipclass", 1, 1, n, p);

  v = objscheme_unbundle_wxSnipClass(p[0], "wx:snip%::snipclass", 1);
  ((wxSnip *)cobj->primdata)->snipclass = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxSnip_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxSnip *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:snip%::initialization", 0, 0, n, p);

  
  realobj = new os_wxSnip(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:snip%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:snip%");
}

void objscheme_setup_wxSnip(void *env)
{
if (os_wxSnip_class) {
    objscheme_add_global_class(os_wxSnip_class,  "wx:snip%", env);
} else {
  os_wxSnip_class = objscheme_def_prim_class(env, "wx:snip%", "wx:object%", os_wxSnip_ConstructScheme, 32);

  scheme_add_method_w_arity(os_wxSnip_class,"get-class-name",objscheme_classname_os_wxSnip, 0, 0);

 scheme_add_method_w_arity(os_wxSnip_class, "previous", os_wxSnipPrevious, 0, 0);
 scheme_add_method_w_arity(os_wxSnip_class, "next", os_wxSnipNext, 0, 0);
 scheme_add_method_w_arity(os_wxSnip_class, "set-admin", os_wxSnipSetAdmin, 1, 1);
 scheme_add_method_w_arity(os_wxSnip_class, "resize", os_wxSnipResize, 2, 2);
 scheme_add_method_w_arity(os_wxSnip_class, "write", os_wxSnipWrite, 1, 1);
 scheme_add_method_w_arity(os_wxSnip_class, "match?", os_wxSnipMatch, 1, 1);
 scheme_add_method_w_arity(os_wxSnip_class, "do-font", os_wxSnipDoFont, 1, 2);
 scheme_add_method_w_arity(os_wxSnip_class, "do-edit", os_wxSnipDoEdit, 1, 3);
 scheme_add_method_w_arity(os_wxSnip_class, "own-caret", os_wxSnipOwnCaret, 1, 1);
 scheme_add_method_w_arity(os_wxSnip_class, "adjust-cursor", os_wxSnipAdjustCursor, 6, 6);
 scheme_add_method_w_arity(os_wxSnip_class, "on-char", os_wxSnipOnChar, 6, 6);
 scheme_add_method_w_arity(os_wxSnip_class, "on-event", os_wxSnipOnEvent, 6, 6);
 scheme_add_method_w_arity(os_wxSnip_class, "size-cache-invalid", os_wxSnipSizeCacheInvalid, 0, 0);
 scheme_add_method_w_arity(os_wxSnip_class, "copy", os_wxSnipCopy, 0, 0);
 scheme_add_method_w_arity(os_wxSnip_class, "get-text", os_wxSnipGetText, 2, 3);
 scheme_add_method_w_arity(os_wxSnip_class, "merge-with", os_wxSnipMergeWith, 1, 1);
 scheme_add_method_w_arity(os_wxSnip_class, "split", os_wxSnipSplit, 3, 3);
 scheme_add_method_w_arity(os_wxSnip_class, "draw", os_wxSnipDraw, 10, 10);
 scheme_add_method_w_arity(os_wxSnip_class, "partial-offset", os_wxSnipPartialOffset, 4, 4);
 scheme_add_method_w_arity(os_wxSnip_class, "get-extent", os_wxSnipGetExtent, 3, 9);
 scheme_add_method_w_arity(os_wxSnip_class, "release-from-owner", os_wxSnipReleaseFromOwner, 0, 0);
 scheme_add_method_w_arity(os_wxSnip_class, "is-owned?", os_wxSnipIsOwned, 0, 0);
 scheme_add_method_w_arity(os_wxSnip_class, "set-style", os_wxSnipSetStyle, 1, 1);
 scheme_add_method_w_arity(os_wxSnip_class, "set-flags", os_wxSnipSetFlags, 1, 1);
 scheme_add_method_w_arity(os_wxSnip_class, "set-count", os_wxSnipSetCount, 1, 1);
 scheme_add_method_w_arity(os_wxSnip_class, "get-admin", os_wxSnipGetAdmin, 0, 0);

  scheme_add_method_w_arity(os_wxSnip_class,"get-count", objscheme_wxSnip_Getcount, 0, 0);
  scheme_add_method_w_arity(os_wxSnip_class,"get-flags", objscheme_wxSnip_Getflags, 0, 0);
  scheme_add_method_w_arity(os_wxSnip_class,"get-style", objscheme_wxSnip_Getstyle, 0, 0);
  scheme_add_method_w_arity(os_wxSnip_class,"get-snipclass", objscheme_wxSnip_Getsnipclass, 0, 0);
  scheme_add_method_w_arity(os_wxSnip_class,"set-snipclass", objscheme_wxSnip_Setsnipclass, 1, 1);

  scheme_made_class(os_wxSnip_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxSnip, wxTYPE_SNIP);

}
}

int objscheme_istype_wxSnip(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxSnip_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:snip%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxSnip(class wxSnip *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_SNIP) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxSnip_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxSnip *objscheme_unbundle_wxSnip(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxSnip(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxSnip *)o->primdata;
  else
    return (wxSnip *)o->primdata;
}
















class os_wxTextSnip : public wxTextSnip {
 public:

  os_wxTextSnip(Scheme_Object * obj, long x0 = 0);
  ~os_wxTextSnip();
  void SetAdmin(class wxSnipAdmin* x0);
  Bool Resize(float x0, float x1);
  void Write(class wxMediaStreamOut& x0);
  Bool Match(class wxSnip* x0);
  void DoFont(int x0, Bool x1 = TRUE);
  void DoEdit(int x0, Bool x1 = TRUE, long x2 = 0);
  void OwnCaret(Bool x0);
  class wxCursor* AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5);
  void OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void SizeCacheInvalid();
  class wxSnip* Copy();
  string GetText(long x0, long x1, Bool x2 = FALSE, long* x3 = NULL);
  class wxSnip* MergeWith(class wxSnip* x0);
  void Split(long x0, class wxSnip** x1, class wxSnip** x2);
  void Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9);
  float PartialOffset(class wxDC* x0, float x1, float x2, long x3);
  void GetExtent(class wxDC* x0, float x1, float x2, float* x3 = NULL, float* x4 = NULL, float* x5 = NULL, float* x6 = NULL, float* x7 = NULL, float* x8 = NULL);
};

Scheme_Object *os_wxTextSnip_class;

os_wxTextSnip::os_wxTextSnip(Scheme_Object * o, long x0)
: wxTextSnip(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxTextSnip::~os_wxTextSnip()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxTextSnip::SetAdmin(class wxSnipAdmin* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "set-admin", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::SetAdmin(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnipAdmin(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxTextSnip::Resize(float x0, float x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "resize", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTextSnip::Resize(x0, x1);
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:text-snip%::resize"", extracting return value");
  }
}

void os_wxTextSnip::Write(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "write", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::Write(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxTextSnip::Match(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "match?", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTextSnip::Match(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:text-snip%::match?"", extracting return value");
  }
}

void os_wxTextSnip::DoFont(int x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "do-font", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::DoFont(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTextSnip::DoEdit(int x0, Bool x1, long x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "do-edit", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::DoEdit(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  p[2] = scheme_make_integer(x2);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTextSnip::OwnCaret(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "own-caret", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::OwnCaret(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxCursor* os_wxTextSnip::AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "adjust-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTextSnip::AdjustCursor(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxCursor(v, "wx:text-snip%::adjust-cursor"", extracting return value", 1);
  }
}

void os_wxTextSnip::OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::OnChar(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxKeyEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTextSnip::OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::OnEvent(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTextSnip::SizeCacheInvalid()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "size-cache-invalid", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::SizeCacheInvalid();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxSnip* os_wxTextSnip::Copy()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "copy", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTextSnip::Copy();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:text-snip%::copy"", extracting return value", 0);
  }
}

string os_wxTextSnip::GetText(long x0, long x1, Bool x2, long* x3)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "get-text", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTextSnip::GetText(x0, x1, x2, x3);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  p[2] = (x2 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (string)objscheme_unbundle_string(v, "wx:text-snip%::get-text"", extracting return value");
  }
}

class wxSnip* os_wxTextSnip::MergeWith(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "merge-with", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTextSnip::MergeWith(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:text-snip%::merge-with"", extracting return value", 0);
  }
}

void os_wxTextSnip::Split(long x0, class wxSnip** x1, class wxSnip** x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "split", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::Split(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = objscheme_box(objscheme_bundle_wxSnip((*x1)));
  p[2] = objscheme_box(objscheme_bundle_wxSnip((*x2)));
  

  v = scheme_apply(method, 3, p);
  
  if (x1) *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:text-snip%::split"", extracting return value via box"), "wx:text-snip%::split"", extracting return value via box", 0);
  if (x2) *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:text-snip%::split"", extracting return value via box"), "wx:text-snip%::split"", extracting return value via box", 0);
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTextSnip::Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9)
{
  Scheme_Object *p[10];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "draw", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = scheme_make_double(x5);
  p[6] = scheme_make_double(x6);
  p[7] = scheme_make_double(x7);
  p[8] = scheme_make_double(x8);
  p[9] = scheme_make_integer(x9);
  

  v = scheme_apply(method, 10, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

float os_wxTextSnip::PartialOffset(class wxDC* x0, float x1, float x2, long x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "partial-offset", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTextSnip::PartialOffset(x0, x1, x2, x3);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_integer(x3);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_float(v, "wx:text-snip%::partial-offset"", extracting return value");
  }
}

void os_wxTextSnip::GetExtent(class wxDC* x0, float x1, float x2, float* x3, float* x4, float* x5, float* x6, float* x7, float* x8)
{
  Scheme_Object *p[9];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTextSnip_class, "get-extent", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTextSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = ((x3) ? objscheme_box(scheme_make_double((*x3))) : scheme_null);
  p[4] = ((x4) ? objscheme_box(scheme_make_double((*x4))) : scheme_null);
  p[5] = ((x5) ? objscheme_box(scheme_make_double((*x5))) : scheme_null);
  p[6] = ((x6) ? objscheme_box(scheme_make_double((*x6))) : scheme_null);
  p[7] = ((x7) ? objscheme_box(scheme_make_double((*x7))) : scheme_null);
  p[8] = ((x8) ? objscheme_box(scheme_make_double((*x8))) : scheme_null);
  

  v = scheme_apply(method, 9, p);
  
  if (x3) *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:text-snip%::get-extent"", extracting return value via box"), "wx:text-snip%::get-extent"", extracting return value via box");
  if (x4) *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:text-snip%::get-extent"", extracting return value via box"), "wx:text-snip%::get-extent"", extracting return value via box");
  if (x5) *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:text-snip%::get-extent"", extracting return value via box"), "wx:text-snip%::get-extent"", extracting return value via box");
  if (x6) *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:text-snip%::get-extent"", extracting return value via box"), "wx:text-snip%::get-extent"", extracting return value via box");
  if (x7) *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:text-snip%::get-extent"", extracting return value via box"), "wx:text-snip%::get-extent"", extracting return value via box");
  if (x8) *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:text-snip%::get-extent"", extracting return value via box"), "wx:text-snip%::get-extent"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxTextSnipRead(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  class wxMediaStreamIn* x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-snip%::read");
  x1 = objscheme_unbundle_wxMediaStreamIn(p[1], "wx:text-snip%::read", 0);

  
  ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->Read(x0, *x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipInsert(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  long x1;
  long x2;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:text-snip%::insert");
  x1 = objscheme_unbundle_integer(p[1], "wx:text-snip%::insert");
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:text-snip%::insert");
  } else
    x2 = 0;

  
  ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->Insert(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipSetAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnipAdmin* x0;

  
  x0 = objscheme_unbundle_wxSnipAdmin(p[0], "wx:text-snip%::set-admin", 1);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::SetAdmin(x0);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->SetAdmin(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipResize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:text-snip%::resize");
  x1 = objscheme_unbundle_float(p[1], "wx:text-snip%::resize");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::Resize(x0, x1);
  else
    r = ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->Resize(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextSnipWrite(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:text-snip%::write", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::Write(*x0);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->Write(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipMatch(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:text-snip%::match?", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::Match(x0);
  else
    r = ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->Match(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTextSnipDoFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-snip%::do-font");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:text-snip%::do-font");
  } else
    x1 = TRUE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::DoFont(x0, x1);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->DoFont(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipDoEdit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;
  long x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-snip%::do-edit");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:text-snip%::do-edit");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:text-snip%::do-edit");
  } else
    x2 = 0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::DoEdit(x0, x1, x2);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->DoEdit(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipOwnCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:text-snip%::own-caret");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::OwnCaret(x0);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->OwnCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipAdjustCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxCursor* r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:text-snip%::adjust-cursor", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:text-snip%::adjust-cursor");
  x2 = objscheme_unbundle_float(p[2], "wx:text-snip%::adjust-cursor");
  x3 = objscheme_unbundle_float(p[3], "wx:text-snip%::adjust-cursor");
  x4 = objscheme_unbundle_float(p[4], "wx:text-snip%::adjust-cursor");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:text-snip%::adjust-cursor", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::adjust-cursor");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::AdjustCursor(x0, x1, x2, x3, x4, *x5);
  else
    r = ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->AdjustCursor(x0, x1, x2, x3, x4, *x5);

  
  
  return objscheme_bundle_wxCursor(r);
}

#pragma argsused
static Scheme_Object *os_wxTextSnipOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxKeyEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:text-snip%::on-char", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:text-snip%::on-char");
  x2 = objscheme_unbundle_float(p[2], "wx:text-snip%::on-char");
  x3 = objscheme_unbundle_float(p[3], "wx:text-snip%::on-char");
  x4 = objscheme_unbundle_float(p[4], "wx:text-snip%::on-char");
  x5 = objscheme_unbundle_wxKeyEvent(p[5], "wx:text-snip%::on-char", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-char");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::OnChar(x0, x1, x2, x3, x4, *x5);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->OnChar(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:text-snip%::on-event", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:text-snip%::on-event");
  x2 = objscheme_unbundle_float(p[2], "wx:text-snip%::on-event");
  x3 = objscheme_unbundle_float(p[3], "wx:text-snip%::on-event");
  x4 = objscheme_unbundle_float(p[4], "wx:text-snip%::on-event");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:text-snip%::on-event", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-event");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::OnEvent(x0, x1, x2, x3, x4, *x5);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipSizeCacheInvalid(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::SizeCacheInvalid();
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->SizeCacheInvalid();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::Copy();
  else
    r = ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->Copy();

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxTextSnipGetText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  long x0;
  long x1;
  Bool x2;
  long _x3;
  long* x3 = &_x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-snip%::get-text");
  x1 = objscheme_unbundle_integer(p[1], "wx:text-snip%::get-text");
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:text-snip%::get-text");
  } else
    x2 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::GetText(x0, x1, x2, x3);
  else
    r = ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->GetText(x0, x1, x2, x3);

  
  
  return scheme_make_sized_string(r, _x3, 0);
}

#pragma argsused
static Scheme_Object *os_wxTextSnipMergeWith(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:text-snip%::merge-with", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::MergeWith(x0);
  else
    r = ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->MergeWith(x0);

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxTextSnipSplit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  class wxSnip* _x1;
  class wxSnip** x1 = &_x1;
  class wxSnip* _x2;
  class wxSnip** x2 = &_x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:text-snip%::split");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:text-snip%::split", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:text-snip%::split"), "wx:text-snip%::split", 0);
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:text-snip%::split", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:text-snip%::split"), "wx:text-snip%::split", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::Split(x0, x1, x2);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->Split(x0, x1, x2);

  
  if (n > 1)
    objscheme_set_box(p[1], objscheme_bundle_wxSnip(_x1));
  if (n > 2)
    objscheme_set_box(p[2], objscheme_bundle_wxSnip(_x2));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipDraw(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;
  float x6;
  float x7;
  float x8;
  int x9;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:text-snip%::draw", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:text-snip%::draw");
  x2 = objscheme_unbundle_float(p[2], "wx:text-snip%::draw");
  x3 = objscheme_unbundle_float(p[3], "wx:text-snip%::draw");
  x4 = objscheme_unbundle_float(p[4], "wx:text-snip%::draw");
  x5 = objscheme_unbundle_float(p[5], "wx:text-snip%::draw");
  x6 = objscheme_unbundle_float(p[6], "wx:text-snip%::draw");
  x7 = objscheme_unbundle_float(p[7], "wx:text-snip%::draw");
  x8 = objscheme_unbundle_float(p[8], "wx:text-snip%::draw");
  x9 = objscheme_unbundle_integer(p[9], "wx:text-snip%::draw");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::draw");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnipPartialOffset(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  long x3;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:text-snip%::partial-offset", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:text-snip%::partial-offset");
  x2 = objscheme_unbundle_float(p[2], "wx:text-snip%::partial-offset");
  x3 = objscheme_unbundle_integer(p[3], "wx:text-snip%::partial-offset");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::partial-offset");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::PartialOffset(x0, x1, x2, x3);
  else
    r = ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->PartialOffset(x0, x1, x2, x3);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxTextSnipGetExtent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float _x3;
  float* x3 = &_x3;
  float _x4;
  float* x4 = &_x4;
  float _x5;
  float* x5 = &_x5;
  float _x6;
  float* x6 = &_x6;
  float _x7;
  float* x7 = &_x7;
  float _x8;
  float* x8 = &_x8;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:text-snip%::get-extent", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:text-snip%::get-extent");
  x2 = objscheme_unbundle_float(p[2], "wx:text-snip%::get-extent");
  if (n > 3) {
    if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:text-snip%::get-extent"), "wx:text-snip%::get-extent");
  } else
    x3 = NULL;
  if (n > 4) {
    if (SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:text-snip%::get-extent"), "wx:text-snip%::get-extent");
  } else
    x4 = NULL;
  if (n > 5) {
    if (SCHEME_NULLP(p[5]))
    x5 = NULL;
  else
    *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:text-snip%::get-extent"), "wx:text-snip%::get-extent");
  } else
    x5 = NULL;
  if (n > 6) {
    if (SCHEME_NULLP(p[6]))
    x6 = NULL;
  else
    *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:text-snip%::get-extent"), "wx:text-snip%::get-extent");
  } else
    x6 = NULL;
  if (n > 7) {
    if (SCHEME_NULLP(p[7]))
    x7 = NULL;
  else
    *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:text-snip%::get-extent"), "wx:text-snip%::get-extent");
  } else
    x7 = NULL;
  if (n > 8) {
    if (SCHEME_NULLP(p[8]))
    x8 = NULL;
  else
    *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:text-snip%::get-extent"), "wx:text-snip%::get-extent");
  } else
    x8 = NULL;

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::get-extent");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTextSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  else
    ((wxTextSnip *)((Scheme_Class_Object *)obj)->primdata)->GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  if (n > 4 && !SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  if (n > 5 && !SCHEME_NULLP(p[5]))
    objscheme_set_box(p[5], scheme_make_double(_x5));
  if (n > 6 && !SCHEME_NULLP(p[6]))
    objscheme_set_box(p[6], scheme_make_double(_x6));
  if (n > 7 && !SCHEME_NULLP(p[7]))
    objscheme_set_box(p[7], scheme_make_double(_x7));
  if (n > 8 && !SCHEME_NULLP(p[8]))
    objscheme_set_box(p[8], scheme_make_double(_x8));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTextSnip_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxTextSnip *realobj;
  long x0;

  
  if ((n > 1)) 
    scheme_wrong_count("wx:text-snip%::initialization", 0, 1, n, p);
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:text-snip%::initialization");
  } else
    x0 = 0;

  
  realobj = new os_wxTextSnip(obj, x0);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxTextSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:text-snip%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:text-snip%");
}

void objscheme_setup_wxTextSnip(void *env)
{
if (os_wxTextSnip_class) {
    objscheme_add_global_class(os_wxTextSnip_class,  "wx:text-snip%", env);
} else {
  os_wxTextSnip_class = objscheme_def_prim_class(env, "wx:text-snip%", "wx:snip%", os_wxTextSnip_ConstructScheme, 21);

  scheme_add_method_w_arity(os_wxTextSnip_class,"get-class-name",objscheme_classname_os_wxTextSnip, 0, 0);

 scheme_add_method_w_arity(os_wxTextSnip_class, "read", os_wxTextSnipRead, 2, 2);
 scheme_add_method_w_arity(os_wxTextSnip_class, "insert", os_wxTextSnipInsert, 2, 3);
 scheme_add_method_w_arity(os_wxTextSnip_class, "set-admin", os_wxTextSnipSetAdmin, 1, 1);
 scheme_add_method_w_arity(os_wxTextSnip_class, "resize", os_wxTextSnipResize, 2, 2);
 scheme_add_method_w_arity(os_wxTextSnip_class, "write", os_wxTextSnipWrite, 1, 1);
 scheme_add_method_w_arity(os_wxTextSnip_class, "match?", os_wxTextSnipMatch, 1, 1);
 scheme_add_method_w_arity(os_wxTextSnip_class, "do-font", os_wxTextSnipDoFont, 1, 2);
 scheme_add_method_w_arity(os_wxTextSnip_class, "do-edit", os_wxTextSnipDoEdit, 1, 3);
 scheme_add_method_w_arity(os_wxTextSnip_class, "own-caret", os_wxTextSnipOwnCaret, 1, 1);
 scheme_add_method_w_arity(os_wxTextSnip_class, "adjust-cursor", os_wxTextSnipAdjustCursor, 6, 6);
 scheme_add_method_w_arity(os_wxTextSnip_class, "on-char", os_wxTextSnipOnChar, 6, 6);
 scheme_add_method_w_arity(os_wxTextSnip_class, "on-event", os_wxTextSnipOnEvent, 6, 6);
 scheme_add_method_w_arity(os_wxTextSnip_class, "size-cache-invalid", os_wxTextSnipSizeCacheInvalid, 0, 0);
 scheme_add_method_w_arity(os_wxTextSnip_class, "copy", os_wxTextSnipCopy, 0, 0);
 scheme_add_method_w_arity(os_wxTextSnip_class, "get-text", os_wxTextSnipGetText, 2, 3);
 scheme_add_method_w_arity(os_wxTextSnip_class, "merge-with", os_wxTextSnipMergeWith, 1, 1);
 scheme_add_method_w_arity(os_wxTextSnip_class, "split", os_wxTextSnipSplit, 3, 3);
 scheme_add_method_w_arity(os_wxTextSnip_class, "draw", os_wxTextSnipDraw, 10, 10);
 scheme_add_method_w_arity(os_wxTextSnip_class, "partial-offset", os_wxTextSnipPartialOffset, 4, 4);
 scheme_add_method_w_arity(os_wxTextSnip_class, "get-extent", os_wxTextSnipGetExtent, 3, 9);


  scheme_made_class(os_wxTextSnip_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxTextSnip, wxTYPE_TEXT_SNIP);

}
}

int objscheme_istype_wxTextSnip(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxTextSnip_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:text-snip%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxTextSnip(class wxTextSnip *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_TEXT_SNIP) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxTextSnip_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxTextSnip *objscheme_unbundle_wxTextSnip(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxTextSnip(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxTextSnip *)o->primdata;
  else
    return (wxTextSnip *)o->primdata;
}















class os_wxTabSnip : public wxTabSnip {
 public:

  os_wxTabSnip(Scheme_Object * obj);
  ~os_wxTabSnip();
  void SetAdmin(class wxSnipAdmin* x0);
  Bool Resize(float x0, float x1);
  void Write(class wxMediaStreamOut& x0);
  Bool Match(class wxSnip* x0);
  void DoFont(int x0, Bool x1 = TRUE);
  void DoEdit(int x0, Bool x1 = TRUE, long x2 = 0);
  void OwnCaret(Bool x0);
  class wxCursor* AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5);
  void OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void SizeCacheInvalid();
  class wxSnip* Copy();
  string GetText(long x0, long x1, Bool x2 = FALSE, long* x3 = NULL);
  class wxSnip* MergeWith(class wxSnip* x0);
  void Split(long x0, class wxSnip** x1, class wxSnip** x2);
  void Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9);
  float PartialOffset(class wxDC* x0, float x1, float x2, long x3);
  void GetExtent(class wxDC* x0, float x1, float x2, float* x3 = NULL, float* x4 = NULL, float* x5 = NULL, float* x6 = NULL, float* x7 = NULL, float* x8 = NULL);
};

Scheme_Object *os_wxTabSnip_class;

os_wxTabSnip::os_wxTabSnip(Scheme_Object * o)
: wxTabSnip()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxTabSnip::~os_wxTabSnip()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxTabSnip::SetAdmin(class wxSnipAdmin* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "set-admin", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::SetAdmin(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnipAdmin(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxTabSnip::Resize(float x0, float x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "resize", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTabSnip::Resize(x0, x1);
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:tab-snip%::resize"", extracting return value");
  }
}

void os_wxTabSnip::Write(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "write", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::Write(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxTabSnip::Match(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "match?", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTabSnip::Match(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:tab-snip%::match?"", extracting return value");
  }
}

void os_wxTabSnip::DoFont(int x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "do-font", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::DoFont(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTabSnip::DoEdit(int x0, Bool x1, long x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "do-edit", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::DoEdit(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  p[2] = scheme_make_integer(x2);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTabSnip::OwnCaret(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "own-caret", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::OwnCaret(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxCursor* os_wxTabSnip::AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "adjust-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTabSnip::AdjustCursor(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxCursor(v, "wx:tab-snip%::adjust-cursor"", extracting return value", 1);
  }
}

void os_wxTabSnip::OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::OnChar(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxKeyEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTabSnip::OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::OnEvent(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTabSnip::SizeCacheInvalid()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "size-cache-invalid", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::SizeCacheInvalid();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxSnip* os_wxTabSnip::Copy()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "copy", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTabSnip::Copy();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:tab-snip%::copy"", extracting return value", 0);
  }
}

string os_wxTabSnip::GetText(long x0, long x1, Bool x2, long* x3)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "get-text", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTabSnip::GetText(x0, x1, x2, x3);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  p[2] = (x2 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (string)objscheme_unbundle_string(v, "wx:tab-snip%::get-text"", extracting return value");
  }
}

class wxSnip* os_wxTabSnip::MergeWith(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "merge-with", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTabSnip::MergeWith(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:tab-snip%::merge-with"", extracting return value", 0);
  }
}

void os_wxTabSnip::Split(long x0, class wxSnip** x1, class wxSnip** x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "split", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::Split(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = objscheme_box(objscheme_bundle_wxSnip((*x1)));
  p[2] = objscheme_box(objscheme_bundle_wxSnip((*x2)));
  

  v = scheme_apply(method, 3, p);
  
  if (x1) *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:tab-snip%::split"", extracting return value via box"), "wx:tab-snip%::split"", extracting return value via box", 0);
  if (x2) *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:tab-snip%::split"", extracting return value via box"), "wx:tab-snip%::split"", extracting return value via box", 0);
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxTabSnip::Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9)
{
  Scheme_Object *p[10];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "draw", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = scheme_make_double(x5);
  p[6] = scheme_make_double(x6);
  p[7] = scheme_make_double(x7);
  p[8] = scheme_make_double(x8);
  p[9] = scheme_make_integer(x9);
  

  v = scheme_apply(method, 10, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

float os_wxTabSnip::PartialOffset(class wxDC* x0, float x1, float x2, long x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "partial-offset", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxTabSnip::PartialOffset(x0, x1, x2, x3);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_integer(x3);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_float(v, "wx:tab-snip%::partial-offset"", extracting return value");
  }
}

void os_wxTabSnip::GetExtent(class wxDC* x0, float x1, float x2, float* x3, float* x4, float* x5, float* x6, float* x7, float* x8)
{
  Scheme_Object *p[9];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTabSnip_class, "get-extent", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxTabSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = ((x3) ? objscheme_box(scheme_make_double((*x3))) : scheme_null);
  p[4] = ((x4) ? objscheme_box(scheme_make_double((*x4))) : scheme_null);
  p[5] = ((x5) ? objscheme_box(scheme_make_double((*x5))) : scheme_null);
  p[6] = ((x6) ? objscheme_box(scheme_make_double((*x6))) : scheme_null);
  p[7] = ((x7) ? objscheme_box(scheme_make_double((*x7))) : scheme_null);
  p[8] = ((x8) ? objscheme_box(scheme_make_double((*x8))) : scheme_null);
  

  v = scheme_apply(method, 9, p);
  
  if (x3) *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:tab-snip%::get-extent"", extracting return value via box"), "wx:tab-snip%::get-extent"", extracting return value via box");
  if (x4) *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:tab-snip%::get-extent"", extracting return value via box"), "wx:tab-snip%::get-extent"", extracting return value via box");
  if (x5) *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:tab-snip%::get-extent"", extracting return value via box"), "wx:tab-snip%::get-extent"", extracting return value via box");
  if (x6) *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:tab-snip%::get-extent"", extracting return value via box"), "wx:tab-snip%::get-extent"", extracting return value via box");
  if (x7) *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:tab-snip%::get-extent"", extracting return value via box"), "wx:tab-snip%::get-extent"", extracting return value via box");
  if (x8) *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:tab-snip%::get-extent"", extracting return value via box"), "wx:tab-snip%::get-extent"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxTabSnipSetAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnipAdmin* x0;

  
  x0 = objscheme_unbundle_wxSnipAdmin(p[0], "wx:tab-snip%::set-admin", 1);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::SetAdmin(x0);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->SetAdmin(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipResize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:tab-snip%::resize");
  x1 = objscheme_unbundle_float(p[1], "wx:tab-snip%::resize");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::Resize(x0, x1);
  else
    r = ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->Resize(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTabSnipWrite(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:tab-snip%::write", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::Write(*x0);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->Write(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipMatch(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:tab-snip%::match?", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::Match(x0);
  else
    r = ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->Match(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTabSnipDoFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:tab-snip%::do-font");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:tab-snip%::do-font");
  } else
    x1 = TRUE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::DoFont(x0, x1);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->DoFont(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipDoEdit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;
  long x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:tab-snip%::do-edit");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:tab-snip%::do-edit");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:tab-snip%::do-edit");
  } else
    x2 = 0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::DoEdit(x0, x1, x2);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->DoEdit(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipOwnCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:tab-snip%::own-caret");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::OwnCaret(x0);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->OwnCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipAdjustCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxCursor* r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:tab-snip%::adjust-cursor", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:tab-snip%::adjust-cursor");
  x2 = objscheme_unbundle_float(p[2], "wx:tab-snip%::adjust-cursor");
  x3 = objscheme_unbundle_float(p[3], "wx:tab-snip%::adjust-cursor");
  x4 = objscheme_unbundle_float(p[4], "wx:tab-snip%::adjust-cursor");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:tab-snip%::adjust-cursor", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::adjust-cursor");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::AdjustCursor(x0, x1, x2, x3, x4, *x5);
  else
    r = ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->AdjustCursor(x0, x1, x2, x3, x4, *x5);

  
  
  return objscheme_bundle_wxCursor(r);
}

#pragma argsused
static Scheme_Object *os_wxTabSnipOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxKeyEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:tab-snip%::on-char", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:tab-snip%::on-char");
  x2 = objscheme_unbundle_float(p[2], "wx:tab-snip%::on-char");
  x3 = objscheme_unbundle_float(p[3], "wx:tab-snip%::on-char");
  x4 = objscheme_unbundle_float(p[4], "wx:tab-snip%::on-char");
  x5 = objscheme_unbundle_wxKeyEvent(p[5], "wx:tab-snip%::on-char", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-char");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::OnChar(x0, x1, x2, x3, x4, *x5);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->OnChar(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:tab-snip%::on-event", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:tab-snip%::on-event");
  x2 = objscheme_unbundle_float(p[2], "wx:tab-snip%::on-event");
  x3 = objscheme_unbundle_float(p[3], "wx:tab-snip%::on-event");
  x4 = objscheme_unbundle_float(p[4], "wx:tab-snip%::on-event");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:tab-snip%::on-event", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-event");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::OnEvent(x0, x1, x2, x3, x4, *x5);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipSizeCacheInvalid(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::SizeCacheInvalid();
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->SizeCacheInvalid();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::Copy();
  else
    r = ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->Copy();

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxTabSnipGetText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  long x0;
  long x1;
  Bool x2;
  long _x3;
  long* x3 = &_x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:tab-snip%::get-text");
  x1 = objscheme_unbundle_integer(p[1], "wx:tab-snip%::get-text");
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:tab-snip%::get-text");
  } else
    x2 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::GetText(x0, x1, x2, x3);
  else
    r = ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->GetText(x0, x1, x2, x3);

  
  
  return scheme_make_sized_string(r, _x3, 0);
}

#pragma argsused
static Scheme_Object *os_wxTabSnipMergeWith(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:tab-snip%::merge-with", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::MergeWith(x0);
  else
    r = ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->MergeWith(x0);

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxTabSnipSplit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  class wxSnip* _x1;
  class wxSnip** x1 = &_x1;
  class wxSnip* _x2;
  class wxSnip** x2 = &_x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:tab-snip%::split");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:tab-snip%::split", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:tab-snip%::split"), "wx:tab-snip%::split", 0);
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:tab-snip%::split", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:tab-snip%::split"), "wx:tab-snip%::split", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::Split(x0, x1, x2);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->Split(x0, x1, x2);

  
  if (n > 1)
    objscheme_set_box(p[1], objscheme_bundle_wxSnip(_x1));
  if (n > 2)
    objscheme_set_box(p[2], objscheme_bundle_wxSnip(_x2));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipDraw(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;
  float x6;
  float x7;
  float x8;
  int x9;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:tab-snip%::draw", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:tab-snip%::draw");
  x2 = objscheme_unbundle_float(p[2], "wx:tab-snip%::draw");
  x3 = objscheme_unbundle_float(p[3], "wx:tab-snip%::draw");
  x4 = objscheme_unbundle_float(p[4], "wx:tab-snip%::draw");
  x5 = objscheme_unbundle_float(p[5], "wx:tab-snip%::draw");
  x6 = objscheme_unbundle_float(p[6], "wx:tab-snip%::draw");
  x7 = objscheme_unbundle_float(p[7], "wx:tab-snip%::draw");
  x8 = objscheme_unbundle_float(p[8], "wx:tab-snip%::draw");
  x9 = objscheme_unbundle_integer(p[9], "wx:tab-snip%::draw");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::draw");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnipPartialOffset(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  long x3;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:tab-snip%::partial-offset", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:tab-snip%::partial-offset");
  x2 = objscheme_unbundle_float(p[2], "wx:tab-snip%::partial-offset");
  x3 = objscheme_unbundle_integer(p[3], "wx:tab-snip%::partial-offset");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::partial-offset");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::PartialOffset(x0, x1, x2, x3);
  else
    r = ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->PartialOffset(x0, x1, x2, x3);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxTabSnipGetExtent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float _x3;
  float* x3 = &_x3;
  float _x4;
  float* x4 = &_x4;
  float _x5;
  float* x5 = &_x5;
  float _x6;
  float* x6 = &_x6;
  float _x7;
  float* x7 = &_x7;
  float _x8;
  float* x8 = &_x8;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:tab-snip%::get-extent", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:tab-snip%::get-extent");
  x2 = objscheme_unbundle_float(p[2], "wx:tab-snip%::get-extent");
  if (n > 3) {
    if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:tab-snip%::get-extent"), "wx:tab-snip%::get-extent");
  } else
    x3 = NULL;
  if (n > 4) {
    if (SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:tab-snip%::get-extent"), "wx:tab-snip%::get-extent");
  } else
    x4 = NULL;
  if (n > 5) {
    if (SCHEME_NULLP(p[5]))
    x5 = NULL;
  else
    *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:tab-snip%::get-extent"), "wx:tab-snip%::get-extent");
  } else
    x5 = NULL;
  if (n > 6) {
    if (SCHEME_NULLP(p[6]))
    x6 = NULL;
  else
    *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:tab-snip%::get-extent"), "wx:tab-snip%::get-extent");
  } else
    x6 = NULL;
  if (n > 7) {
    if (SCHEME_NULLP(p[7]))
    x7 = NULL;
  else
    *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:tab-snip%::get-extent"), "wx:tab-snip%::get-extent");
  } else
    x7 = NULL;
  if (n > 8) {
    if (SCHEME_NULLP(p[8]))
    x8 = NULL;
  else
    *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:tab-snip%::get-extent"), "wx:tab-snip%::get-extent");
  } else
    x8 = NULL;

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::get-extent");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->wxTabSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  else
    ((wxTabSnip *)((Scheme_Class_Object *)obj)->primdata)->GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  if (n > 4 && !SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  if (n > 5 && !SCHEME_NULLP(p[5]))
    objscheme_set_box(p[5], scheme_make_double(_x5));
  if (n > 6 && !SCHEME_NULLP(p[6]))
    objscheme_set_box(p[6], scheme_make_double(_x6));
  if (n > 7 && !SCHEME_NULLP(p[7]))
    objscheme_set_box(p[7], scheme_make_double(_x7));
  if (n > 8 && !SCHEME_NULLP(p[8]))
    objscheme_set_box(p[8], scheme_make_double(_x8));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTabSnip_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxTabSnip *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:tab-snip%::initialization", 0, 0, n, p);

  
  realobj = new os_wxTabSnip(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxTabSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:tab-snip%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:tab-snip%");
}

void objscheme_setup_wxTabSnip(void *env)
{
if (os_wxTabSnip_class) {
    objscheme_add_global_class(os_wxTabSnip_class,  "wx:tab-snip%", env);
} else {
  os_wxTabSnip_class = objscheme_def_prim_class(env, "wx:tab-snip%", "wx:text-snip%", os_wxTabSnip_ConstructScheme, 19);

  scheme_add_method_w_arity(os_wxTabSnip_class,"get-class-name",objscheme_classname_os_wxTabSnip, 0, 0);

 scheme_add_method_w_arity(os_wxTabSnip_class, "set-admin", os_wxTabSnipSetAdmin, 1, 1);
 scheme_add_method_w_arity(os_wxTabSnip_class, "resize", os_wxTabSnipResize, 2, 2);
 scheme_add_method_w_arity(os_wxTabSnip_class, "write", os_wxTabSnipWrite, 1, 1);
 scheme_add_method_w_arity(os_wxTabSnip_class, "match?", os_wxTabSnipMatch, 1, 1);
 scheme_add_method_w_arity(os_wxTabSnip_class, "do-font", os_wxTabSnipDoFont, 1, 2);
 scheme_add_method_w_arity(os_wxTabSnip_class, "do-edit", os_wxTabSnipDoEdit, 1, 3);
 scheme_add_method_w_arity(os_wxTabSnip_class, "own-caret", os_wxTabSnipOwnCaret, 1, 1);
 scheme_add_method_w_arity(os_wxTabSnip_class, "adjust-cursor", os_wxTabSnipAdjustCursor, 6, 6);
 scheme_add_method_w_arity(os_wxTabSnip_class, "on-char", os_wxTabSnipOnChar, 6, 6);
 scheme_add_method_w_arity(os_wxTabSnip_class, "on-event", os_wxTabSnipOnEvent, 6, 6);
 scheme_add_method_w_arity(os_wxTabSnip_class, "size-cache-invalid", os_wxTabSnipSizeCacheInvalid, 0, 0);
 scheme_add_method_w_arity(os_wxTabSnip_class, "copy", os_wxTabSnipCopy, 0, 0);
 scheme_add_method_w_arity(os_wxTabSnip_class, "get-text", os_wxTabSnipGetText, 2, 3);
 scheme_add_method_w_arity(os_wxTabSnip_class, "merge-with", os_wxTabSnipMergeWith, 1, 1);
 scheme_add_method_w_arity(os_wxTabSnip_class, "split", os_wxTabSnipSplit, 3, 3);
 scheme_add_method_w_arity(os_wxTabSnip_class, "draw", os_wxTabSnipDraw, 10, 10);
 scheme_add_method_w_arity(os_wxTabSnip_class, "partial-offset", os_wxTabSnipPartialOffset, 4, 4);
 scheme_add_method_w_arity(os_wxTabSnip_class, "get-extent", os_wxTabSnipGetExtent, 3, 9);


  scheme_made_class(os_wxTabSnip_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxTabSnip, wxTYPE_TAB_SNIP);

}
}

int objscheme_istype_wxTabSnip(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxTabSnip_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:tab-snip%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxTabSnip(class wxTabSnip *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_TAB_SNIP) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxTabSnip_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxTabSnip *objscheme_unbundle_wxTabSnip(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxTabSnip(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxTabSnip *)o->primdata;
  else
    return (wxTabSnip *)o->primdata;
}



#ifndef wx_mac
#define wxBITMAP_TYPE_PICT 101
#define wxBITMAP_TYPE_PICT_RESOURCE 100
#endif

static Scheme_Object *bitmapType_wxBITMAP_TYPE_BMP_sym = NULL;
static Scheme_Object *bitmapType_wxBITMAP_TYPE_BMP_RESOURCE_sym = NULL;
static Scheme_Object *bitmapType_wxBITMAP_TYPE_GIF_sym = NULL;
static Scheme_Object *bitmapType_wxBITMAP_TYPE_XBM_sym = NULL;
static Scheme_Object *bitmapType_wxBITMAP_TYPE_XPM_sym = NULL;
static Scheme_Object *bitmapType_wxBITMAP_TYPE_PICT_sym = NULL;
static Scheme_Object *bitmapType_wxBITMAP_TYPE_PICT_RESOURCE_sym = NULL;

static void init_symset_bitmapType(void) {
  bitmapType_wxBITMAP_TYPE_BMP_sym = scheme_intern_symbol("bitmap-type-bmp");
  bitmapType_wxBITMAP_TYPE_BMP_RESOURCE_sym = scheme_intern_symbol("bitmap-type-bmp-resource");
  bitmapType_wxBITMAP_TYPE_GIF_sym = scheme_intern_symbol("bitmap-type-gif");
  bitmapType_wxBITMAP_TYPE_XBM_sym = scheme_intern_symbol("bitmap-type-xbm");
  bitmapType_wxBITMAP_TYPE_XPM_sym = scheme_intern_symbol("bitmap-type-xpm");
  bitmapType_wxBITMAP_TYPE_PICT_sym = scheme_intern_symbol("bitmap-type-pict");
  bitmapType_wxBITMAP_TYPE_PICT_RESOURCE_sym = scheme_intern_symbol("bitmap-type-pict-resource");
}

static int unbundle_symset_bitmapType(Scheme_Object *v, const char *where) {
  if (!bitmapType_wxBITMAP_TYPE_PICT_RESOURCE_sym) init_symset_bitmapType();
  if (0) { }
  else if (v == bitmapType_wxBITMAP_TYPE_BMP_sym) { return wxBITMAP_TYPE_BMP; }
  else if (v == bitmapType_wxBITMAP_TYPE_BMP_RESOURCE_sym) { return wxBITMAP_TYPE_BMP_RESOURCE; }
  else if (v == bitmapType_wxBITMAP_TYPE_GIF_sym) { return wxBITMAP_TYPE_GIF; }
  else if (v == bitmapType_wxBITMAP_TYPE_XBM_sym) { return wxBITMAP_TYPE_XBM; }
  else if (v == bitmapType_wxBITMAP_TYPE_XPM_sym) { return wxBITMAP_TYPE_XPM; }
  else if (v == bitmapType_wxBITMAP_TYPE_PICT_sym) { return wxBITMAP_TYPE_PICT; }
  else if (v == bitmapType_wxBITMAP_TYPE_PICT_RESOURCE_sym) { return wxBITMAP_TYPE_PICT_RESOURCE; }
  if (where) scheme_wrong_type(where, "bitmapType symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_bitmapType(Scheme_Object *v, const char *where) {
  if (!bitmapType_wxBITMAP_TYPE_PICT_RESOURCE_sym) init_symset_bitmapType();
  if (0) { }
  else if (v == bitmapType_wxBITMAP_TYPE_BMP_sym) { return 1; }
  else if (v == bitmapType_wxBITMAP_TYPE_BMP_RESOURCE_sym) { return 1; }
  else if (v == bitmapType_wxBITMAP_TYPE_GIF_sym) { return 1; }
  else if (v == bitmapType_wxBITMAP_TYPE_XBM_sym) { return 1; }
  else if (v == bitmapType_wxBITMAP_TYPE_XPM_sym) { return 1; }
  else if (v == bitmapType_wxBITMAP_TYPE_PICT_sym) { return 1; }
  else if (v == bitmapType_wxBITMAP_TYPE_PICT_RESOURCE_sym) { return 1; }
  if (where) scheme_wrong_type(where, "bitmapType symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_bitmapType(int v) {
  if (!bitmapType_wxBITMAP_TYPE_PICT_RESOURCE_sym) init_symset_bitmapType();
  switch (v) {
  case wxBITMAP_TYPE_BMP: return bitmapType_wxBITMAP_TYPE_BMP_sym;
  case wxBITMAP_TYPE_BMP_RESOURCE: return bitmapType_wxBITMAP_TYPE_BMP_RESOURCE_sym;
  case wxBITMAP_TYPE_GIF: return bitmapType_wxBITMAP_TYPE_GIF_sym;
  case wxBITMAP_TYPE_XBM: return bitmapType_wxBITMAP_TYPE_XBM_sym;
  case wxBITMAP_TYPE_XPM: return bitmapType_wxBITMAP_TYPE_XPM_sym;
  case wxBITMAP_TYPE_PICT: return bitmapType_wxBITMAP_TYPE_PICT_sym;
  case wxBITMAP_TYPE_PICT_RESOURCE: return bitmapType_wxBITMAP_TYPE_PICT_RESOURCE_sym;
  default: return NULL;
  }
}



// This isn't `pathname' because it expands internally











// This isn't `pathname' because it expands internally




class os_wxImageSnip : public wxImageSnip {
 public:

  os_wxImageSnip(Scheme_Object * obj, nstring x0 = NULL, int x1 = 0, Bool x2 = FALSE, Bool x3 = TRUE);
  ~os_wxImageSnip();
  void SetAdmin(class wxSnipAdmin* x0);
  Bool Resize(float x0, float x1);
  void Write(class wxMediaStreamOut& x0);
  Bool Match(class wxSnip* x0);
  void DoFont(int x0, Bool x1 = TRUE);
  void DoEdit(int x0, Bool x1 = TRUE, long x2 = 0);
  void OwnCaret(Bool x0);
  class wxCursor* AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5);
  void OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void SizeCacheInvalid();
  class wxSnip* Copy();
  string GetText(long x0, long x1, Bool x2 = FALSE, long* x3 = NULL);
  class wxSnip* MergeWith(class wxSnip* x0);
  void Split(long x0, class wxSnip** x1, class wxSnip** x2);
  void Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9);
  float PartialOffset(class wxDC* x0, float x1, float x2, long x3);
  void GetExtent(class wxDC* x0, float x1, float x2, float* x3 = NULL, float* x4 = NULL, float* x5 = NULL, float* x6 = NULL, float* x7 = NULL, float* x8 = NULL);
};

Scheme_Object *os_wxImageSnip_class;

os_wxImageSnip::os_wxImageSnip(Scheme_Object * o, nstring x0, int x1, Bool x2, Bool x3)
: wxImageSnip(x0, x1, x2, x3)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxImageSnip::~os_wxImageSnip()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxImageSnip::SetAdmin(class wxSnipAdmin* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "set-admin", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::SetAdmin(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnipAdmin(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxImageSnip::Resize(float x0, float x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "resize", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxImageSnip::Resize(x0, x1);
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:image-snip%::resize"", extracting return value");
  }
}

void os_wxImageSnip::Write(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "write", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::Write(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxImageSnip::Match(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "match?", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxImageSnip::Match(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:image-snip%::match?"", extracting return value");
  }
}

void os_wxImageSnip::DoFont(int x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "do-font", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::DoFont(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxImageSnip::DoEdit(int x0, Bool x1, long x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "do-edit", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::DoEdit(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  p[2] = scheme_make_integer(x2);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxImageSnip::OwnCaret(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "own-caret", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::OwnCaret(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxCursor* os_wxImageSnip::AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "adjust-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxImageSnip::AdjustCursor(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxCursor(v, "wx:image-snip%::adjust-cursor"", extracting return value", 1);
  }
}

void os_wxImageSnip::OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::OnChar(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxKeyEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxImageSnip::OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::OnEvent(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxImageSnip::SizeCacheInvalid()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "size-cache-invalid", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::SizeCacheInvalid();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxSnip* os_wxImageSnip::Copy()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "copy", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxImageSnip::Copy();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:image-snip%::copy"", extracting return value", 0);
  }
}

string os_wxImageSnip::GetText(long x0, long x1, Bool x2, long* x3)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "get-text", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxImageSnip::GetText(x0, x1, x2, x3);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  p[2] = (x2 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (string)objscheme_unbundle_string(v, "wx:image-snip%::get-text"", extracting return value");
  }
}

class wxSnip* os_wxImageSnip::MergeWith(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "merge-with", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxImageSnip::MergeWith(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:image-snip%::merge-with"", extracting return value", 0);
  }
}

void os_wxImageSnip::Split(long x0, class wxSnip** x1, class wxSnip** x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "split", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::Split(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = objscheme_box(objscheme_bundle_wxSnip((*x1)));
  p[2] = objscheme_box(objscheme_bundle_wxSnip((*x2)));
  

  v = scheme_apply(method, 3, p);
  
  if (x1) *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:image-snip%::split"", extracting return value via box"), "wx:image-snip%::split"", extracting return value via box", 0);
  if (x2) *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:image-snip%::split"", extracting return value via box"), "wx:image-snip%::split"", extracting return value via box", 0);
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxImageSnip::Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9)
{
  Scheme_Object *p[10];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "draw", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = scheme_make_double(x5);
  p[6] = scheme_make_double(x6);
  p[7] = scheme_make_double(x7);
  p[8] = scheme_make_double(x8);
  p[9] = scheme_make_integer(x9);
  

  v = scheme_apply(method, 10, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

float os_wxImageSnip::PartialOffset(class wxDC* x0, float x1, float x2, long x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "partial-offset", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxImageSnip::PartialOffset(x0, x1, x2, x3);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_integer(x3);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_float(v, "wx:image-snip%::partial-offset"", extracting return value");
  }
}

void os_wxImageSnip::GetExtent(class wxDC* x0, float x1, float x2, float* x3, float* x4, float* x5, float* x6, float* x7, float* x8)
{
  Scheme_Object *p[9];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxImageSnip_class, "get-extent", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxImageSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = ((x3) ? objscheme_box(scheme_make_double((*x3))) : scheme_null);
  p[4] = ((x4) ? objscheme_box(scheme_make_double((*x4))) : scheme_null);
  p[5] = ((x5) ? objscheme_box(scheme_make_double((*x5))) : scheme_null);
  p[6] = ((x6) ? objscheme_box(scheme_make_double((*x6))) : scheme_null);
  p[7] = ((x7) ? objscheme_box(scheme_make_double((*x7))) : scheme_null);
  p[8] = ((x8) ? objscheme_box(scheme_make_double((*x8))) : scheme_null);
  

  v = scheme_apply(method, 9, p);
  
  if (x3) *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:image-snip%::get-extent"", extracting return value via box"), "wx:image-snip%::get-extent"", extracting return value via box");
  if (x4) *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:image-snip%::get-extent"", extracting return value via box"), "wx:image-snip%::get-extent"", extracting return value via box");
  if (x5) *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:image-snip%::get-extent"", extracting return value via box"), "wx:image-snip%::get-extent"", extracting return value via box");
  if (x6) *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:image-snip%::get-extent"", extracting return value via box"), "wx:image-snip%::get-extent"", extracting return value via box");
  if (x7) *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:image-snip%::get-extent"", extracting return value via box"), "wx:image-snip%::get-extent"", extracting return value via box");
  if (x8) *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:image-snip%::get-extent"", extracting return value via box"), "wx:image-snip%::get-extent"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxImageSnipSetOffset(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:image-snip%::set-offset");
  x1 = objscheme_unbundle_float(p[1], "wx:image-snip%::set-offset");

  
  ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->SetOffset(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipSetBitmap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBitmap* x0;

  
  x0 = objscheme_unbundle_wxBitmap(p[0], "wx:image-snip%::set-bitmap", 0);

  
  ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->SetBitmap(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipGetFiletype(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->GetFiletype();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipGetFilename(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  Bool _x0;
  Bool* x0 = &_x0;

  
  if (SCHEME_NULLP(p[0]))
    x0 = NULL;
  else
    *x0 = objscheme_unbundle_bool(objscheme_unbox(p[0], "wx:image-snip%::get-filename"), "wx:image-snip%::get-filename");

  
  r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->GetFilename(x0);

  
  if (n > 0 && !SCHEME_NULLP(p[0]))
    objscheme_set_box(p[0], (_x0 ? scheme_true : scheme_false));
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipLoadFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  nstring x0;
  int x1;
  Bool x2;
  Bool x3;

  
  x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:image-snip%::load-file");
  x1 = unbundle_symset_bitmapType(p[1], "wx:image-snip%::load-file");;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:image-snip%::load-file");
  } else
    x2 = FALSE;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:image-snip%::load-file");
  } else
    x3 = TRUE;

  
  ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->LoadFile(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipSetAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnipAdmin* x0;

  
  x0 = objscheme_unbundle_wxSnipAdmin(p[0], "wx:image-snip%::set-admin", 1);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::SetAdmin(x0);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->SetAdmin(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipResize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:image-snip%::resize");
  x1 = objscheme_unbundle_float(p[1], "wx:image-snip%::resize");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::Resize(x0, x1);
  else
    r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->Resize(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipWrite(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:image-snip%::write", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::Write(*x0);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->Write(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipMatch(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:image-snip%::match?", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::Match(x0);
  else
    r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->Match(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipDoFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:image-snip%::do-font");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:image-snip%::do-font");
  } else
    x1 = TRUE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::DoFont(x0, x1);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->DoFont(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipDoEdit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;
  long x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:image-snip%::do-edit");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:image-snip%::do-edit");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:image-snip%::do-edit");
  } else
    x2 = 0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::DoEdit(x0, x1, x2);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->DoEdit(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipOwnCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:image-snip%::own-caret");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::OwnCaret(x0);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->OwnCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipAdjustCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxCursor* r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:image-snip%::adjust-cursor", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:image-snip%::adjust-cursor");
  x2 = objscheme_unbundle_float(p[2], "wx:image-snip%::adjust-cursor");
  x3 = objscheme_unbundle_float(p[3], "wx:image-snip%::adjust-cursor");
  x4 = objscheme_unbundle_float(p[4], "wx:image-snip%::adjust-cursor");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:image-snip%::adjust-cursor", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::adjust-cursor");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::AdjustCursor(x0, x1, x2, x3, x4, *x5);
  else
    r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->AdjustCursor(x0, x1, x2, x3, x4, *x5);

  
  
  return objscheme_bundle_wxCursor(r);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxKeyEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:image-snip%::on-char", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:image-snip%::on-char");
  x2 = objscheme_unbundle_float(p[2], "wx:image-snip%::on-char");
  x3 = objscheme_unbundle_float(p[3], "wx:image-snip%::on-char");
  x4 = objscheme_unbundle_float(p[4], "wx:image-snip%::on-char");
  x5 = objscheme_unbundle_wxKeyEvent(p[5], "wx:image-snip%::on-char", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-char");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::OnChar(x0, x1, x2, x3, x4, *x5);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->OnChar(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:image-snip%::on-event", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:image-snip%::on-event");
  x2 = objscheme_unbundle_float(p[2], "wx:image-snip%::on-event");
  x3 = objscheme_unbundle_float(p[3], "wx:image-snip%::on-event");
  x4 = objscheme_unbundle_float(p[4], "wx:image-snip%::on-event");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:image-snip%::on-event", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-event");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::OnEvent(x0, x1, x2, x3, x4, *x5);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipSizeCacheInvalid(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::SizeCacheInvalid();
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->SizeCacheInvalid();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::Copy();
  else
    r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->Copy();

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipGetText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  long x0;
  long x1;
  Bool x2;
  long _x3;
  long* x3 = &_x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:image-snip%::get-text");
  x1 = objscheme_unbundle_integer(p[1], "wx:image-snip%::get-text");
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:image-snip%::get-text");
  } else
    x2 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::GetText(x0, x1, x2, x3);
  else
    r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->GetText(x0, x1, x2, x3);

  
  
  return scheme_make_sized_string(r, _x3, 0);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipMergeWith(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:image-snip%::merge-with", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::MergeWith(x0);
  else
    r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->MergeWith(x0);

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipSplit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  class wxSnip* _x1;
  class wxSnip** x1 = &_x1;
  class wxSnip* _x2;
  class wxSnip** x2 = &_x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:image-snip%::split");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:image-snip%::split", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:image-snip%::split"), "wx:image-snip%::split", 0);
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:image-snip%::split", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:image-snip%::split"), "wx:image-snip%::split", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::Split(x0, x1, x2);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->Split(x0, x1, x2);

  
  if (n > 1)
    objscheme_set_box(p[1], objscheme_bundle_wxSnip(_x1));
  if (n > 2)
    objscheme_set_box(p[2], objscheme_bundle_wxSnip(_x2));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipDraw(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;
  float x6;
  float x7;
  float x8;
  int x9;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:image-snip%::draw", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:image-snip%::draw");
  x2 = objscheme_unbundle_float(p[2], "wx:image-snip%::draw");
  x3 = objscheme_unbundle_float(p[3], "wx:image-snip%::draw");
  x4 = objscheme_unbundle_float(p[4], "wx:image-snip%::draw");
  x5 = objscheme_unbundle_float(p[5], "wx:image-snip%::draw");
  x6 = objscheme_unbundle_float(p[6], "wx:image-snip%::draw");
  x7 = objscheme_unbundle_float(p[7], "wx:image-snip%::draw");
  x8 = objscheme_unbundle_float(p[8], "wx:image-snip%::draw");
  x9 = objscheme_unbundle_integer(p[9], "wx:image-snip%::draw");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::draw");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnipPartialOffset(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  long x3;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:image-snip%::partial-offset", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:image-snip%::partial-offset");
  x2 = objscheme_unbundle_float(p[2], "wx:image-snip%::partial-offset");
  x3 = objscheme_unbundle_integer(p[3], "wx:image-snip%::partial-offset");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::partial-offset");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::PartialOffset(x0, x1, x2, x3);
  else
    r = ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->PartialOffset(x0, x1, x2, x3);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxImageSnipGetExtent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float _x3;
  float* x3 = &_x3;
  float _x4;
  float* x4 = &_x4;
  float _x5;
  float* x5 = &_x5;
  float _x6;
  float* x6 = &_x6;
  float _x7;
  float* x7 = &_x7;
  float _x8;
  float* x8 = &_x8;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:image-snip%::get-extent", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:image-snip%::get-extent");
  x2 = objscheme_unbundle_float(p[2], "wx:image-snip%::get-extent");
  if (n > 3) {
    if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:image-snip%::get-extent"), "wx:image-snip%::get-extent");
  } else
    x3 = NULL;
  if (n > 4) {
    if (SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:image-snip%::get-extent"), "wx:image-snip%::get-extent");
  } else
    x4 = NULL;
  if (n > 5) {
    if (SCHEME_NULLP(p[5]))
    x5 = NULL;
  else
    *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:image-snip%::get-extent"), "wx:image-snip%::get-extent");
  } else
    x5 = NULL;
  if (n > 6) {
    if (SCHEME_NULLP(p[6]))
    x6 = NULL;
  else
    *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:image-snip%::get-extent"), "wx:image-snip%::get-extent");
  } else
    x6 = NULL;
  if (n > 7) {
    if (SCHEME_NULLP(p[7]))
    x7 = NULL;
  else
    *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:image-snip%::get-extent"), "wx:image-snip%::get-extent");
  } else
    x7 = NULL;
  if (n > 8) {
    if (SCHEME_NULLP(p[8]))
    x8 = NULL;
  else
    *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:image-snip%::get-extent"), "wx:image-snip%::get-extent");
  } else
    x8 = NULL;

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::get-extent");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->wxImageSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  else
    ((wxImageSnip *)((Scheme_Class_Object *)obj)->primdata)->GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  if (n > 4 && !SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  if (n > 5 && !SCHEME_NULLP(p[5]))
    objscheme_set_box(p[5], scheme_make_double(_x5));
  if (n > 6 && !SCHEME_NULLP(p[6]))
    objscheme_set_box(p[6], scheme_make_double(_x6));
  if (n > 7 && !SCHEME_NULLP(p[7]))
    objscheme_set_box(p[7], scheme_make_double(_x7));
  if (n > 8 && !SCHEME_NULLP(p[8]))
    objscheme_set_box(p[8], scheme_make_double(_x8));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxImageSnip_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxImageSnip *realobj;
  nstring x0;
  int x1;
  Bool x2;
  Bool x3;

  
  if ((n > 4)) 
    scheme_wrong_count("wx:image-snip%::initialization", 0, 4, n, p);
  if (n > 0) {
    x0 = (nstring)objscheme_unbundle_nullable_string(p[0], "wx:image-snip%::initialization");
  } else
    x0 = NULL;
  if (n > 1) {
    x1 = unbundle_symset_bitmapType(p[1], "wx:image-snip%::initialization");;
  } else
    x1 = 0;
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:image-snip%::initialization");
  } else
    x2 = FALSE;
  if (n > 3) {
    x3 = objscheme_unbundle_bool(p[3], "wx:image-snip%::initialization");
  } else
    x3 = TRUE;

  
  realobj = new os_wxImageSnip(obj, x0, x1, x2, x3);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxImageSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:image-snip%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:image-snip%");
}

void objscheme_setup_wxImageSnip(void *env)
{
if (os_wxImageSnip_class) {
    objscheme_add_global_class(os_wxImageSnip_class,  "wx:image-snip%", env);
} else {
  os_wxImageSnip_class = objscheme_def_prim_class(env, "wx:image-snip%", "wx:snip%", os_wxImageSnip_ConstructScheme, 24);

  scheme_add_method_w_arity(os_wxImageSnip_class,"get-class-name",objscheme_classname_os_wxImageSnip, 0, 0);

 scheme_add_method_w_arity(os_wxImageSnip_class, "set-offset", os_wxImageSnipSetOffset, 2, 2);
 scheme_add_method_w_arity(os_wxImageSnip_class, "set-bitmap", os_wxImageSnipSetBitmap, 1, 1);
 scheme_add_method_w_arity(os_wxImageSnip_class, "get-filetype", os_wxImageSnipGetFiletype, 0, 0);
 scheme_add_method_w_arity(os_wxImageSnip_class, "get-filename", os_wxImageSnipGetFilename, 1, 1);
 scheme_add_method_w_arity(os_wxImageSnip_class, "load-file", os_wxImageSnipLoadFile, 2, 4);
 scheme_add_method_w_arity(os_wxImageSnip_class, "set-admin", os_wxImageSnipSetAdmin, 1, 1);
 scheme_add_method_w_arity(os_wxImageSnip_class, "resize", os_wxImageSnipResize, 2, 2);
 scheme_add_method_w_arity(os_wxImageSnip_class, "write", os_wxImageSnipWrite, 1, 1);
 scheme_add_method_w_arity(os_wxImageSnip_class, "match?", os_wxImageSnipMatch, 1, 1);
 scheme_add_method_w_arity(os_wxImageSnip_class, "do-font", os_wxImageSnipDoFont, 1, 2);
 scheme_add_method_w_arity(os_wxImageSnip_class, "do-edit", os_wxImageSnipDoEdit, 1, 3);
 scheme_add_method_w_arity(os_wxImageSnip_class, "own-caret", os_wxImageSnipOwnCaret, 1, 1);
 scheme_add_method_w_arity(os_wxImageSnip_class, "adjust-cursor", os_wxImageSnipAdjustCursor, 6, 6);
 scheme_add_method_w_arity(os_wxImageSnip_class, "on-char", os_wxImageSnipOnChar, 6, 6);
 scheme_add_method_w_arity(os_wxImageSnip_class, "on-event", os_wxImageSnipOnEvent, 6, 6);
 scheme_add_method_w_arity(os_wxImageSnip_class, "size-cache-invalid", os_wxImageSnipSizeCacheInvalid, 0, 0);
 scheme_add_method_w_arity(os_wxImageSnip_class, "copy", os_wxImageSnipCopy, 0, 0);
 scheme_add_method_w_arity(os_wxImageSnip_class, "get-text", os_wxImageSnipGetText, 2, 3);
 scheme_add_method_w_arity(os_wxImageSnip_class, "merge-with", os_wxImageSnipMergeWith, 1, 1);
 scheme_add_method_w_arity(os_wxImageSnip_class, "split", os_wxImageSnipSplit, 3, 3);
 scheme_add_method_w_arity(os_wxImageSnip_class, "draw", os_wxImageSnipDraw, 10, 10);
 scheme_add_method_w_arity(os_wxImageSnip_class, "partial-offset", os_wxImageSnipPartialOffset, 4, 4);
 scheme_add_method_w_arity(os_wxImageSnip_class, "get-extent", os_wxImageSnipGetExtent, 3, 9);


  scheme_made_class(os_wxImageSnip_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxImageSnip, wxTYPE_IMAGE_SNIP);

}
}

int objscheme_istype_wxImageSnip(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxImageSnip_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:image-snip%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxImageSnip(class wxImageSnip *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_IMAGE_SNIP) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxImageSnip_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxImageSnip *objscheme_unbundle_wxImageSnip(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxImageSnip(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxImageSnip *)o->primdata;
  else
    return (wxImageSnip *)o->primdata;
}



#define Get_This_Media GetThisMedia

















class os_wxMediaSnip : public wxMediaSnip {
 public:

  os_wxMediaSnip(Scheme_Object * obj, class wxMediaBuffer* x0 = NULL, Bool x1 = TRUE, int x2 = wxMSNIPBOX_XMARGIN, int x3 = wxMSNIPBOX_YMARGIN, int x4 = wxMSNIPBOX_XMARGIN, int x5 = wxMSNIPBOX_YMARGIN, int x6 = wxMSNIPBOX_XINSET, int x7 = wxMSNIPBOX_YINSET, int x8 = wxMSNIPBOX_XINSET, int x9 = wxMSNIPBOX_YINSET, int x10 = -1, int x11 = -1, int x12 = -1, int x13 = -1);
  ~os_wxMediaSnip();
  void SetAdmin(class wxSnipAdmin* x0);
  Bool Resize(float x0, float x1);
  void Write(class wxMediaStreamOut& x0);
  Bool Match(class wxSnip* x0);
  void DoFont(int x0, Bool x1 = TRUE);
  void DoEdit(int x0, Bool x1 = TRUE, long x2 = 0);
  void OwnCaret(Bool x0);
  class wxCursor* AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5);
  void OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5);
  void SizeCacheInvalid();
  class wxSnip* Copy();
  string GetText(long x0, long x1, Bool x2 = FALSE, long* x3 = NULL);
  class wxSnip* MergeWith(class wxSnip* x0);
  void Split(long x0, class wxSnip** x1, class wxSnip** x2);
  void Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9);
  float PartialOffset(class wxDC* x0, float x1, float x2, long x3);
  void GetExtent(class wxDC* x0, float x1, float x2, float* x3 = NULL, float* x4 = NULL, float* x5 = NULL, float* x6 = NULL, float* x7 = NULL, float* x8 = NULL);
};

Scheme_Object *os_wxMediaSnip_class;

os_wxMediaSnip::os_wxMediaSnip(Scheme_Object * o, class wxMediaBuffer* x0, Bool x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12, int x13)
: wxMediaSnip(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMediaSnip::~os_wxMediaSnip()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxMediaSnip::SetAdmin(class wxSnipAdmin* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "set-admin", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::SetAdmin(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnipAdmin(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaSnip::Resize(float x0, float x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "resize", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaSnip::Resize(x0, x1);
  } else {
  
  p[0] = scheme_make_double(x0);
  p[1] = scheme_make_double(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-snip%::resize"", extracting return value");
  }
}

void os_wxMediaSnip::Write(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "write", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::Write(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxMediaSnip::Match(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "match?", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaSnip::Match(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:media-snip%::match?"", extracting return value");
  }
}

void os_wxMediaSnip::DoFont(int x0, Bool x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "do-font", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::DoFont(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaSnip::DoEdit(int x0, Bool x1, long x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "do-edit", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::DoEdit(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = (x1 ? scheme_true : scheme_false);
  p[2] = scheme_make_integer(x2);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaSnip::OwnCaret(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "own-caret", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::OwnCaret(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxCursor* os_wxMediaSnip::AdjustCursor(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "adjust-cursor", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaSnip::AdjustCursor(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxCursor(v, "wx:media-snip%::adjust-cursor"", extracting return value", 1);
  }
}

void os_wxMediaSnip::OnChar(class wxDC* x0, float x1, float x2, float x3, float x4, class wxKeyEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::OnChar(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxKeyEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaSnip::OnEvent(class wxDC* x0, float x1, float x2, float x3, float x4, class wxMouseEvent& x5)
{
  Scheme_Object *p[6];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::OnEvent(x0, x1, x2, x3, x4, x5);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = objscheme_bundle_wxMouseEvent(&x5);
  

  v = scheme_apply(method, 6, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaSnip::SizeCacheInvalid()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "size-cache-invalid", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::SizeCacheInvalid();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

class wxSnip* os_wxMediaSnip::Copy()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "copy", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaSnip::Copy();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:media-snip%::copy"", extracting return value", 0);
  }
}

string os_wxMediaSnip::GetText(long x0, long x1, Bool x2, long* x3)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "get-text", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaSnip::GetText(x0, x1, x2, x3);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  p[2] = (x2 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 3, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (string)objscheme_unbundle_string(v, "wx:media-snip%::get-text"", extracting return value");
  }
}

class wxSnip* os_wxMediaSnip::MergeWith(class wxSnip* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "merge-with", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaSnip::MergeWith(x0);
  } else {
  
  p[0] = objscheme_bundle_wxSnip(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxSnip(v, "wx:media-snip%::merge-with"", extracting return value", 0);
  }
}

void os_wxMediaSnip::Split(long x0, class wxSnip** x1, class wxSnip** x2)
{
  Scheme_Object *p[3];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "split", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::Split(x0, x1, x2);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = objscheme_box(objscheme_bundle_wxSnip((*x1)));
  p[2] = objscheme_box(objscheme_bundle_wxSnip((*x2)));
  

  v = scheme_apply(method, 3, p);
  
  if (x1) *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:media-snip%::split"", extracting return value via box"), "wx:media-snip%::split"", extracting return value via box", 0);
  if (x2) *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:media-snip%::split"", extracting return value via box"), "wx:media-snip%::split"", extracting return value via box", 0);
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxMediaSnip::Draw(class wxDC* x0, float x1, float x2, float x3, float x4, float x5, float x6, float x7, float x8, int x9)
{
  Scheme_Object *p[10];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "draw", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_double(x3);
  p[4] = scheme_make_double(x4);
  p[5] = scheme_make_double(x5);
  p[6] = scheme_make_double(x6);
  p[7] = scheme_make_double(x7);
  p[8] = scheme_make_double(x8);
  p[9] = scheme_make_integer(x9);
  

  v = scheme_apply(method, 10, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

float os_wxMediaSnip::PartialOffset(class wxDC* x0, float x1, float x2, long x3)
{
  Scheme_Object *p[4];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "partial-offset", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxMediaSnip::PartialOffset(x0, x1, x2, x3);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = scheme_make_integer(x3);
  

  v = scheme_apply(method, 4, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_float(v, "wx:media-snip%::partial-offset"", extracting return value");
  }
}

void os_wxMediaSnip::GetExtent(class wxDC* x0, float x1, float x2, float* x3, float* x4, float* x5, float* x6, float* x7, float* x8)
{
  Scheme_Object *p[9];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxMediaSnip_class, "get-extent", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxMediaSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  } else {
  
  p[0] = objscheme_bundle_wxDC(x0);
  p[1] = scheme_make_double(x1);
  p[2] = scheme_make_double(x2);
  p[3] = ((x3) ? objscheme_box(scheme_make_double((*x3))) : scheme_null);
  p[4] = ((x4) ? objscheme_box(scheme_make_double((*x4))) : scheme_null);
  p[5] = ((x5) ? objscheme_box(scheme_make_double((*x5))) : scheme_null);
  p[6] = ((x6) ? objscheme_box(scheme_make_double((*x6))) : scheme_null);
  p[7] = ((x7) ? objscheme_box(scheme_make_double((*x7))) : scheme_null);
  p[8] = ((x8) ? objscheme_box(scheme_make_double((*x8))) : scheme_null);
  

  v = scheme_apply(method, 9, p);
  
  if (x3) *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:media-snip%::get-extent"", extracting return value via box"), "wx:media-snip%::get-extent"", extracting return value via box");
  if (x4) *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:media-snip%::get-extent"", extracting return value via box"), "wx:media-snip%::get-extent"", extracting return value via box");
  if (x5) *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:media-snip%::get-extent"", extracting return value via box"), "wx:media-snip%::get-extent"", extracting return value via box");
  if (x6) *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:media-snip%::get-extent"", extracting return value via box"), "wx:media-snip%::get-extent"", extracting return value via box");
  if (x7) *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:media-snip%::get-extent"", extracting return value via box"), "wx:media-snip%::get-extent"", extracting return value via box");
  if (x8) *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:media-snip%::get-extent"", extracting return value via box"), "wx:media-snip%::get-extent"", extracting return value via box");
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetInset(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int _x0;
  int* x0 = &_x0;
  int _x1;
  int* x1 = &_x1;
  int _x2;
  int* x2 = &_x2;
  int _x3;
  int* x3 = &_x3;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:media-snip%::get-inset", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:media-snip%::get-inset"), "wx:media-snip%::get-inset");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:media-snip%::get-inset", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:media-snip%::get-inset"), "wx:media-snip%::get-inset");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:media-snip%::get-inset", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_integer(objscheme_unbox(p[2], "wx:media-snip%::get-inset"), "wx:media-snip%::get-inset");
  if (SCHEME_NULLP(p[3]))
    scheme_wrong_type("wx:media-snip%::get-inset", "non-null", (3 - 0), n, p);
  else
    *x3 = objscheme_unbundle_integer(objscheme_unbox(p[3], "wx:media-snip%::get-inset"), "wx:media-snip%::get-inset");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetInset(x0, x1, x2, x3);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_integer(_x2));
  if (n > 3)
    objscheme_set_box(p[3], scheme_make_integer(_x3));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSetInset(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;
  int x2;
  int x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-snip%::set-inset");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-snip%::set-inset");
  x2 = objscheme_unbundle_integer(p[2], "wx:media-snip%::set-inset");
  x3 = objscheme_unbundle_integer(p[3], "wx:media-snip%::set-inset");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SetInset(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetMargin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int _x0;
  int* x0 = &_x0;
  int _x1;
  int* x1 = &_x1;
  int _x2;
  int* x2 = &_x2;
  int _x3;
  int* x3 = &_x3;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:media-snip%::get-margin", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:media-snip%::get-margin"), "wx:media-snip%::get-margin");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:media-snip%::get-margin", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:media-snip%::get-margin"), "wx:media-snip%::get-margin");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:media-snip%::get-margin", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_integer(objscheme_unbox(p[2], "wx:media-snip%::get-margin"), "wx:media-snip%::get-margin");
  if (SCHEME_NULLP(p[3]))
    scheme_wrong_type("wx:media-snip%::get-margin", "non-null", (3 - 0), n, p);
  else
    *x3 = objscheme_unbundle_integer(objscheme_unbox(p[3], "wx:media-snip%::get-margin"), "wx:media-snip%::get-margin");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetMargin(x0, x1, x2, x3);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_integer(_x2));
  if (n > 3)
    objscheme_set_box(p[3], scheme_make_integer(_x3));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSetMargin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;
  int x2;
  int x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-snip%::set-margin");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-snip%::set-margin");
  x2 = objscheme_unbundle_integer(p[2], "wx:media-snip%::set-margin");
  x3 = objscheme_unbundle_integer(p[3], "wx:media-snip%::set-margin");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SetMargin(x0, x1, x2, x3);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipBorderVisible(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->BorderVisible();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipShowBorder(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-snip%::show-border");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->ShowBorder(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetMinHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetMinHeight();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetMinWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetMinWidth();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSetMinHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-snip%::set-min-height");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SetMinHeight(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSetMinWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-snip%::set-min-width");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SetMinWidth(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetMaxHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetMaxHeight();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetMaxWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetMaxWidth();

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSetMaxHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-snip%::set-max-height");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SetMaxHeight(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSetMaxWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-snip%::set-max-width");

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SetMaxWidth(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSetAdmin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxSnipAdmin* x0;

  
  x0 = objscheme_unbundle_wxSnipAdmin(p[0], "wx:media-snip%::set-admin", 1);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::SetAdmin(x0);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SetAdmin(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipResize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  float x0;
  float x1;

  
  x0 = objscheme_unbundle_float(p[0], "wx:media-snip%::resize");
  x1 = objscheme_unbundle_float(p[1], "wx:media-snip%::resize");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::Resize(x0, x1);
  else
    r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->Resize(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipWrite(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:media-snip%::write", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::Write(*x0);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->Write(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipMatch(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-snip%::match?", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::Match(x0);
  else
    r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->Match(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipDoFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-snip%::do-font");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-snip%::do-font");
  } else
    x1 = TRUE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::DoFont(x0, x1);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->DoFont(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipDoEdit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  Bool x1;
  long x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-snip%::do-edit");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-snip%::do-edit");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:media-snip%::do-edit");
  } else
    x2 = 0;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::DoEdit(x0, x1, x2);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->DoEdit(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipOwnCaret(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "wx:media-snip%::own-caret");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::OwnCaret(x0);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->OwnCaret(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipAdjustCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxCursor* r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:media-snip%::adjust-cursor", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-snip%::adjust-cursor");
  x2 = objscheme_unbundle_float(p[2], "wx:media-snip%::adjust-cursor");
  x3 = objscheme_unbundle_float(p[3], "wx:media-snip%::adjust-cursor");
  x4 = objscheme_unbundle_float(p[4], "wx:media-snip%::adjust-cursor");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:media-snip%::adjust-cursor", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::adjust-cursor");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::AdjustCursor(x0, x1, x2, x3, x4, *x5);
  else
    r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->AdjustCursor(x0, x1, x2, x3, x4, *x5);

  
  
  return objscheme_bundle_wxCursor(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxKeyEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:media-snip%::on-char", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-snip%::on-char");
  x2 = objscheme_unbundle_float(p[2], "wx:media-snip%::on-char");
  x3 = objscheme_unbundle_float(p[3], "wx:media-snip%::on-char");
  x4 = objscheme_unbundle_float(p[4], "wx:media-snip%::on-char");
  x5 = objscheme_unbundle_wxKeyEvent(p[5], "wx:media-snip%::on-char", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-char");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::OnChar(x0, x1, x2, x3, x4, *x5);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->OnChar(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  class wxMouseEvent* x5;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:media-snip%::on-event", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-snip%::on-event");
  x2 = objscheme_unbundle_float(p[2], "wx:media-snip%::on-event");
  x3 = objscheme_unbundle_float(p[3], "wx:media-snip%::on-event");
  x4 = objscheme_unbundle_float(p[4], "wx:media-snip%::on-event");
  x5 = objscheme_unbundle_wxMouseEvent(p[5], "wx:media-snip%::on-event", 0);

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::on-event");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::OnEvent(x0, x1, x2, x3, x4, *x5);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(x0, x1, x2, x3, x4, *x5);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSizeCacheInvalid(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::SizeCacheInvalid();
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SizeCacheInvalid();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::Copy();
  else
    r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->Copy();

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetText(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  long x0;
  long x1;
  Bool x2;
  long _x3;
  long* x3 = &_x3;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-snip%::get-text");
  x1 = objscheme_unbundle_integer(p[1], "wx:media-snip%::get-text");
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "wx:media-snip%::get-text");
  } else
    x2 = FALSE;

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::GetText(x0, x1, x2, x3);
  else
    r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetText(x0, x1, x2, x3);

  
  
  return scheme_make_sized_string(r, _x3, 0);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipMergeWith(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxSnip* r;
  objscheme_check_valid(obj);
  class wxSnip* x0;

  
  x0 = objscheme_unbundle_wxSnip(p[0], "wx:media-snip%::merge-with", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::MergeWith(x0);
  else
    r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->MergeWith(x0);

  
  
  return objscheme_bundle_wxSnip(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSplit(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;
  class wxSnip* _x1;
  class wxSnip** x1 = &_x1;
  class wxSnip* _x2;
  class wxSnip** x2 = &_x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:media-snip%::split");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:media-snip%::split", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_wxSnip(objscheme_unbox(p[1], "wx:media-snip%::split"), "wx:media-snip%::split", 0);
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:media-snip%::split", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_wxSnip(objscheme_unbox(p[2], "wx:media-snip%::split"), "wx:media-snip%::split", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::Split(x0, x1, x2);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->Split(x0, x1, x2);

  
  if (n > 1)
    objscheme_set_box(p[1], objscheme_bundle_wxSnip(_x1));
  if (n > 2)
    objscheme_set_box(p[2], objscheme_bundle_wxSnip(_x2));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipDraw(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float x3;
  float x4;
  float x5;
  float x6;
  float x7;
  float x8;
  int x9;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:media-snip%::draw", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-snip%::draw");
  x2 = objscheme_unbundle_float(p[2], "wx:media-snip%::draw");
  x3 = objscheme_unbundle_float(p[3], "wx:media-snip%::draw");
  x4 = objscheme_unbundle_float(p[4], "wx:media-snip%::draw");
  x5 = objscheme_unbundle_float(p[5], "wx:media-snip%::draw");
  x6 = objscheme_unbundle_float(p[6], "wx:media-snip%::draw");
  x7 = objscheme_unbundle_float(p[7], "wx:media-snip%::draw");
  x8 = objscheme_unbundle_float(p[8], "wx:media-snip%::draw");
  x9 = objscheme_unbundle_integer(p[9], "wx:media-snip%::draw");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::draw");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->Draw(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipPartialOffset(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  long x3;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:media-snip%::partial-offset", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-snip%::partial-offset");
  x2 = objscheme_unbundle_float(p[2], "wx:media-snip%::partial-offset");
  x3 = objscheme_unbundle_integer(p[3], "wx:media-snip%::partial-offset");

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::partial-offset");
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::PartialOffset(x0, x1, x2, x3);
  else
    r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->PartialOffset(x0, x1, x2, x3);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetExtent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  float x1;
  float x2;
  float _x3;
  float* x3 = &_x3;
  float _x4;
  float* x4 = &_x4;
  float _x5;
  float* x5 = &_x5;
  float _x6;
  float* x6 = &_x6;
  float _x7;
  float* x7 = &_x7;
  float _x8;
  float* x8 = &_x8;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:media-snip%::get-extent", 0);
  x1 = objscheme_unbundle_float(p[1], "wx:media-snip%::get-extent");
  x2 = objscheme_unbundle_float(p[2], "wx:media-snip%::get-extent");
  if (n > 3) {
    if (SCHEME_NULLP(p[3]))
    x3 = NULL;
  else
    *x3 = objscheme_unbundle_float(objscheme_unbox(p[3], "wx:media-snip%::get-extent"), "wx:media-snip%::get-extent");
  } else
    x3 = NULL;
  if (n > 4) {
    if (SCHEME_NULLP(p[4]))
    x4 = NULL;
  else
    *x4 = objscheme_unbundle_float(objscheme_unbox(p[4], "wx:media-snip%::get-extent"), "wx:media-snip%::get-extent");
  } else
    x4 = NULL;
  if (n > 5) {
    if (SCHEME_NULLP(p[5]))
    x5 = NULL;
  else
    *x5 = objscheme_unbundle_float(objscheme_unbox(p[5], "wx:media-snip%::get-extent"), "wx:media-snip%::get-extent");
  } else
    x5 = NULL;
  if (n > 6) {
    if (SCHEME_NULLP(p[6]))
    x6 = NULL;
  else
    *x6 = objscheme_unbundle_float(objscheme_unbox(p[6], "wx:media-snip%::get-extent"), "wx:media-snip%::get-extent");
  } else
    x6 = NULL;
  if (n > 7) {
    if (SCHEME_NULLP(p[7]))
    x7 = NULL;
  else
    *x7 = objscheme_unbundle_float(objscheme_unbox(p[7], "wx:media-snip%::get-extent"), "wx:media-snip%::get-extent");
  } else
    x7 = NULL;
  if (n > 8) {
    if (SCHEME_NULLP(p[8]))
    x8 = NULL;
  else
    *x8 = objscheme_unbundle_float(objscheme_unbox(p[8], "wx:media-snip%::get-extent"), "wx:media-snip%::get-extent");
  } else
    x8 = NULL;

  if (x0 && !x0->Ok()) scheme_signal_error("%s: bad bitmap", "wx:snip%::get-extent");
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->wxMediaSnip::GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  else
    ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetExtent(x0, x1, x2, x3, x4, x5, x6, x7, x8);

  
  if (n > 3 && !SCHEME_NULLP(p[3]))
    objscheme_set_box(p[3], scheme_make_double(_x3));
  if (n > 4 && !SCHEME_NULLP(p[4]))
    objscheme_set_box(p[4], scheme_make_double(_x4));
  if (n > 5 && !SCHEME_NULLP(p[5]))
    objscheme_set_box(p[5], scheme_make_double(_x5));
  if (n > 6 && !SCHEME_NULLP(p[6]))
    objscheme_set_box(p[6], scheme_make_double(_x6));
  if (n > 7 && !SCHEME_NULLP(p[7]))
    objscheme_set_box(p[7], scheme_make_double(_x7));
  if (n > 8 && !SCHEME_NULLP(p[8]))
    objscheme_set_box(p[8], scheme_make_double(_x8));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipSetMedia(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMediaBuffer* x0;

  
  x0 = objscheme_unbundle_wxMediaBuffer(p[0], "wx:media-snip%::set-media", 1);

  
  ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->SetMedia(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGetThisMedia(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaBuffer* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->GetThisMedia();

  
  
  return objscheme_bundle_wxMediaBuffer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnipGet_This_Media(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxMediaBuffer* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMediaSnip *)((Scheme_Class_Object *)obj)->primdata)->Get_This_Media();

  
  
  return objscheme_bundle_wxMediaBuffer(r);
}

#pragma argsused
static Scheme_Object *os_wxMediaSnip_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMediaSnip *realobj;
  class wxMediaBuffer* x0;
  Bool x1;
  int x2;
  int x3;
  int x4;
  int x5;
  int x6;
  int x7;
  int x8;
  int x9;
  int x10;
  int x11;
  int x12;
  int x13;

  
  if ((n > 14)) 
    scheme_wrong_count("wx:media-snip%::initialization", 0, 14, n, p);
  if (n > 0) {
    x0 = objscheme_unbundle_wxMediaBuffer(p[0], "wx:media-snip%::initialization", 1);
  } else
    x0 = NULL;
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:media-snip%::initialization");
  } else
    x1 = TRUE;
  if (n > 2) {
    x2 = objscheme_unbundle_integer(p[2], "wx:media-snip%::initialization");
  } else
    x2 = wxMSNIPBOX_XMARGIN;
  if (n > 3) {
    x3 = objscheme_unbundle_integer(p[3], "wx:media-snip%::initialization");
  } else
    x3 = wxMSNIPBOX_YMARGIN;
  if (n > 4) {
    x4 = objscheme_unbundle_integer(p[4], "wx:media-snip%::initialization");
  } else
    x4 = wxMSNIPBOX_XMARGIN;
  if (n > 5) {
    x5 = objscheme_unbundle_integer(p[5], "wx:media-snip%::initialization");
  } else
    x5 = wxMSNIPBOX_YMARGIN;
  if (n > 6) {
    x6 = objscheme_unbundle_integer(p[6], "wx:media-snip%::initialization");
  } else
    x6 = wxMSNIPBOX_XINSET;
  if (n > 7) {
    x7 = objscheme_unbundle_integer(p[7], "wx:media-snip%::initialization");
  } else
    x7 = wxMSNIPBOX_YINSET;
  if (n > 8) {
    x8 = objscheme_unbundle_integer(p[8], "wx:media-snip%::initialization");
  } else
    x8 = wxMSNIPBOX_XINSET;
  if (n > 9) {
    x9 = objscheme_unbundle_integer(p[9], "wx:media-snip%::initialization");
  } else
    x9 = wxMSNIPBOX_YINSET;
  if (n > 10) {
    x10 = objscheme_unbundle_integer(p[10], "wx:media-snip%::initialization");
  } else
    x10 = -1;
  if (n > 11) {
    x11 = objscheme_unbundle_integer(p[11], "wx:media-snip%::initialization");
  } else
    x11 = -1;
  if (n > 12) {
    x12 = objscheme_unbundle_integer(p[12], "wx:media-snip%::initialization");
  } else
    x12 = -1;
  if (n > 13) {
    x13 = objscheme_unbundle_integer(p[13], "wx:media-snip%::initialization");
  } else
    x13 = -1;

  
  realobj = new os_wxMediaSnip(obj, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxMediaSnip(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:media-snip%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:media-snip%");
}

void objscheme_setup_wxMediaSnip(void *env)
{
if (os_wxMediaSnip_class) {
    objscheme_add_global_class(os_wxMediaSnip_class,  "wx:media-snip%", env);
} else {
  os_wxMediaSnip_class = objscheme_def_prim_class(env, "wx:media-snip%", "wx:snip%", os_wxMediaSnip_ConstructScheme, 36);

  scheme_add_method_w_arity(os_wxMediaSnip_class,"get-class-name",objscheme_classname_os_wxMediaSnip, 0, 0);

 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-inset", os_wxMediaSnipGetInset, 4, 4);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "set-inset", os_wxMediaSnipSetInset, 4, 4);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-margin", os_wxMediaSnipGetMargin, 4, 4);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "set-margin", os_wxMediaSnipSetMargin, 4, 4);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "border-visible?", os_wxMediaSnipBorderVisible, 0, 0);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "show-border", os_wxMediaSnipShowBorder, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-min-height", os_wxMediaSnipGetMinHeight, 0, 0);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-min-width", os_wxMediaSnipGetMinWidth, 0, 0);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "set-min-height", os_wxMediaSnipSetMinHeight, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "set-min-width", os_wxMediaSnipSetMinWidth, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-max-height", os_wxMediaSnipGetMaxHeight, 0, 0);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-max-width", os_wxMediaSnipGetMaxWidth, 0, 0);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "set-max-height", os_wxMediaSnipSetMaxHeight, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "set-max-width", os_wxMediaSnipSetMaxWidth, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "set-admin", os_wxMediaSnipSetAdmin, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "resize", os_wxMediaSnipResize, 2, 2);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "write", os_wxMediaSnipWrite, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "match?", os_wxMediaSnipMatch, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "do-font", os_wxMediaSnipDoFont, 1, 2);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "do-edit", os_wxMediaSnipDoEdit, 1, 3);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "own-caret", os_wxMediaSnipOwnCaret, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "adjust-cursor", os_wxMediaSnipAdjustCursor, 6, 6);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "on-char", os_wxMediaSnipOnChar, 6, 6);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "on-event", os_wxMediaSnipOnEvent, 6, 6);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "size-cache-invalid", os_wxMediaSnipSizeCacheInvalid, 0, 0);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "copy", os_wxMediaSnipCopy, 0, 0);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-text", os_wxMediaSnipGetText, 2, 3);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "merge-with", os_wxMediaSnipMergeWith, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "split", os_wxMediaSnipSplit, 3, 3);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "draw", os_wxMediaSnipDraw, 10, 10);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "partial-offset", os_wxMediaSnipPartialOffset, 4, 4);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-extent", os_wxMediaSnipGetExtent, 3, 9);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "set-media", os_wxMediaSnipSetMedia, 1, 1);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-media", os_wxMediaSnipGetThisMedia, 0, 0);
 scheme_add_method_w_arity(os_wxMediaSnip_class, "get-this-media", os_wxMediaSnipGet_This_Media, 0, 0);


  scheme_made_class(os_wxMediaSnip_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxMediaSnip, wxTYPE_MEDIA_SNIP);

}
}

int objscheme_istype_wxMediaSnip(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMediaSnip_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:media-snip%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMediaSnip(class wxMediaSnip *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_MEDIA_SNIP) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMediaSnip_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMediaSnip *objscheme_unbundle_wxMediaSnip(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMediaSnip(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMediaSnip *)o->primdata;
  else
    return (wxMediaSnip *)o->primdata;
}








class os_wxBufferDataClass : public wxBufferDataClass {
 public:

  os_wxBufferDataClass(Scheme_Object * obj);
  ~os_wxBufferDataClass();
  class wxBufferData* Read(class wxMediaStreamIn& x0);
};

Scheme_Object *os_wxBufferDataClass_class;

os_wxBufferDataClass::os_wxBufferDataClass(Scheme_Object * o)
: wxBufferDataClass()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxBufferDataClass::~os_wxBufferDataClass()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

class wxBufferData* os_wxBufferDataClass::Read(class wxMediaStreamIn& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxBufferDataClass_class, "read", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return NULL;
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamIn(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_wxBufferData(v, "wx:buffer-data-class%::read"", extracting return value", 1);
  }
}

#pragma argsused
static Scheme_Object *os_wxBufferDataClassRead(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBufferData* r;
  objscheme_check_valid(obj);
  class wxMediaStreamIn* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamIn(p[0], "wx:buffer-data-class%::read", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxBufferDataClass *)((Scheme_Class_Object *)obj)->primdata)->Read(*x0);
  else
    r = ((wxBufferDataClass *)((Scheme_Class_Object *)obj)->primdata)->Read(*x0);

  
  
  return objscheme_bundle_wxBufferData(r);
}

static Scheme_Object *objscheme_wxBufferDataClass_Getclassname(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  string v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-classname", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxBufferDataClass *)cobj->primdata)->wxBufferDataClass::classname;
  else
    v = ((wxBufferDataClass *)cobj->primdata)->classname;

  return objscheme_bundle_string((char *)v);
}

static Scheme_Object *objscheme_wxBufferDataClass_Setclassname(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  string v;

  if (n != 1) scheme_wrong_count("set-classname", 1, 1, n, p);

  v = (string)objscheme_unbundle_string(p[0], "wx:buffer-data-class%::classname");
  ((wxBufferDataClass *)cobj->primdata)->classname = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxBufferDataClass_Getrequired(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-required", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxBufferDataClass *)cobj->primdata)->wxBufferDataClass::required;
  else
    v = ((wxBufferDataClass *)cobj->primdata)->required;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxBufferDataClass_Setrequired(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-required", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:buffer-data-class%::required");
  ((wxBufferDataClass *)cobj->primdata)->required = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxBufferDataClass_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxBufferDataClass *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:buffer-data-class%::initialization", 0, 0, n, p);

  
  realobj = new os_wxBufferDataClass(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxBufferDataClass(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:buffer-data-class%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:buffer-data-class%");
}

void objscheme_setup_wxBufferDataClass(void *env)
{
if (os_wxBufferDataClass_class) {
    objscheme_add_global_class(os_wxBufferDataClass_class,  "wx:buffer-data-class%", env);
} else {
  os_wxBufferDataClass_class = objscheme_def_prim_class(env, "wx:buffer-data-class%", "wx:object%", os_wxBufferDataClass_ConstructScheme, 6);

  scheme_add_method_w_arity(os_wxBufferDataClass_class,"get-class-name",objscheme_classname_os_wxBufferDataClass, 0, 0);

 scheme_add_method_w_arity(os_wxBufferDataClass_class, "read", os_wxBufferDataClassRead, 1, 1);

  scheme_add_method_w_arity(os_wxBufferDataClass_class,"get-classname", objscheme_wxBufferDataClass_Getclassname, 0, 0);
  scheme_add_method_w_arity(os_wxBufferDataClass_class,"set-classname", objscheme_wxBufferDataClass_Setclassname, 1, 1);
  scheme_add_method_w_arity(os_wxBufferDataClass_class,"get-required", objscheme_wxBufferDataClass_Getrequired, 0, 0);
  scheme_add_method_w_arity(os_wxBufferDataClass_class,"set-required", objscheme_wxBufferDataClass_Setrequired, 1, 1);

  scheme_made_class(os_wxBufferDataClass_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxBufferDataClass, wxTYPE_BUFFER_DATA_CLASS);

}
}

int objscheme_istype_wxBufferDataClass(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxBufferDataClass_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:buffer-data-class%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxBufferDataClass(class wxBufferDataClass *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_BUFFER_DATA_CLASS) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxBufferDataClass_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxBufferDataClass *objscheme_unbundle_wxBufferDataClass(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxBufferDataClass(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxBufferDataClass *)o->primdata;
  else
    return (wxBufferDataClass *)o->primdata;
}






class os_wxBufferDataClassList : public wxBufferDataClassList {
 public:

  os_wxBufferDataClassList(Scheme_Object * obj);
  ~os_wxBufferDataClassList();
};

Scheme_Object *os_wxBufferDataClassList_class;

os_wxBufferDataClassList::os_wxBufferDataClassList(Scheme_Object * o)
: wxBufferDataClassList()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxBufferDataClassList::~os_wxBufferDataClassList()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxBufferDataClassListNth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBufferDataClass* r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:buffer-data-class-list%::nth");

  
  r = ((wxBufferDataClassList *)((Scheme_Class_Object *)obj)->primdata)->Nth(x0);

  
  
  return objscheme_bundle_wxBufferDataClass(r);
}

#pragma argsused
static Scheme_Object *os_wxBufferDataClassListNumber(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxBufferDataClassList *)((Scheme_Class_Object *)obj)->primdata)->Number();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxBufferDataClassListAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBufferDataClass* x0;

  
  x0 = objscheme_unbundle_wxBufferDataClass(p[0], "wx:buffer-data-class-list%::add", 0);

  
  ((wxBufferDataClassList *)((Scheme_Class_Object *)obj)->primdata)->Add(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxBufferDataClassListFindPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  short r;
  objscheme_check_valid(obj);
  class wxBufferDataClass* x0;

  
  x0 = objscheme_unbundle_wxBufferDataClass(p[0], "wx:buffer-data-class-list%::find-position", 0);

  
  r = ((wxBufferDataClassList *)((Scheme_Class_Object *)obj)->primdata)->FindPosition(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxBufferDataClassListFind(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBufferDataClass* r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:buffer-data-class-list%::find");

  
  r = ((wxBufferDataClassList *)((Scheme_Class_Object *)obj)->primdata)->Find(x0);

  
  
  return objscheme_bundle_wxBufferDataClass(r);
}

#pragma argsused
static Scheme_Object *os_wxBufferDataClassList_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxBufferDataClassList *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:buffer-data-class-list%::initialization", 0, 0, n, p);

  
  realobj = new os_wxBufferDataClassList(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxBufferDataClassList(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:buffer-data-class-list%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:buffer-data-class-list%");
}

void objscheme_setup_wxBufferDataClassList(void *env)
{
if (os_wxBufferDataClassList_class) {
    objscheme_add_global_class(os_wxBufferDataClassList_class,  "wx:buffer-data-class-list%", env);
} else {
  os_wxBufferDataClassList_class = objscheme_def_prim_class(env, "wx:buffer-data-class-list%", "wx:object%", os_wxBufferDataClassList_ConstructScheme, 6);

  scheme_add_method_w_arity(os_wxBufferDataClassList_class,"get-class-name",objscheme_classname_os_wxBufferDataClassList, 0, 0);

 scheme_add_method_w_arity(os_wxBufferDataClassList_class, "nth", os_wxBufferDataClassListNth, 1, 1);
 scheme_add_method_w_arity(os_wxBufferDataClassList_class, "number", os_wxBufferDataClassListNumber, 0, 0);
 scheme_add_method_w_arity(os_wxBufferDataClassList_class, "add", os_wxBufferDataClassListAdd, 1, 1);
 scheme_add_method_w_arity(os_wxBufferDataClassList_class, "find-position", os_wxBufferDataClassListFindPosition, 1, 1);
 scheme_add_method_w_arity(os_wxBufferDataClassList_class, "find", os_wxBufferDataClassListFind, 1, 1);


  scheme_made_class(os_wxBufferDataClassList_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxBufferDataClassList, wxTYPE_BUFFER_DATA_CLASS_LIST);

}
}

int objscheme_istype_wxBufferDataClassList(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxBufferDataClassList_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:buffer-data-class-list%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxBufferDataClassList(class wxBufferDataClassList *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_BUFFER_DATA_CLASS_LIST) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxBufferDataClassList_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxBufferDataClassList *objscheme_unbundle_wxBufferDataClassList(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxBufferDataClassList(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxBufferDataClassList *)o->primdata;
  else
    return (wxBufferDataClassList *)o->primdata;
}







class os_wxBufferData : public wxBufferData {
 public:

  os_wxBufferData(Scheme_Object * obj);
  ~os_wxBufferData();
  Bool Write(class wxMediaStreamOut& x0);
};

Scheme_Object *os_wxBufferData_class;

os_wxBufferData::os_wxBufferData(Scheme_Object * o)
: wxBufferData()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxBufferData::~os_wxBufferData()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

Bool os_wxBufferData::Write(class wxMediaStreamOut& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxBufferData_class, "write", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return 0;
  } else {
  
  p[0] = objscheme_bundle_wxMediaStreamOut(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "wx:buffer-data%::write"", extracting return value");
  }
}

#pragma argsused
static Scheme_Object *os_wxBufferDataWrite(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxMediaStreamOut* x0;

  
  x0 = objscheme_unbundle_wxMediaStreamOut(p[0], "wx:buffer-data%::write", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxBufferData *)((Scheme_Class_Object *)obj)->primdata)->Write(*x0);
  else
    r = ((wxBufferData *)((Scheme_Class_Object *)obj)->primdata)->Write(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxBufferData_Getdataclass(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxBufferDataClass* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-dataclass", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxBufferData *)cobj->primdata)->wxBufferData::dataclass;
  else
    v = ((wxBufferData *)cobj->primdata)->dataclass;

  return objscheme_bundle_wxBufferDataClass(v);
}

static Scheme_Object *objscheme_wxBufferData_Setdataclass(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  class wxBufferDataClass* v;

  if (n != 1) scheme_wrong_count("set-dataclass", 1, 1, n, p);

  v = objscheme_unbundle_wxBufferDataClass(p[0], "wx:buffer-data%::dataclass", 1);
  ((wxBufferData *)cobj->primdata)->dataclass = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxBufferData_Getnext(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxBufferData* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-next", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxBufferData *)cobj->primdata)->wxBufferData::next;
  else
    v = ((wxBufferData *)cobj->primdata)->next;

  return objscheme_bundle_wxBufferData(v);
}

static Scheme_Object *objscheme_wxBufferData_Setnext(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  class wxBufferData* v;

  if (n != 1) scheme_wrong_count("set-next", 1, 1, n, p);

  v = objscheme_unbundle_wxBufferData(p[0], "wx:buffer-data%::next", 1);
  ((wxBufferData *)cobj->primdata)->next = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxBufferData_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxBufferData *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:buffer-data%::initialization", 0, 0, n, p);

  
  realobj = new os_wxBufferData(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxBufferData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:buffer-data%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:buffer-data%");
}

void objscheme_setup_wxBufferData(void *env)
{
if (os_wxBufferData_class) {
    objscheme_add_global_class(os_wxBufferData_class,  "wx:buffer-data%", env);
} else {
  os_wxBufferData_class = objscheme_def_prim_class(env, "wx:buffer-data%", "wx:object%", os_wxBufferData_ConstructScheme, 6);

  scheme_add_method_w_arity(os_wxBufferData_class,"get-class-name",objscheme_classname_os_wxBufferData, 0, 0);

 scheme_add_method_w_arity(os_wxBufferData_class, "write", os_wxBufferDataWrite, 1, 1);

  scheme_add_method_w_arity(os_wxBufferData_class,"get-dataclass", objscheme_wxBufferData_Getdataclass, 0, 0);
  scheme_add_method_w_arity(os_wxBufferData_class,"set-dataclass", objscheme_wxBufferData_Setdataclass, 1, 1);
  scheme_add_method_w_arity(os_wxBufferData_class,"get-next", objscheme_wxBufferData_Getnext, 0, 0);
  scheme_add_method_w_arity(os_wxBufferData_class,"set-next", objscheme_wxBufferData_Setnext, 1, 1);

  scheme_made_class(os_wxBufferData_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxBufferData, wxTYPE_BUFFER_DATA);

}
}

int objscheme_istype_wxBufferData(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxBufferData_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:buffer-data%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxBufferData(class wxBufferData *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_BUFFER_DATA) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxBufferData_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxBufferData *objscheme_unbundle_wxBufferData(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxBufferData(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxBufferData *)o->primdata;
  else
    return (wxBufferData *)o->primdata;
}



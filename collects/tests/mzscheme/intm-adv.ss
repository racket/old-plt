
(syntax-test #'(lambda (z z) 10))

(define f (lambda (y) (lambda (z) z)))
(test #t procedure? f)
(test 778 (lambda (x) 778) 'ignored)

(test values (lambda (f) (f f)) values)

(syntax-test #'local)
(syntax-test #'(local))
(syntax-test #'(local ()))
(syntax-test #'(local 1))
(syntax-test #'(local 1 1))
(syntax-test #'(local () 1 2))
(syntax-test #'(local [1] 1 2))
(syntax-test #'(local [(+ 1 2)] 1))
(syntax-test #'(local [(define x)] 1))
(syntax-test #'(local [(lambda (x) x)] 1))
(syntax-test #'(local [(define x 1) (define x 2)] 1))
(syntax-test #'(local [(define (x a) 12) (+ 1 2)] 1))

(err/rt-test (local [(define x y) (define y 5)] 10) exn:variable?)

(test 1 'local (local () 1))
(test 5 'local (local [(define y 5) (define x y)] x))
(test #t 'local (local [(define (even n) (if (zero? n) true (odd (sub1 n))))
			(define (odd n) (if (zero? n) false (even (sub1 n))))]
		       (even 100)))
(test 19 (local [(define (f x) (+ x 10))] f) 9)
(test 16 'local (local [(define (f x) (+ x 10))] (f 6)))

(syntax-test #'letrec)
(syntax-test #'(letrec))
(syntax-test #'(letrec ()))
(syntax-test #'(letrec 1 2))
(syntax-test #'(letrec 1 2 3))
(syntax-test #'(letrec (10) 1))
(syntax-test #'(letrec ([x]) 1))
(syntax-test #'(letrec ([x 2 3]) 1))
(syntax-test #'(letrec ([x 5] 10) 1))
(syntax-test #'(letrec ([1 5]) 1))
(syntax-test #'(letrec ([1 5 6]) 1))
(syntax-test #'(letrec ([x 5]) 1 2))
(syntax-test #'(letrec ([x 5][x 6]) 1))

(err/rt-test (letrec ([x y] [y 5]) 10) exn:variable?)

(test 1 'letrec (letrec () 1))
(test 5 'letrec (letrec ([y 5][x y]) x))
(test #t 'letrec (letrec ([even (lambda (n) (if (zero? n) true (odd (sub1 n))))]
			  [odd (lambda (n) (if (zero? n) false (even (sub1 n))))])
		   (even 100)))
(test 19 (letrec ([f (lambda (x) (+ x 10))]) f) 9)
(test 16 'letrec (letrec ([f (lambda (x) (+ x 10))]) (f 6)))

(syntax-test #'let)
(syntax-test #'(let))
(syntax-test #'(let ()))
(syntax-test #'(let 1 2))
(syntax-test #'(let 1 2 3))
(syntax-test #'(let (10) 1))
(syntax-test #'(let ([x]) 1))
(syntax-test #'(let ([x 2 3]) 1))
(syntax-test #'(let ([x 5] 10) 1))
(syntax-test #'(let ([1 5]) 1))
(syntax-test #'(let ([1 5 6]) 1))
(syntax-test #'(let ([x 5]) 1 2))
(syntax-test #'(let ([x 5][x 6]) 1))

(test 1 'let (let () 1))
(test 5 'let (let ([y 5]) (let ([x y]) x)))
(test 6 'let (let ([y 6]) (let ([y 10][x y]) x)))
(test 19 (let ([f (lambda (x) (+ x 10))]) f) 9)
(test 16 'let (let ([f (lambda (x) (+ x 10))]) (f 6)))

(syntax-test #'let*)
(syntax-test #'(let*))
(syntax-test #'(let* ()))
(syntax-test #'(let* 1 2))
(syntax-test #'(let* 1 2 3))
(syntax-test #'(let* (10) 1))
(syntax-test #'(let* ([x]) 1))
(syntax-test #'(let* ([x 2 3]) 1))
(syntax-test #'(let* ([x 5] 10) 1))
(syntax-test #'(let* ([1 5]) 1))
(syntax-test #'(let* ([1 5 6]) 1))
(syntax-test #'(let* ([x 5]) 1 2))

(test 1 'let* (let* () 1))
(test 6 'let* (let* ([x 5][x 6]) x))
(test 9 'let* (let* ([x 8][x (add1 x)]) x))
(test 5 'let* (let* ([y 5]) (let* ([x y]) x)))
(test 10 'let* (let* ([y 6]) (let* ([y 10][x y]) x)))
(test 19 (let* ([f (lambda (x) (+ x 10))]) f) 9)
(test 16 'let* (let* ([f (lambda (x) (+ x 10))]) (f 6)))

(syntax-test #'recur)
(syntax-test #'(recur))
(syntax-test #'(recur 10))
(syntax-test #'(recur name))
(syntax-test #'(recur name 10))
(syntax-test #'(recur name ([x 1])))
(syntax-test #'(recur name ([x]) 1))
(syntax-test #'(recur name ([x 10] 2) 1))
(syntax-test #'(recur name ([11 10]) 1))
(syntax-test #'(recur name ([x 10]) 1 2))
(syntax-test #'(recur name ([x 10][x 11]) 1))
(test 18 'lookup (recur name ([x 18]) x))
(test 1024 'loop (recur loop ([n 10]) (if (zero? n) 1 (* 2 (loop (sub1 n))))))
(test 13 'loop (recur f ([f 13]) f))
(test 14 'loop (let ([f 14]) (recur f ([f f]) f)))

(test 7779 'time (time 7779))
(syntax-test #'time)
(syntax-test #'(time))
(syntax-test #'(time 1 2))
(syntax-test #'(time (define x 5)))


/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_gdi.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_obj.h"
#include "wx_list.h"
#include "wx_gdi.h"
#ifdef wx_xt
# include "wx_dc.h"
#endif





#include "wxs_bmt.h"

#include "wxscheme.h"
#include "wxs_gdi.h"
#include "wxscomon.h"


#define USE_FONT_NAME_DIRECTORY 1

/* Not used, anyway: */
#if defined(wx_mac) || defined(wx_xt)
# define COLORMAP_CREATE 0
#else
# define COLORMAP_CREATE 1
#endif






// Not used:
// @CONSTANT "wx:const-variable" : int wxVARIABLE
// @CONSTANT "wx:const-fixed" : int wxFIXED



class os_wxFont : public wxFont {
 public:

  os_wxFont(Scheme_Object * obj);
  os_wxFont(Scheme_Object * obj, nnint x0, int x1, int x2, int x3, Bool x4 = 0);
  os_wxFont(Scheme_Object * obj, nnint x0, cstring x1, int x2, int x3, int x4, Bool x5 = 0);
  ~os_wxFont();
};

Scheme_Object *os_wxFont_class;

os_wxFont::os_wxFont(Scheme_Object * o)
: wxFont()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxFont::os_wxFont(Scheme_Object * o, nnint x0, int x1, int x2, int x3, Bool x4)
: wxFont(x0, x1, x2, x3, x4)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

#if  USE_FONT_NAME_DIRECTORY 
os_wxFont::os_wxFont(Scheme_Object * o, nnint x0, cstring x1, int x2, int x3, int x4, Bool x5)
: wxFont(x0, x1, x2, x3, x4, x5)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}
#endif

os_wxFont::~os_wxFont()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxFontGetUnderlined(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxFont *)((Scheme_Class_Object *)obj)->primdata)->GetUnderlined();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxFontGetWeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxFont *)((Scheme_Class_Object *)obj)->primdata)->GetWeight();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxFontGetPointSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxFont *)((Scheme_Class_Object *)obj)->primdata)->GetPointSize();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxFontGetStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxFont *)((Scheme_Class_Object *)obj)->primdata)->GetStyle();

  
  
  return scheme_make_integer(r);
}

#if  USE_FONT_NAME_DIRECTORY
#pragma argsused
static Scheme_Object *os_wxFontGetFontId(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
#if  USE_FONT_NAME_DIRECTORY

  

  
  r = ((wxFont *)((Scheme_Class_Object *)obj)->primdata)->GetFontId();

  
  
#else
 scheme_signal_error("%s: provided arglist unsupported on this platform", "wx:font%::get-font-id");
#endif
  return scheme_make_integer(r);
}
#endif

#pragma argsused
static Scheme_Object *os_wxFontGetFamily(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxFont *)((Scheme_Class_Object *)obj)->primdata)->GetFamily();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxFont_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxFont *realobj;
  if ((n >= 2) && objscheme_istype_number(p[0], NULL) && objscheme_istype_string(p[1], NULL)) {
#if  USE_FONT_NAME_DIRECTORY 
    nnint x0;
    cstring x1;
    int x2;
    int x3;
    int x4;
    Bool x5;

    
    if ((n < 5) ||(n > 6)) 
      scheme_wrong_count("wx:font%::initialization (font name case)", 5, 6, n, p);
    x0 = objscheme_unbundle_nonnegative_integer(p[0], "wx:font%::initialization (font name case)");
    x1 = (cstring)objscheme_unbundle_string(p[1], "wx:font%::initialization (font name case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:font%::initialization (font name case)");
    x3 = objscheme_unbundle_integer(p[3], "wx:font%::initialization (font name case)");
    x4 = objscheme_unbundle_integer(p[4], "wx:font%::initialization (font name case)");
    if (n > 5) {
      x5 = objscheme_unbundle_bool(p[5], "wx:font%::initialization (font name case)");
    } else
      x5 = 0;

    
    realobj = new os_wxFont(obj, x0, x1, x2, x3, x4, x5);
    
    
#else
 scheme_signal_error("%s: provided arglist unsupported on this platform", "wx:font%::initialization (font name case)");
#endif
  } else if ((n >= 1) && objscheme_istype_number(p[0], NULL)) {
    nnint x0;
    int x1;
    int x2;
    int x3;
    Bool x4;

    
    if ((n < 4) ||(n > 5)) 
      scheme_wrong_count("wx:font%::initialization (font id case)", 4, 5, n, p);
    x0 = objscheme_unbundle_nonnegative_integer(p[0], "wx:font%::initialization (font id case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:font%::initialization (font id case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:font%::initialization (font id case)");
    x3 = objscheme_unbundle_integer(p[3], "wx:font%::initialization (font id case)");
    if (n > 4) {
      x4 = objscheme_unbundle_bool(p[4], "wx:font%::initialization (font id case)");
    } else
      x4 = 0;

    
    realobj = new os_wxFont(obj, x0, x1, x2, x3, x4);
    
    
  } else  {

    
    if (n != 0) 
      scheme_wrong_count("wx:font%::initialization (no argument case)", 0, 0, n, p);

    
    realobj = new os_wxFont(obj);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:font%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:font%");
}

void objscheme_setup_wxFont(void *env)
{
if (os_wxFont_class) {
    objscheme_add_global_class(os_wxFont_class,  "wx:font%", env);
} else {
  os_wxFont_class = objscheme_def_prim_class(env, "wx:font%", "wx:object%", os_wxFont_ConstructScheme, 7);

  scheme_add_method_w_arity(os_wxFont_class,"get-class-name",objscheme_classname_os_wxFont, 0, 0);

 scheme_add_method_w_arity(os_wxFont_class, "get-underlined", os_wxFontGetUnderlined, 0, 0);
 scheme_add_method_w_arity(os_wxFont_class, "get-weight", os_wxFontGetWeight, 0, 0);
 scheme_add_method_w_arity(os_wxFont_class, "get-point-size", os_wxFontGetPointSize, 0, 0);
 scheme_add_method_w_arity(os_wxFont_class, "get-style", os_wxFontGetStyle, 0, 0);
#if  USE_FONT_NAME_DIRECTORY
 scheme_add_method_w_arity(os_wxFont_class, "get-font-id", os_wxFontGetFontId, 0, 0);
#endif
 scheme_add_method_w_arity(os_wxFont_class, "get-family", os_wxFontGetFamily, 0, 0);


  scheme_made_class(os_wxFont_class);


}
  scheme_install_xc_global("wx:const-default", scheme_make_integer(wxDEFAULT), env);
  scheme_install_xc_global("wx:const-decorative", scheme_make_integer(wxDECORATIVE), env);
  scheme_install_xc_global("wx:const-roman", scheme_make_integer(wxROMAN), env);
  scheme_install_xc_global("wx:const-script", scheme_make_integer(wxSCRIPT), env);
  scheme_install_xc_global("wx:const-swiss", scheme_make_integer(wxSWISS), env);
  scheme_install_xc_global("wx:const-modern", scheme_make_integer(wxMODERN), env);
  scheme_install_xc_global("wx:const-teletype", scheme_make_integer(wxTELETYPE), env);
  scheme_install_xc_global("wx:const-system", scheme_make_integer(wxSYSTEM), env);
  scheme_install_xc_global("wx:const-normal", scheme_make_integer(wxNORMAL), env);
  scheme_install_xc_global("wx:const-light", scheme_make_integer(wxLIGHT), env);
  scheme_install_xc_global("wx:const-bold", scheme_make_integer(wxBOLD), env);
  scheme_install_xc_global("wx:const-italic", scheme_make_integer(wxITALIC), env);
  scheme_install_xc_global("wx:const-slant", scheme_make_integer(wxSLANT), env);
}

int objscheme_istype_wxFont(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxFont_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:font%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxFont(class wxFont *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxFont_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxFont *objscheme_unbundle_wxFont(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxFont(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxFont *)o->primdata;
  else
    return (wxFont *)o->primdata;
}





// @ "remove-font" : void RemoveFont(wxFont!);


class os_wxFontList : public wxFontList {
 public:

  os_wxFontList(Scheme_Object * obj);
  ~os_wxFontList();
};

Scheme_Object *os_wxFontList_class;

os_wxFontList::os_wxFontList(Scheme_Object * o)
: wxFontList()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxFontList::~os_wxFontList()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxFontListFindOrCreateFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxFont* r;
  objscheme_check_valid(obj);
  if ((n >= 2) && objscheme_istype_number(p[0], NULL) && objscheme_istype_number(p[1], NULL)) {
    nnint x0;
    int x1;
    int x2;
    int x3;
    Bool x4;

    
    if ((n < 4) ||(n > 5)) 
      scheme_wrong_count("wx:font-list%::find-or-create-font (font id case)", 4, 5, n, p);
    x0 = objscheme_unbundle_nonnegative_integer(p[0], "wx:font-list%::find-or-create-font (font id case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:font-list%::find-or-create-font (font id case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:font-list%::find-or-create-font (font id case)");
    x3 = objscheme_unbundle_integer(p[3], "wx:font-list%::find-or-create-font (font id case)");
    if (n > 4) {
      x4 = objscheme_unbundle_bool(p[4], "wx:font-list%::find-or-create-font (font id case)");
    } else
      x4 = 0;

    
    r = ((wxFontList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateFont(x0, x1, x2, x3, x4);

    
    
  } else  {
#if  USE_FONT_NAME_DIRECTORY
    nnint x0;
    cstring x1;
    int x2;
    int x3;
    int x4;
    Bool x5;

    
    if ((n < 5) ||(n > 6)) 
      scheme_wrong_count("wx:font-list%::find-or-create-font (font name case)", 5, 6, n, p);
    x0 = objscheme_unbundle_nonnegative_integer(p[0], "wx:font-list%::find-or-create-font (font name case)");
    x1 = (cstring)objscheme_unbundle_string(p[1], "wx:font-list%::find-or-create-font (font name case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:font-list%::find-or-create-font (font name case)");
    x3 = objscheme_unbundle_integer(p[3], "wx:font-list%::find-or-create-font (font name case)");
    x4 = objscheme_unbundle_integer(p[4], "wx:font-list%::find-or-create-font (font name case)");
    if (n > 5) {
      x5 = objscheme_unbundle_bool(p[5], "wx:font-list%::find-or-create-font (font name case)");
    } else
      x5 = 0;

    
    r = ((wxFontList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateFont(x0, x1, x2, x3, x4, x5);

    
    
#else
 scheme_signal_error("%s: provided arglist unsupported on this platform", "wx:font-list%::find-or-create-font (font name case)");
#endif
  }

  return objscheme_bundle_wxFont(r);
}

#pragma argsused
static Scheme_Object *os_wxFontList_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxFontList *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:font-list%::initialization", 0, 0, n, p);

  
  realobj = new os_wxFontList(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxFontList(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:font-list%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:font-list%");
}

void objscheme_setup_wxFontList(void *env)
{
if (os_wxFontList_class) {
    objscheme_add_global_class(os_wxFontList_class,  "wx:font-list%", env);
} else {
  os_wxFontList_class = objscheme_def_prim_class(env, "wx:font-list%", "wx:object%", os_wxFontList_ConstructScheme, 2);

  scheme_add_method_w_arity(os_wxFontList_class,"get-class-name",objscheme_classname_os_wxFontList, 0, 0);

#if  USE_FONT_NAME_DIRECTORY
 scheme_add_method(os_wxFontList_class, "find-or-create-font", os_wxFontListFindOrCreateFont);
#endif


  scheme_made_class(os_wxFontList_class);


}
  scheme_install_xc_global("wx:the-font-list", objscheme_bundle_wxFontList(wxTheFontList), env);
}

int objscheme_istype_wxFontList(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxFontList_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:font-list%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxFontList(class wxFontList *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxFontList_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxFontList *objscheme_unbundle_wxFontList(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxFontList(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxFontList *)o->primdata;
  else
    return (wxFontList *)o->primdata;
}







class os_wxColour : public wxColour {
 public:

  os_wxColour(Scheme_Object * obj);
  os_wxColour(Scheme_Object * obj, ubyte x0, ubyte x1, ubyte x2);
  os_wxColour(Scheme_Object * obj, string x0);
  ~os_wxColour();
};

Scheme_Object *os_wxColour_class;

os_wxColour::os_wxColour(Scheme_Object * o)
: wxColour()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxColour::os_wxColour(Scheme_Object * o, ubyte x0, ubyte x1, ubyte x2)
: wxColour(x0, x1, x2)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxColour::os_wxColour(Scheme_Object * o, string x0)
: wxColour(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxColour::~os_wxColour()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxColourBlue(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  ubyte r;
  objscheme_check_valid(obj);

  

  
  r = ((wxColour *)((Scheme_Class_Object *)obj)->primdata)->Blue();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxColourGreen(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  ubyte r;
  objscheme_check_valid(obj);

  

  
  r = ((wxColour *)((Scheme_Class_Object *)obj)->primdata)->Green();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxColourRed(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  ubyte r;
  objscheme_check_valid(obj);

  

  
  r = ((wxColour *)((Scheme_Class_Object *)obj)->primdata)->Red();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxColourSet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  ubyte x0;
  ubyte x1;
  ubyte x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:colour%::set");
  x1 = objscheme_unbundle_integer(p[1], "wx:colour%::set");
  x2 = objscheme_unbundle_integer(p[2], "wx:colour%::set");

  if (!((wxColour *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:colour%::set", "colour", "colour");
  ((wxColour *)((Scheme_Class_Object *)obj)->primdata)->Set(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxColourOk(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxColour *)((Scheme_Class_Object *)obj)->primdata)->Ok();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxColourGet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  ubyte _x0;
  ubyte* x0 = &_x0;
  ubyte _x1;
  ubyte* x1 = &_x1;
  ubyte _x2;
  ubyte* x2 = &_x2;

  
  if (SCHEME_NULLP(p[0]))
    scheme_wrong_type("wx:colour%::get", "non-null", (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "wx:colour%::get"), "wx:colour%::get");
  if (SCHEME_NULLP(p[1]))
    scheme_wrong_type("wx:colour%::get", "non-null", (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "wx:colour%::get"), "wx:colour%::get");
  if (SCHEME_NULLP(p[2]))
    scheme_wrong_type("wx:colour%::get", "non-null", (2 - 0), n, p);
  else
    *x2 = objscheme_unbundle_integer(objscheme_unbox(p[2], "wx:colour%::get"), "wx:colour%::get");

  
  ((wxColour *)((Scheme_Class_Object *)obj)->primdata)->Get(x0, x1, x2);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_integer(_x2));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxColouroperatorEQUAL(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "wx:colour%::=", 0);

  if (!((wxColour *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:colour%::=", "colour", "colour");
  r = &((wxColour *)((Scheme_Class_Object *)obj)->primdata)->operator=(*x0);

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxColour_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxColour *realobj;
  if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:colour%::initialization (color name case)", 1, 1, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:colour%::initialization (color name case)");

    
    realobj = new os_wxColour(obj, x0);
    
    
  } else if ((n >= 1) && objscheme_istype_number(p[0], NULL)) {
    ubyte x0;
    ubyte x1;
    ubyte x2;

    
    if (n != 3) 
      scheme_wrong_count("wx:colour%::initialization (rgb values case)", 3, 3, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:colour%::initialization (rgb values case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:colour%::initialization (rgb values case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:colour%::initialization (rgb values case)");

    
    realobj = new os_wxColour(obj, x0, x1, x2);
    
    
  } else  {

    
    if (n != 0) 
      scheme_wrong_count("wx:colour%::initialization (no argument case)", 0, 0, n, p);

    
    realobj = new os_wxColour(obj);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:colour%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:colour%");
}

void objscheme_setup_wxColour(void *env)
{
if (os_wxColour_class) {
    objscheme_add_global_class(os_wxColour_class,  "wx:colour%", env);
} else {
  os_wxColour_class = objscheme_def_prim_class(env, "wx:colour%", "wx:object%", os_wxColour_ConstructScheme, 8);

  scheme_add_method_w_arity(os_wxColour_class,"get-class-name",objscheme_classname_os_wxColour, 0, 0);

 scheme_add_method_w_arity(os_wxColour_class, "blue", os_wxColourBlue, 0, 0);
 scheme_add_method_w_arity(os_wxColour_class, "green", os_wxColourGreen, 0, 0);
 scheme_add_method_w_arity(os_wxColour_class, "red", os_wxColourRed, 0, 0);
 scheme_add_method_w_arity(os_wxColour_class, "set", os_wxColourSet, 3, 3);
 scheme_add_method_w_arity(os_wxColour_class, "ok?", os_wxColourOk, 0, 0);
 scheme_add_method_w_arity(os_wxColour_class, "get", os_wxColourGet, 3, 3);
 scheme_add_method_w_arity(os_wxColour_class, "=", os_wxColouroperatorEQUAL, 1, 1);


  scheme_made_class(os_wxColour_class);


}
}

int objscheme_istype_wxColour(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxColour_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:colour%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxColour(class wxColour *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxColour_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxColour *objscheme_unbundle_wxColour(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxColour(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxColour *)o->primdata;
  else
    return (wxColour *)o->primdata;
}




// @CREATOR (); ## !defined(wx_mac)

// @ "create" : bool Create(int,custring,custring,custring); ## COLORMAP_CREATE

class os_wxColourMap : public wxColourMap {
 public:

  ~os_wxColourMap();
};

Scheme_Object *os_wxColourMap_class;

os_wxColourMap::~os_wxColourMap()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

static Scheme_Object *objscheme_classname_os_wxColourMap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:colour-map%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:colour-map%");
}

void objscheme_setup_wxColourMap(void *env)
{
if (os_wxColourMap_class) {
    objscheme_add_global_class(os_wxColourMap_class,  "wx:colour-map%", env);
} else {
  os_wxColourMap_class = objscheme_def_prim_class(env, "wx:colour-map%", "wx:object%", NULL, 1);

  scheme_add_method_w_arity(os_wxColourMap_class,"get-class-name",objscheme_classname_os_wxColourMap, 0, 0);



  scheme_made_class(os_wxColourMap_class);


}
}

int objscheme_istype_wxColourMap(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxColourMap_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:colour-map%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxColourMap(class wxColourMap *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxColourMap_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxColourMap *objscheme_unbundle_wxColourMap(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxColourMap(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxColourMap *)o->primdata;
  else
    return (wxColourMap *)o->primdata;
}


#ifdef wx_mac
#define _KEY_TYPE KeyType
#else
#define _KEY_TYPE int
#endif

// Since we don't allow creating this anymore, need a Mac fix:
#if defined(wx_mac)
#define CDB_FIX os_wxColourDatabase(_KEY_TYPE x) : wxColourDatabase(x) {}
#else
#define CDB_FIX 
#endif



// @CREATOR (_KEY_TYPE/bInt/ubIntKey/tInt);

// @ "initialize" : void Initialize(); ## !defined(wx_xt)


class os_wxColourDatabase : public wxColourDatabase {
 public:
  CDB_FIX

  ~os_wxColourDatabase();
};

Scheme_Object *os_wxColourDatabase_class;

os_wxColourDatabase::~os_wxColourDatabase()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxColourDatabaseAppend(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  class wxColour* x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:colour-database%::append");
  x1 = objscheme_unbundle_wxColour(p[1], "wx:colour-database%::append", 0);

  
  ((wxColourDatabase *)((Scheme_Class_Object *)obj)->primdata)->Append(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxColourDatabaseFindName(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "wx:colour-database%::find-name", 0);

  
  r = ((wxColourDatabase *)((Scheme_Class_Object *)obj)->primdata)->FindName(*x0);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxColourDatabaseFindColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:colour-database%::find-colour");

  
  r = ((wxColourDatabase *)((Scheme_Class_Object *)obj)->primdata)->FindColour(x0);

  
  
  return objscheme_bundle_wxColour(r);
}

static Scheme_Object *objscheme_classname_os_wxColourDatabase(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:colour-database%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:colour-database%");
}

void objscheme_setup_wxColourDatabase(void *env)
{
if (os_wxColourDatabase_class) {
    objscheme_add_global_class(os_wxColourDatabase_class,  "wx:colour-database%", env);
} else {
  os_wxColourDatabase_class = objscheme_def_prim_class(env, "wx:colour-database%", "wx:object%", NULL, 4);

  scheme_add_method_w_arity(os_wxColourDatabase_class,"get-class-name",objscheme_classname_os_wxColourDatabase, 0, 0);

 scheme_add_method_w_arity(os_wxColourDatabase_class, "append", os_wxColourDatabaseAppend, 2, 2);
 scheme_add_method_w_arity(os_wxColourDatabase_class, "find-name", os_wxColourDatabaseFindName, 1, 1);
 scheme_add_method_w_arity(os_wxColourDatabase_class, "find-colour", os_wxColourDatabaseFindColour, 1, 1);


  scheme_made_class(os_wxColourDatabase_class);


}
  scheme_install_xc_global("wx:the-colour-database", objscheme_bundle_wxColourDatabase(wxTheColourDatabase), env);
}

int objscheme_istype_wxColourDatabase(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxColourDatabase_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:colour-database%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxColourDatabase(class wxColourDatabase *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxColourDatabase_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxColourDatabase *objscheme_unbundle_wxColourDatabase(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxColourDatabase(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxColourDatabase *)o->primdata;
  else
    return (wxColourDatabase *)o->primdata;
}






class os_wxPoint : public wxPoint {
 public:

  os_wxPoint(Scheme_Object * obj);
  os_wxPoint(Scheme_Object * obj, float x0, float x1);
  ~os_wxPoint();
};

Scheme_Object *os_wxPoint_class;

os_wxPoint::os_wxPoint(Scheme_Object * o)
: wxPoint()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPoint::os_wxPoint(Scheme_Object * o, float x0, float x1)
: wxPoint(x0, x1)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPoint::~os_wxPoint()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

static Scheme_Object *objscheme_wxPoint_Getx(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-x", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxPoint *)cobj->primdata)->wxPoint::x;
  else
    v = ((wxPoint *)cobj->primdata)->x;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxPoint_Setx(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-x", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:point%::x");
  ((wxPoint *)cobj->primdata)->x = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxPoint_Gety(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-y", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxPoint *)cobj->primdata)->wxPoint::y;
  else
    v = ((wxPoint *)cobj->primdata)->y;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxPoint_Sety(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-y", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:point%::y");
  ((wxPoint *)cobj->primdata)->y = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPoint_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxPoint *realobj;
  if ((n >= 1) && objscheme_istype_number(p[0], NULL)) {
    float x0;
    float x1;

    
    if (n != 2) 
      scheme_wrong_count("wx:point%::initialization (xy values case)", 2, 2, n, p);
    x0 = objscheme_unbundle_float(p[0], "wx:point%::initialization (xy values case)");
    x1 = objscheme_unbundle_float(p[1], "wx:point%::initialization (xy values case)");

    
    realobj = new os_wxPoint(obj, x0, x1);
    
    
  } else  {

    
    if (n != 0) 
      scheme_wrong_count("wx:point%::initialization (no argument case)", 0, 0, n, p);

    
    realobj = new os_wxPoint(obj);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxPoint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:point%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:point%");
}

void objscheme_setup_wxPoint(void *env)
{
if (os_wxPoint_class) {
    objscheme_add_global_class(os_wxPoint_class,  "wx:point%", env);
} else {
  os_wxPoint_class = objscheme_def_prim_class(env, "wx:point%", "wx:object%", os_wxPoint_ConstructScheme, 5);

  scheme_add_method_w_arity(os_wxPoint_class,"get-class-name",objscheme_classname_os_wxPoint, 0, 0);


  scheme_add_method_w_arity(os_wxPoint_class,"get-x", objscheme_wxPoint_Getx, 0, 0);
  scheme_add_method_w_arity(os_wxPoint_class,"set-x", objscheme_wxPoint_Setx, 1, 1);
  scheme_add_method_w_arity(os_wxPoint_class,"get-y", objscheme_wxPoint_Gety, 0, 0);
  scheme_add_method_w_arity(os_wxPoint_class,"set-y", objscheme_wxPoint_Sety, 1, 1);

  scheme_made_class(os_wxPoint_class);


}
}

int objscheme_istype_wxPoint(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxPoint_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:point%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxPoint(class wxPoint *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxPoint_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxPoint *objscheme_unbundle_wxPoint(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxPoint(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxPoint *)o->primdata;
  else
    return (wxPoint *)o->primdata;
}





class os_wxIntPoint : public wxIntPoint {
 public:

  os_wxIntPoint(Scheme_Object * obj);
  os_wxIntPoint(Scheme_Object * obj, int x0, int x1);
  ~os_wxIntPoint();
};

Scheme_Object *os_wxIntPoint_class;

os_wxIntPoint::os_wxIntPoint(Scheme_Object * o)
: wxIntPoint()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxIntPoint::os_wxIntPoint(Scheme_Object * o, int x0, int x1)
: wxIntPoint(x0, x1)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxIntPoint::~os_wxIntPoint()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

static Scheme_Object *objscheme_wxIntPoint_Getx(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-x", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxIntPoint *)cobj->primdata)->wxIntPoint::x;
  else
    v = ((wxIntPoint *)cobj->primdata)->x;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxIntPoint_Setx(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-x", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:int-point%::x");
  ((wxIntPoint *)cobj->primdata)->x = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxIntPoint_Gety(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-y", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxIntPoint *)cobj->primdata)->wxIntPoint::y;
  else
    v = ((wxIntPoint *)cobj->primdata)->y;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxIntPoint_Sety(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-y", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:int-point%::y");
  ((wxIntPoint *)cobj->primdata)->y = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxIntPoint_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxIntPoint *realobj;
  if ((n >= 1) && objscheme_istype_number(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("wx:int-point%::initialization (xy values case)", 2, 2, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:int-point%::initialization (xy values case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:int-point%::initialization (xy values case)");

    
    realobj = new os_wxIntPoint(obj, x0, x1);
    
    
  } else  {

    
    if (n != 0) 
      scheme_wrong_count("wx:int-point%::initialization (no argument case)", 0, 0, n, p);

    
    realobj = new os_wxIntPoint(obj);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxIntPoint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:int-point%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:int-point%");
}

void objscheme_setup_wxIntPoint(void *env)
{
if (os_wxIntPoint_class) {
    objscheme_add_global_class(os_wxIntPoint_class,  "wx:int-point%", env);
} else {
  os_wxIntPoint_class = objscheme_def_prim_class(env, "wx:int-point%", "wx:object%", os_wxIntPoint_ConstructScheme, 5);

  scheme_add_method_w_arity(os_wxIntPoint_class,"get-class-name",objscheme_classname_os_wxIntPoint, 0, 0);


  scheme_add_method_w_arity(os_wxIntPoint_class,"get-x", objscheme_wxIntPoint_Getx, 0, 0);
  scheme_add_method_w_arity(os_wxIntPoint_class,"set-x", objscheme_wxIntPoint_Setx, 1, 1);
  scheme_add_method_w_arity(os_wxIntPoint_class,"get-y", objscheme_wxIntPoint_Gety, 0, 0);
  scheme_add_method_w_arity(os_wxIntPoint_class,"set-y", objscheme_wxIntPoint_Sety, 1, 1);

  scheme_made_class(os_wxIntPoint_class);


}
}

int objscheme_istype_wxIntPoint(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxIntPoint_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:int-point%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxIntPoint(class wxIntPoint *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxIntPoint_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxIntPoint *objscheme_unbundle_wxIntPoint(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxIntPoint(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxIntPoint *)o->primdata;
  else
    return (wxIntPoint *)o->primdata;
}








class os_wxBrush : public wxBrush {
 public:

  os_wxBrush(Scheme_Object * obj);
  os_wxBrush(Scheme_Object * obj, class wxColour& x0, int x1);
  os_wxBrush(Scheme_Object * obj, string x0, int x1);
  ~os_wxBrush();
};

Scheme_Object *os_wxBrush_class;

os_wxBrush::os_wxBrush(Scheme_Object * o)
: wxBrush()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxBrush::os_wxBrush(Scheme_Object * o, class wxColour& x0, int x1)
: wxBrush(x0, x1)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxBrush::os_wxBrush(Scheme_Object * o, string x0, int x1)
: wxBrush(x0, x1)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxBrush::~os_wxBrush()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxBrushSetStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:brush%::set-style");

  if (!((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:brush::set-style", "brush", "brush");
  ((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->SetStyle(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxBrushGetStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->GetStyle();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxBrushSetStipple(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBitmap* x0;

  
  x0 = objscheme_unbundle_wxBitmap(p[0], "wx:brush%::set-stipple", 1);

  if (x0 && !x0->Ok()) return scheme_void;if (!((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:brush::set-stipple", "brush", "brush");
  ((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->SetStipple(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxBrushGetStipple(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBitmap* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->GetStipple();

  
  
  return objscheme_bundle_wxBitmap(r);
}

#pragma argsused
static Scheme_Object *os_wxBrushSetColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_wxColour(p[0], NULL, 0)) {
    class wxColour* x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:brush%::set-colour (wx:colour% case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "wx:brush%::set-colour (wx:colour% case)", 0);

    if (!((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:brush::set-colour", "brush", "brush");
    ((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->SetColour(*x0);

    
    
  } else if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:brush%::set-colour (color name case)", 1, 1, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:brush%::set-colour (color name case)");

    if (!((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:brush::set-colour", "brush", "brush");
    ((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->SetColour(x0);

    
    
  } else  {
    int x0;
    int x1;
    int x2;

    
    if (n != 3) 
      scheme_wrong_count("wx:brush%::set-colour (rgb values case)", 3, 3, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:brush%::set-colour (rgb values case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:brush%::set-colour (rgb values case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:brush%::set-colour (rgb values case)");

    if (!((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:brush::set-colour", "brush", "brush");
    ((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->SetColour(x0, x1, x2);

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxBrushGetColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = &((wxBrush *)((Scheme_Class_Object *)obj)->primdata)->GetColour();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxBrush_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxBrush *realobj;
  if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("wx:brush%::initialization (color name case)", 2, 2, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:brush%::initialization (color name case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:brush%::initialization (color name case)");

    
    realobj = new os_wxBrush(obj, x0, x1);
    
    
  } else if ((n >= 1) && objscheme_istype_wxColour(p[0], NULL, 0)) {
    class wxColour* x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("wx:brush%::initialization (wx:colour% case)", 2, 2, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "wx:brush%::initialization (wx:colour% case)", 0);
    x1 = objscheme_unbundle_integer(p[1], "wx:brush%::initialization (wx:colour% case)");

    
    realobj = new os_wxBrush(obj, *x0, x1);
    
    
  } else  {

    
    if (n != 0) 
      scheme_wrong_count("wx:brush%::initialization (no argument case)", 0, 0, n, p);

    
    realobj = new os_wxBrush(obj);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxBrush(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:brush%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:brush%");
}

void objscheme_setup_wxBrush(void *env)
{
if (os_wxBrush_class) {
    objscheme_add_global_class(os_wxBrush_class,  "wx:brush%", env);
} else {
  os_wxBrush_class = objscheme_def_prim_class(env, "wx:brush%", "wx:object%", os_wxBrush_ConstructScheme, 7);

  scheme_add_method_w_arity(os_wxBrush_class,"get-class-name",objscheme_classname_os_wxBrush, 0, 0);

 scheme_add_method_w_arity(os_wxBrush_class, "set-style", os_wxBrushSetStyle, 1, 1);
 scheme_add_method_w_arity(os_wxBrush_class, "get-style", os_wxBrushGetStyle, 0, 0);
 scheme_add_method_w_arity(os_wxBrush_class, "set-stipple", os_wxBrushSetStipple, 1, 1);
 scheme_add_method_w_arity(os_wxBrush_class, "get-stipple", os_wxBrushGetStipple, 0, 0);
 scheme_add_method(os_wxBrush_class, "set-colour", os_wxBrushSetColour);
 scheme_add_method_w_arity(os_wxBrush_class, "get-colour", os_wxBrushGetColour, 0, 0);


  scheme_made_class(os_wxBrush_class);


}
  scheme_install_xc_global("wx:const-transparent", scheme_make_integer(wxTRANSPARENT), env);
  scheme_install_xc_global("wx:const-solid", scheme_make_integer(wxSOLID), env);
  scheme_install_xc_global("wx:const-bdiagonal-hatch", scheme_make_integer(wxBDIAGONAL_HATCH), env);
  scheme_install_xc_global("wx:const-crossdiag-hatch", scheme_make_integer(wxCROSSDIAG_HATCH), env);
  scheme_install_xc_global("wx:const-fdiagonal-hatch", scheme_make_integer(wxFDIAGONAL_HATCH), env);
  scheme_install_xc_global("wx:const-cross-hatch", scheme_make_integer(wxCROSS_HATCH), env);
  scheme_install_xc_global("wx:const-horizontal-hatch", scheme_make_integer(wxHORIZONTAL_HATCH), env);
  scheme_install_xc_global("wx:const-vertical-hatch", scheme_make_integer(wxVERTICAL_HATCH), env);
  scheme_install_xc_global("wx:const-stipple", scheme_make_integer(wxSTIPPLE), env);
  scheme_install_xc_global("wx:const-opaque-stipple", scheme_make_integer(wxOPAQUE_STIPPLE), env);
}

int objscheme_istype_wxBrush(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxBrush_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:brush%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxBrush(class wxBrush *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxBrush_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxBrush *objscheme_unbundle_wxBrush(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxBrush(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxBrush *)o->primdata;
  else
    return (wxBrush *)o->primdata;
}




// @ "remove-brush" : void RemoveBrush(wxBrush!);


class os_wxBrushList : public wxBrushList {
 public:

  os_wxBrushList(Scheme_Object * obj);
  ~os_wxBrushList();
};

Scheme_Object *os_wxBrushList_class;

os_wxBrushList::os_wxBrushList(Scheme_Object * o)
: wxBrushList()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxBrushList::~os_wxBrushList()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxBrushListFindOrCreateBrush(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBrush* r;
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_wxColour(p[0], NULL, 0)) {
    class wxColour* x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("wx:brush-list%::find-or-create-brush (wx:colour% case)", 2, 2, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "wx:brush-list%::find-or-create-brush (wx:colour% case)", 0);
    x1 = objscheme_unbundle_integer(p[1], "wx:brush-list%::find-or-create-brush (wx:colour% case)");

    
    r = ((wxBrushList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateBrush(x0, x1);

    
    
  } else  {
    string x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("wx:brush-list%::find-or-create-brush (color name case)", 2, 2, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:brush-list%::find-or-create-brush (color name case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:brush-list%::find-or-create-brush (color name case)");

    
    r = ((wxBrushList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateBrush(x0, x1);

    
    
  }

  return objscheme_bundle_wxBrush(r);
}

#pragma argsused
static Scheme_Object *os_wxBrushList_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxBrushList *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:brush-list%::initialization", 0, 0, n, p);

  
  realobj = new os_wxBrushList(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxBrushList(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:brush-list%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:brush-list%");
}

void objscheme_setup_wxBrushList(void *env)
{
if (os_wxBrushList_class) {
    objscheme_add_global_class(os_wxBrushList_class,  "wx:brush-list%", env);
} else {
  os_wxBrushList_class = objscheme_def_prim_class(env, "wx:brush-list%", "wx:object%", os_wxBrushList_ConstructScheme, 2);

  scheme_add_method_w_arity(os_wxBrushList_class,"get-class-name",objscheme_classname_os_wxBrushList, 0, 0);

 scheme_add_method(os_wxBrushList_class, "find-or-create-brush", os_wxBrushListFindOrCreateBrush);


  scheme_made_class(os_wxBrushList_class);


}
  scheme_install_xc_global("wx:the-brush-list", objscheme_bundle_wxBrushList(wxTheBrushList), env);
}

int objscheme_istype_wxBrushList(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxBrushList_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:brush-list%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxBrushList(class wxBrushList *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxBrushList_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxBrushList *objscheme_unbundle_wxBrushList(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxBrushList(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxBrushList *)o->primdata;
  else
    return (wxBrushList *)o->primdata;
}











class os_wxPen : public wxPen {
 public:

  os_wxPen(Scheme_Object * obj);
  os_wxPen(Scheme_Object * obj, class wxColour& x0, nnint x1, int x2);
  os_wxPen(Scheme_Object * obj, string x0, nnint x1, int x2);
  ~os_wxPen();
};

Scheme_Object *os_wxPen_class;

os_wxPen::os_wxPen(Scheme_Object * o)
: wxPen()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPen::os_wxPen(Scheme_Object * o, class wxColour& x0, nnint x1, int x2)
: wxPen(x0, x1, x2)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPen::os_wxPen(Scheme_Object * o, string x0, nnint x1, int x2)
: wxPen(x0, x1, x2)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPen::~os_wxPen()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxPenSetStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:pen%::set-style");

  if (!((wxPen *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:pen::set-style", "pen", "pen");
  ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->SetStyle(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPenGetStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->GetStyle();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxPenSetStipple(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxBitmap* x0;

  
  x0 = objscheme_unbundle_wxBitmap(p[0], "wx:pen%::set-stipple", 1);

  if (x0 && !x0->Ok()) return scheme_void;if (!((wxPen *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:pen::set-stipple", "pen", "pen");
  ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->SetStipple(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPenGetStipple(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxBitmap* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->GetStipple();

  
  
  return objscheme_bundle_wxBitmap(r);
}

#pragma argsused
static Scheme_Object *os_wxPenSetColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_wxColour(p[0], NULL, 0)) {
    class wxColour* x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:pen%::set-colour (wx:colour% case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "wx:pen%::set-colour (wx:colour% case)", 0);

    if (!((wxPen *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:pen::set-colour", "pen", "pen");
    ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->SetColour(*x0);

    
    
  } else if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:pen%::set-colour (color name case)", 1, 1, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:pen%::set-colour (color name case)");

    if (!((wxPen *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:pen::set-colour", "pen", "pen");
    ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->SetColour(x0);

    
    
  } else  {
    int x0;
    int x1;
    int x2;

    
    if (n != 3) 
      scheme_wrong_count("wx:pen%::set-colour (rgb values case)", 3, 3, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:pen%::set-colour (rgb values case)");
    x1 = objscheme_unbundle_integer(p[1], "wx:pen%::set-colour (rgb values case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:pen%::set-colour (rgb values case)");

    if (!((wxPen *)((Scheme_Class_Object *)obj)->primdata)->IsMutable()) scheme_signal_error("%s: this wx:%s%% object is locked (in use by a wx:dc%% or in a list of %s constants)", "wx:pen::set-colour", "pen", "pen");
    ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->SetColour(x0, x1, x2);

    
    
  }

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPenGetColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = &((wxPen *)((Scheme_Class_Object *)obj)->primdata)->GetColour();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxPenSetJoin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:pen%::set-join");

  
  ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->SetJoin(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPenGetJoin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->GetJoin();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxPenSetCap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:pen%::set-cap");

  
  ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->SetCap(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPenGetCap(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->GetCap();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxPenSetWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:pen%::set-width");

  
  ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->SetWidth(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPenGetWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPen *)((Scheme_Class_Object *)obj)->primdata)->GetWidth();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxPen_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxPen *realobj;
  if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;
    nnint x1;
    int x2;

    
    if (n != 3) 
      scheme_wrong_count("wx:pen%::initialization (color name case)", 3, 3, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:pen%::initialization (color name case)");
    x1 = objscheme_unbundle_nonnegative_integer(p[1], "wx:pen%::initialization (color name case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:pen%::initialization (color name case)");

    
    realobj = new os_wxPen(obj, x0, x1, x2);
    
    
  } else if ((n >= 1) && objscheme_istype_wxColour(p[0], NULL, 0)) {
    class wxColour* x0;
    nnint x1;
    int x2;

    
    if (n != 3) 
      scheme_wrong_count("wx:pen%::initialization (wx:colour% case)", 3, 3, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "wx:pen%::initialization (wx:colour% case)", 0);
    x1 = objscheme_unbundle_nonnegative_integer(p[1], "wx:pen%::initialization (wx:colour% case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:pen%::initialization (wx:colour% case)");

    
    realobj = new os_wxPen(obj, *x0, x1, x2);
    
    
  } else  {

    
    if (n != 0) 
      scheme_wrong_count("wx:pen%::initialization (no argument case)", 0, 0, n, p);

    
    realobj = new os_wxPen(obj);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxPen(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:pen%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:pen%");
}

void objscheme_setup_wxPen(void *env)
{
if (os_wxPen_class) {
    objscheme_add_global_class(os_wxPen_class,  "wx:pen%", env);
} else {
  os_wxPen_class = objscheme_def_prim_class(env, "wx:pen%", "wx:object%", os_wxPen_ConstructScheme, 13);

  scheme_add_method_w_arity(os_wxPen_class,"get-class-name",objscheme_classname_os_wxPen, 0, 0);

 scheme_add_method_w_arity(os_wxPen_class, "set-style", os_wxPenSetStyle, 1, 1);
 scheme_add_method_w_arity(os_wxPen_class, "get-style", os_wxPenGetStyle, 0, 0);
 scheme_add_method_w_arity(os_wxPen_class, "set-stipple", os_wxPenSetStipple, 1, 1);
 scheme_add_method_w_arity(os_wxPen_class, "get-stipple", os_wxPenGetStipple, 0, 0);
 scheme_add_method(os_wxPen_class, "set-colour", os_wxPenSetColour);
 scheme_add_method_w_arity(os_wxPen_class, "get-colour", os_wxPenGetColour, 0, 0);
 scheme_add_method_w_arity(os_wxPen_class, "set-join", os_wxPenSetJoin, 1, 1);
 scheme_add_method_w_arity(os_wxPen_class, "get-join", os_wxPenGetJoin, 0, 0);
 scheme_add_method_w_arity(os_wxPen_class, "set-cap", os_wxPenSetCap, 1, 1);
 scheme_add_method_w_arity(os_wxPen_class, "get-cap", os_wxPenGetCap, 0, 0);
 scheme_add_method_w_arity(os_wxPen_class, "set-width", os_wxPenSetWidth, 1, 1);
 scheme_add_method_w_arity(os_wxPen_class, "get-width", os_wxPenGetWidth, 0, 0);


  scheme_made_class(os_wxPen_class);


}
  scheme_install_xc_global("wx:const-join-bevel", scheme_make_integer(wxJOIN_BEVEL), env);
  scheme_install_xc_global("wx:const-join-miter", scheme_make_integer(wxJOIN_MITER), env);
  scheme_install_xc_global("wx:const-join-round", scheme_make_integer(wxJOIN_ROUND), env);
  scheme_install_xc_global("wx:const-cap-round", scheme_make_integer(wxCAP_ROUND), env);
  scheme_install_xc_global("wx:const-cap-projecting", scheme_make_integer(wxCAP_PROJECTING), env);
  scheme_install_xc_global("wx:const-cap-butt", scheme_make_integer(wxCAP_BUTT), env);
  scheme_install_xc_global("wx:const-dot", scheme_make_integer(wxDOT), env);
  scheme_install_xc_global("wx:const-long-dash", scheme_make_integer(wxLONG_DASH), env);
  scheme_install_xc_global("wx:const-short-dash", scheme_make_integer(wxSHORT_DASH), env);
  scheme_install_xc_global("wx:const-dot-dash", scheme_make_integer(wxDOT_DASH), env);
}

int objscheme_istype_wxPen(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxPen_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:pen%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxPen(class wxPen *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxPen_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxPen *objscheme_unbundle_wxPen(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxPen(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxPen *)o->primdata;
  else
    return (wxPen *)o->primdata;
}





// @ "remove-pen" : void RemovePen(wxPen!);


class os_wxPenList : public wxPenList {
 public:

  os_wxPenList(Scheme_Object * obj);
  ~os_wxPenList();
};

Scheme_Object *os_wxPenList_class;

os_wxPenList::os_wxPenList(Scheme_Object * o)
: wxPenList()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPenList::~os_wxPenList()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxPenListFindOrCreatePen(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxPen* r;
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_wxColour(p[0], NULL, 0)) {
    class wxColour* x0;
    nnint x1;
    int x2;

    
    if (n != 3) 
      scheme_wrong_count("wx:pen-list%::find-or-create-pen (wx:colour% case)", 3, 3, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "wx:pen-list%::find-or-create-pen (wx:colour% case)", 0);
    x1 = objscheme_unbundle_nonnegative_integer(p[1], "wx:pen-list%::find-or-create-pen (wx:colour% case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:pen-list%::find-or-create-pen (wx:colour% case)");

    
    r = ((wxPenList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreatePen(x0, x1, x2);

    
    
  } else  {
    string x0;
    nnint x1;
    int x2;

    
    if (n != 3) 
      scheme_wrong_count("wx:pen-list%::find-or-create-pen (color name case)", 3, 3, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:pen-list%::find-or-create-pen (color name case)");
    x1 = objscheme_unbundle_nonnegative_integer(p[1], "wx:pen-list%::find-or-create-pen (color name case)");
    x2 = objscheme_unbundle_integer(p[2], "wx:pen-list%::find-or-create-pen (color name case)");

    
    r = ((wxPenList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreatePen(x0, x1, x2);

    
    
  }

  return objscheme_bundle_wxPen(r);
}

#pragma argsused
static Scheme_Object *os_wxPenList_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxPenList *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:pen-list%::initialization", 0, 0, n, p);

  
  realobj = new os_wxPenList(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxPenList(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:pen-list%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:pen-list%");
}

void objscheme_setup_wxPenList(void *env)
{
if (os_wxPenList_class) {
    objscheme_add_global_class(os_wxPenList_class,  "wx:pen-list%", env);
} else {
  os_wxPenList_class = objscheme_def_prim_class(env, "wx:pen-list%", "wx:object%", os_wxPenList_ConstructScheme, 2);

  scheme_add_method_w_arity(os_wxPenList_class,"get-class-name",objscheme_classname_os_wxPenList, 0, 0);

 scheme_add_method(os_wxPenList_class, "find-or-create-pen", os_wxPenListFindOrCreatePen);


  scheme_made_class(os_wxPenList_class);


}
  scheme_install_xc_global("wx:the-pen-list", objscheme_bundle_wxPenList(wxThePenList), env);
}

int objscheme_istype_wxPenList(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxPenList_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:pen-list%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxPenList(class wxPenList *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxPenList_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxPenList *objscheme_unbundle_wxPenList(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxPenList(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxPenList *)o->primdata;
  else
    return (wxPenList *)o->primdata;
}



// @CREATOR ();



class os_wxCursor : public wxCursor {
 public:

  os_wxCursor(Scheme_Object * obj, string x0, long x1 = wxBITMAP_TYPE_DEFAULT, int x2 = 0, int x3 = 0);
  os_wxCursor(Scheme_Object * obj, int x0);
  ~os_wxCursor();
};

Scheme_Object *os_wxCursor_class;

os_wxCursor::os_wxCursor(Scheme_Object * o, string x0, long x1, int x2, int x3)
: wxCursor(x0, x1, x2, x3)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxCursor::os_wxCursor(Scheme_Object * o, int x0)
: wxCursor(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxCursor::~os_wxCursor()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxCursorOk(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxCursor *)((Scheme_Class_Object *)obj)->primdata)->Ok();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxCursor_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxCursor *realobj;
  if ((n >= 1) && objscheme_istype_number(p[0], NULL)) {
    int x0;

    
    if (n != 1) 
      scheme_wrong_count("wx:cursor%::initialization (cursor id case)", 1, 1, n, p);
    x0 = objscheme_unbundle_integer(p[0], "wx:cursor%::initialization (cursor id case)");

    
    realobj = new os_wxCursor(obj, x0);
    
    
  } else  {
    string x0;
    long x1;
    int x2;
    int x3;

    
    if ((n < 1) ||(n > 4)) 
      scheme_wrong_count("wx:cursor%::initialization (cursor name case)", 1, 4, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "wx:cursor%::initialization (cursor name case)");
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "wx:cursor%::initialization (cursor name case)");
    } else
      x1 = wxBITMAP_TYPE_DEFAULT;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "wx:cursor%::initialization (cursor name case)");
    } else
      x2 = 0;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "wx:cursor%::initialization (cursor name case)");
    } else
      x3 = 0;

    
    realobj = new os_wxCursor(obj, x0, x1, x2, x3);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:cursor%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:cursor%");
}

void objscheme_setup_wxCursor(void *env)
{
if (os_wxCursor_class) {
    objscheme_add_global_class(os_wxCursor_class,  "wx:cursor%", env);
} else {
  os_wxCursor_class = objscheme_def_prim_class(env, "wx:cursor%", "wx:object%", os_wxCursor_ConstructScheme, 2);

  scheme_add_method_w_arity(os_wxCursor_class,"get-class-name",objscheme_classname_os_wxCursor, 0, 0);

 scheme_add_method_w_arity(os_wxCursor_class, "ok?", os_wxCursorOk, 0, 0);


  scheme_made_class(os_wxCursor_class);


}
  scheme_install_xc_global("wx:const-cursor-arrow", scheme_make_integer(wxCURSOR_ARROW), env);
  scheme_install_xc_global("wx:const-cursor-bullseye", scheme_make_integer(wxCURSOR_BULLSEYE), env);
  scheme_install_xc_global("wx:const-cursor-char", scheme_make_integer(wxCURSOR_CHAR), env);
  scheme_install_xc_global("wx:const-cursor-cross", scheme_make_integer(wxCURSOR_CROSS), env);
  scheme_install_xc_global("wx:const-cursor-hand", scheme_make_integer(wxCURSOR_HAND), env);
  scheme_install_xc_global("wx:const-cursor-ibeam", scheme_make_integer(wxCURSOR_IBEAM), env);
  scheme_install_xc_global("wx:const-cursor-left-button", scheme_make_integer(wxCURSOR_LEFT_BUTTON), env);
  scheme_install_xc_global("wx:const-cursor-magnifier", scheme_make_integer(wxCURSOR_MAGNIFIER), env);
  scheme_install_xc_global("wx:const-cursor-middle-button", scheme_make_integer(wxCURSOR_MIDDLE_BUTTON), env);
  scheme_install_xc_global("wx:const-cursor-no-entry", scheme_make_integer(wxCURSOR_NO_ENTRY), env);
  scheme_install_xc_global("wx:const-cursor-painr-brush", scheme_make_integer(wxCURSOR_PAINT_BRUSH), env);
  scheme_install_xc_global("wx:const-cursor-pencil", scheme_make_integer(wxCURSOR_PENCIL), env);
  scheme_install_xc_global("wx:const-cursor-point-left", scheme_make_integer(wxCURSOR_POINT_LEFT), env);
  scheme_install_xc_global("wx:const-cursor-point-right", scheme_make_integer(wxCURSOR_POINT_RIGHT), env);
  scheme_install_xc_global("wx:const-cursor-question-arrow", scheme_make_integer(wxCURSOR_QUESTION_ARROW), env);
  scheme_install_xc_global("wx:const-cursor-right-button", scheme_make_integer(wxCURSOR_RIGHT_BUTTON), env);
  scheme_install_xc_global("wx:const-cursor-sizenesw", scheme_make_integer(wxCURSOR_SIZENESW), env);
  scheme_install_xc_global("wx:const-cursor-sizens", scheme_make_integer(wxCURSOR_SIZENS), env);
  scheme_install_xc_global("wx:const-cursor-sizenwse", scheme_make_integer(wxCURSOR_SIZENWSE), env);
  scheme_install_xc_global("wx:const-cursor-sizewe", scheme_make_integer(wxCURSOR_SIZEWE), env);
  scheme_install_xc_global("wx:const-cursor-sizing", scheme_make_integer(wxCURSOR_SIZING), env);
  scheme_install_xc_global("wx:const-cursor-spraycan", scheme_make_integer(wxCURSOR_SPRAYCAN), env);
  scheme_install_xc_global("wx:const-cursor-wait", scheme_make_integer(wxCURSOR_WAIT), env);
  scheme_install_xc_global("wx:const-cursor-watch", scheme_make_integer(wxCURSOR_WATCH), env);
}

int objscheme_istype_wxCursor(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxCursor_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:cursor%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxCursor(class wxCursor *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxCursor_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxCursor *objscheme_unbundle_wxCursor(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxCursor(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxCursor *)o->primdata;
  else
    return (wxCursor *)o->primdata;
}




// @CREATOR ();

// in wx:bitmap%: 
// @ "ok?" : bool Ok();

class os_wxIcon : public wxIcon {
 public:

  os_wxIcon(Scheme_Object * obj, string x0, int x1 = wxBITMAP_TYPE_DEFAULT);
  ~os_wxIcon();
};

Scheme_Object *os_wxIcon_class;

os_wxIcon::os_wxIcon(Scheme_Object * o, string x0, int x1)
: wxIcon(x0, x1)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxIcon::~os_wxIcon()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxIcon_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxIcon *realobj;
  string x0;
  int x1;

  
  if ((n < 1) ||(n > 2)) 
    scheme_wrong_count("wx:icon%::initialization", 1, 2, n, p);
  x0 = (string)objscheme_unbundle_string(p[0], "wx:icon%::initialization");
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:icon%::initialization");
  } else
    x1 = wxBITMAP_TYPE_DEFAULT;

  
  realobj = new os_wxIcon(obj, x0, x1);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxIcon(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:icon%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:icon%");
}

void objscheme_setup_wxIcon(void *env)
{
if (os_wxIcon_class) {
    objscheme_add_global_class(os_wxIcon_class,  "wx:icon%", env);
} else {
  os_wxIcon_class = objscheme_def_prim_class(env, "wx:icon%", "wx:bitmap%", os_wxIcon_ConstructScheme, 1);

  scheme_add_method_w_arity(os_wxIcon_class,"get-class-name",objscheme_classname_os_wxIcon, 0, 0);



  scheme_made_class(os_wxIcon_class);


}
}

int objscheme_istype_wxIcon(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxIcon_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:icon%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxIcon(class wxIcon *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxIcon_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxIcon *objscheme_unbundle_wxIcon(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxIcon(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxIcon *)o->primdata;
  else
    return (wxIcon *)o->primdata;
}


#if USE_FONT_NAME_DIRECTORY







class os_wxFontNameDirectory : public wxFontNameDirectory {
 public:

  ~os_wxFontNameDirectory();
};

Scheme_Object *os_wxFontNameDirectory_class;

os_wxFontNameDirectory::~os_wxFontNameDirectory()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryFindOrCreateFontId(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  cstring x0;
  int x1;

  
  x0 = (cstring)objscheme_unbundle_string(p[0], "wx:font-name-directory%::find-or-create-font-id");
  x1 = objscheme_unbundle_integer(p[1], "wx:font-name-directory%::find-or-create-font-id");

  
  r = ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateFontId(x0, x1);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryGetFamily(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:font-name-directory%::get-family");

  
  r = ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->GetFamily(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryGetFontName(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:font-name-directory%::get-font-name");

  
  r = ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->GetFontName(x0);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryGetFontId(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:font-name-directory%::get-font-id");

  
  r = ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->GetFontId(x0);

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryInitialize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;
  string x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:font-name-directory%::initialize");
  x1 = objscheme_unbundle_integer(p[1], "wx:font-name-directory%::initialize");
  x2 = (string)objscheme_unbundle_string(p[2], "wx:font-name-directory%::initialize");

  
  ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->Initialize(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryGetNewFontId(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->GetNewFontId();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryGetAFMName(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  int x0;
  int x1;
  int x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:font-name-directory%::get-afm-name");
  x1 = objscheme_unbundle_integer(p[1], "wx:font-name-directory%::get-afm-name");
  x2 = objscheme_unbundle_integer(p[2], "wx:font-name-directory%::get-afm-name");

  
  r = ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->GetAFMName(x0, x1, x2);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryGetPostScriptName(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  int x0;
  int x1;
  int x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:font-name-directory%::get-post-script-name");
  x1 = objscheme_unbundle_integer(p[1], "wx:font-name-directory%::get-post-script-name");
  x2 = objscheme_unbundle_integer(p[2], "wx:font-name-directory%::get-post-script-name");

  
  r = ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->GetPostScriptName(x0, x1, x2);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxFontNameDirectoryGetScreenName(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  int x0;
  int x1;
  int x2;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:font-name-directory%::get-screen-name");
  x1 = objscheme_unbundle_integer(p[1], "wx:font-name-directory%::get-screen-name");
  x2 = objscheme_unbundle_integer(p[2], "wx:font-name-directory%::get-screen-name");

  
  r = ((wxFontNameDirectory *)((Scheme_Class_Object *)obj)->primdata)->GetScreenName(x0, x1, x2);

  
  
  return objscheme_bundle_string((char *)r);
}

static Scheme_Object *objscheme_classname_os_wxFontNameDirectory(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:font-name-directory%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:font-name-directory%");
}

void objscheme_setup_wxFontNameDirectory(void *env)
{
if (os_wxFontNameDirectory_class) {
    objscheme_add_global_class(os_wxFontNameDirectory_class,  "wx:font-name-directory%", env);
} else {
  os_wxFontNameDirectory_class = objscheme_def_prim_class(env, "wx:font-name-directory%", "wx:object%", NULL, 10);

  scheme_add_method_w_arity(os_wxFontNameDirectory_class,"get-class-name",objscheme_classname_os_wxFontNameDirectory, 0, 0);

 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "find-or-create-font-id", os_wxFontNameDirectoryFindOrCreateFontId, 2, 2);
 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "get-family", os_wxFontNameDirectoryGetFamily, 1, 1);
 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "get-font-name", os_wxFontNameDirectoryGetFontName, 1, 1);
 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "get-font-id", os_wxFontNameDirectoryGetFontId, 1, 1);
 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "initialize", os_wxFontNameDirectoryInitialize, 3, 3);
 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "get-new-font-id", os_wxFontNameDirectoryGetNewFontId, 0, 0);
 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "get-afm-name", os_wxFontNameDirectoryGetAFMName, 3, 3);
 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "get-post-script-name", os_wxFontNameDirectoryGetPostScriptName, 3, 3);
 scheme_add_method_w_arity(os_wxFontNameDirectory_class, "get-screen-name", os_wxFontNameDirectoryGetScreenName, 3, 3);


  scheme_made_class(os_wxFontNameDirectory_class);


}
  scheme_install_xc_global("wx:the-font-name-directory", objscheme_bundle_wxFontNameDirectory(&wxTheFontNameDirectory), env);
}

int objscheme_istype_wxFontNameDirectory(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxFontNameDirectory_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:font-name-directory%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxFontNameDirectory(class wxFontNameDirectory *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxFontNameDirectory_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxFontNameDirectory *objscheme_unbundle_wxFontNameDirectory(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxFontNameDirectory(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxFontNameDirectory *)o->primdata;
  else
    return (wxFontNameDirectory *)o->primdata;
}


#endif

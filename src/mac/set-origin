From Apple Docs:

GetWindowBounds returns the structure and content regions in global coordinates.

GetWindowRegion: unclear

Yet another reason to get rid of SetOrigin: it messes up InvalWindow(Rgn/Rect) completely.

Calls which take coordinates/rects/rgns as arguments (not counting utility rgn fns):

_ClipRect
_CopyBits
_CreateNewWindow
_DragWindow (uses only global coordinates)
_DrawPicture
_DrawThemeFocusRect
_DrawThemeListBoxFrame
_EraseRect
_EraseRgn
_FindWindow (uses only global coordinates)
_FrameArc
_FrameOval
_FrameRect
_FrameRoundRect
_GetCPixel
_FramePoly
_GetColor
_GetDragMouse (only global coordinates)
_InvalWindowRect
_InvalWindowRgn
_InvertRect
_InvertRgn
_LineTo
_MenuSelect (only global coordinates)
_MoveControl
_MoveTo
_MoveWindow (only global coords)
_NewCWindow (only globals)
_NewControl
_NewGWorld
_PaintArc
_PaintOval
_PaintPoly
_PaintRect
_PaintRgn
_PaintRoundRect
_PopUpMenuSelect (only globals)
_PtInRect
_PtInRgn
_PtToAngle
_RectRgn

Non-worrisome functions:

_AECountItems
_AEDisposeDesc
_AEGetNthPtr
_AEGetParamDesc
_AEInstallEventHandler
_AEProcessAppleEvent
_ActivateControl
_AddDragItemFlavor
_Alert
_AppendMenu
_AppendResMenu
_BackColor
_BackPat
_BeginUpdate
_BitClr
_BlockMove
_BlockMoveData
_CFRelease
_CFStringCreateWithCString
_CFStringGetCString
_CFStringGetSystemEncoding
_CSCopyUserName
_CalcMenuSize
_CharWidth
_CheckMenuItem
_ClearCurrentScrap
_ClearMenuBar
_CloseMovieFile
_ClosePoly
_CloseRgn
_Color2Index
_CompareString
_CopyCStringToPascal
_CopyPascalStringToC
_CopyRgn
_CountDragItems
_CountMenuItems
_CreateNewPort
_DeactivateControl
_Delay
_DeleteMenu
_DeleteMenuItem
_DiffRgn
_DisableMenuItem
_DisposeCTable
_DisposeControl
_DisposeControlActionUPP
_DisposeDialog
_DisposeDrag
_DisposeDragSendDataUPP
_DisposeGWorld
_DisposeHandle
_DisposeMenu
_DisposeMovie
_DisposeNavEventUPP
_DisposePtr
_DisposeRgn
_DisposeWindow
_DragPostScroll
_DragPreScroll
_Draw1Control
_DrawGrowIcon
_DrawJustified
_DrawText
_EmptyRgn
_EnableMenuItem
_EndUpdate
_EnterMovies
_EqualString
_ExitToShell
_FSMakeFSSpec
_FSRefMakePath
_FSpGetFInfo
_FSpMakeFSRef
_FSpSetFInfo
_FindFolder
_Fix2Long
_FixDiv
_FixMul
_FixRatio
_FixRound
_FlushEvents
_ForeColor
_FrontWindow
_Gestalt
_GetAppFont
_GetBackColor
_GetCTSeed
_GetCaretTime
_GetClip
_GetControlBounds
_GetControlMaximum
_GetControlMinimum
_GetControlReference
_GetControlTitle
_GetControlValue
_GetCurrentProcess
_GetCurrentScrap
_GetCursor
_GetDblTime
_GetDialogItem
_GetDialogItemText
_GetDialogPort
_GetDragItemReferenceNumber
_GetDragModifiers
_GetFNum
_GetFlavorData
_GetFlavorDataSize
_GetFlavorFlags
_GetFontInfo
_GetForeColor
_GetFrontProcess
_GetGDevice
_GetGWorld
_GetGWorldPixMap
_GetHandleSize
_GetIndPattern
_GetKeys
_GetMBarHeight
_GetMainDevice
_GetMenu
_GetMenuHandle
_GetMenuItemText
_GetMouse
_GetNamedResource
_GetNewDialog
_GetNextEvent
_GetNextWindow
_GetPen
_GetPenState
_GetPort
_GetPortBitMapForCopyBits
_GetPortBounds
_GetPortClipRegion
_GetPortPixMap
_GetPortTextFace
_GetPortTextFont
_GetPortTextMode
_GetPortTextSize
_GetPortVisibleRegion
_GetProcessInformation
_GetQDGlobalsArrow
_GetQDGlobalsBlack
_GetQDGlobalsDarkGray
_GetQDGlobalsLightGray
_GetQDGlobalsScreenBits
_GetQDGlobalsThePort
_GetQDGlobalsWhite
_GetRegionBounds
_GetResource
_GetScrapFlavorData
_GetScrapFlavorFlags
_GetScrapFlavorSize
_GetSysFont
_GetWRefCon
_GetWTitle
_GetWindowBounds
_GetWindowFromPort
_GetWindowPort
_GetWindowRegion
_GlobalToLocal
_GrowWindow
_HGetState
_HLock
_HNoPurge
_HUnlock
_HideControl
_HideDragHilite
_HideWindow
_HiliteControl
_HiliteMenu
_Index2Color
_InitCursor
_InsertMenu
_InsertMenuItem
_InsetRect
_InsetRgn
_InvalMenuBar
_IsControlVisible
_IsMovieDone
_IsPortColor
_IsWindowVisible
_KeyTranslate
_KillPoly
_LMGetHiliteMode
_LMGetKeyThresh
_LMSetHiliteMode
_Line
_LocalToGlobal
_LockPixels
_MemError
_MenuKey
_ModalDialog
_MoreMasterPointers
_Move
_MoviesTask
_NavCreateGetFileDialog
_NavCreatePutFileDialog
_NavDialogDispose
_NavDialogGetReply
_NavDialogGetUserAction
_NavDialogRun
_NavDisposeReply
_NavGetDefaultDialogCreationOptions
_NavLoad
_NewAEEventHandlerUPP
_NewControlActionUPP
_NewDrag
_NewDragSendDataUPP
_NewHandle
_NewHandleClear
_NewMenu
_NewMovieFromFile
_NewNavEventUPP
_NewPMIdleUPP
_NewPtr
_NewRgn
_NewString
_OffsetRect
_OffsetRgn
_OpenMovieFile
_OpenPoly
_OpenRgn
_PMBegin
_PMBeginDocument
_PMBeginPage
_PMDefaultPageFormat
_PMDefaultPrintSettings
_PMDisposePageFormat
_PMDisposePrintSettings
_PMEnd
_PMEndDocument
_PMEndPage
_PMGetAdjustedPageRect
_PMGetCopies
_PMGetFirstPage
_PMGetGrafPtr
_PMGetLastPage
_PMGetResolution
_PMNewPageFormat
_PMNewPrintSettings
_PMPageSetupDialog
_PMPrintDialog
_PMSetCopies
_PMSetFirstPage
_PMSetIdleProc
_PMSetLastPage
_PMSetPageRange
_ParamText
_PenMode
_PenNormal
_PenPat
_PenSize
_PutScrapFlavor
_RGBBackColor
_RGBForeColor

Not Checked Yet:

_ReleaseResource
_SameProcess
_ScrollRect
_SectRect
_SectRgn
_SelectWindow
_SetA5
_SetCPixel
_SetClip
_SetControlAction
_SetControlMaximum
_SetControlMinimum
_SetControlReference
_SetControlTitle
_SetControlValue
_SetCurrentA5
_SetCursor
_SetDragImage
_SetDragItemBounds
_SetDragItemFlavorData
_SetDragSendProc
_SetEmptyRgn
_SetGWorld
_SetHandleSize
_SetMenuItemText
_SetOrigin
_SetPenState
_SetPort
_SetPortWindowPort
_SetRect
_SetRectRgn
_SetThemeBackground
_SetThemePen
_SetThemeTextColor
_SetWRefCon
_SetWTitle
_ShowControl
_ShowDragHilite
_ShowHide
_ShowWindow
_SizeControl
_SizeWindow
_StartMovie
_StillDown
_StopAlert
_StringWidth
_SysBeep
_TEFromScrap
_TETextBox
_TEToScrap
_TempNewHandle
_TestControl
_TextFace
_TextFont
_TextMode
_TextSize
_TextWidth
_TickCount
_TrackBox
_TrackControl
_TrackDrag
_TrackGoAway
_TruncString
_UnionRgn
_UnlockPixels
_UpdateGWorld
_WaitMouseMoved
_WaitMouseUp
_WaitNextEvent
_ZoomWindow
__CurrentRuneLocale
__DefaultRuneLocale
___CFStringMakeConstantString
____runetype
____tolower
____toupper
___error
___keymgr_dwarf2_register_sections
___sF
___srget
___swbuf
__cpu_has_altivec
__cthread_init_routine
__keymgr_get_and_lock_processwide_ptr
__keymgr_get_per_thread_data
__keymgr_set_per_thread_data
__keymgr_unlock_processwide_ptr

Non-capitalized (and thus not Mac Toolbox Calls):

_abort
_accept
_acos
_asin
_atan
_atan2
_atexit
_atoi
_atol
_bcopy
_bind
_bzero
_calloc
_ceil
_chdir
_chmod
_clock
_close
_closedir
_connect
_cos
_dup2
_errno
_execv
_exit
_exp
_fclose
_fcntl
_fflush
_fgetc
_fgets
_floor
_fmod
_fopen
_fork
_fprintf
_fputs
_fread
_free
_frexp
_fseek
_fstat
_ftell
_fwrite
_get_end
_get_etext
_getcwd
_getdtablesize
_getenv
_getgrgid
_gethostbyname
_getpagesize
_getpeername
_getprotobyname
_getpwnam
_getpwuid
_getrlimit
_getrusage
_getsockname
_getsockopt
_gettimeofday
_getuid
_isinf
_isnan
_ldexp
_listen
_localtime
_log
_longjmp
_lseek
_lstat
_mach_init_routine
_malloc
_memcmp
_memcpy
_memmove
_memset
_mkdir
_modf
_mprotect
_open
_opendir
_pipe
_pow
_printf
_putenv
_readdir
_readlink
_recv
_rename
_rmdir
_sbrk
_select
_send
_setitimer
_setjmp
_setsockopt
_setvbuf
_shutdown
_sigaction
_signal
_sigpending
_sigprocmask
_sigsetmask
_sin
_sleep
_socket
_sprintf
_sqrt
_sscanf
_stat
_strcasecmp
_strcat
_strchr
_strcmp
_strcpy
_strdup
_strerror
_strlen
_strncmp
_strncpy
_strrchr
_strstr
_strtod
_strtol
_syscall
_tan
_ungetc
_unlink
_vfprintf
_vsnprintf
_vsprintf
_waitpid
_write

******* 
Text of an e-mail I sent Matthew, outlining my observations about SetCurrentDC:

I'm trying to expunge the use of SetOrigin from MrEd.  As I may have
mentioned before, I'm hoping to do this by adding two instance
variables in the "appropriate" place so that calls which would
otherwise have been affected by the SetOrigin can instead move their
rectangles/regions/whatever appropriately.

SetOrigin is called now from four similar functions:
wxWindow::SetCurrentDC
wxWindow::SetCurrentMacDC
wxWindow::SetCurrentMacDCNoMargin
wxCanvasDC::SetCurrentDC

I'm trying to figure out the relative roles of all four of these, to
make sure I don't mess things up horribly.

1) wxWindow::SetCurrentDC is by far the most popular; it's called all
over the place. It sets cMacDC's currentUser to point to 'this', then
does a SetOrigin, a bunch of clip region setting, and sets the pen
mode and Text info.  Fair enough.

2) wxWindow::SetCurrentMacDC: it's comments (// kludge, since not
doing complete setup of DC) seem to indicate that the DC does not yet
exist, and it only sets the origin, it doesn't do any of the other
stuff.  It seems like a more appropriate name would be
SetCurrentDCPartial, or something...  Looking at where it's called, I
don't see a consistent pattern.  I would expect it to be used, for
instance, when the DC does not yet exist, but it crops up in
wx_button, and wx_sbar, and all over the place.

3) wxWindow::SetCurrentMacDCNoMargin: this one is also quite
confusing; it checks to see whether there is a parent area and whether
!wxSubType(__type, wxTYPE_FRAME) (presumably, whether this class is a
subtype of wxFrame); if both are true, it sets the origin as the last
one did, except that it adds cWindowX and cWindowY, which appear to be
the global coordinates of the window, before calling SetOrigin.  That
is, it uses global rather than local coordinates, but only when 'this'
is not a frame.  I'm pretty much baffled by this one.

4) wxCanvasDC::SetCurrentDC: this one is a lot like #2, except that it
sets up the clip region in a slightly different way, and it calls
wxMacSetCurrentTool.  The real question is why a canvas DC needs its
own SetCurrentDC, rather than just using the wxWindow one.

If you can shed any light on the difference between these functions,
I'd be eternally grateful...

john

********

A follow-up message:

To: Matthew Flatt <mflatt@cs.utah.edu>
From: John Clements <clements@brinckerhoff.org>
Subject: Re: why four kinds of SetCurrentDC?
Cc: 
Bcc: 
X-Attachments: 

Quoting John Clements:
> 2) wxWindow::SetCurrentMacDC: it's comments (// kludge, since not
> doing complete setup of DC) seem to indicate that the DC does not yet
> exist, and it only sets the origin, it doesn't do any of the other
> stuff.  It seems like a more appropriate name would be
> SetCurrentDCPartial, or something...  Looking at where it's called, I
> don't see a consistent pattern.  I would expect it to be used, for
> instance, when the DC does not yet exist, but it crops up in
> wx_button, and wx_sbar, and all over the place.

Maybe it's called when the current viewport is known to be the right
one already?

Thanks for the prompt reply.  No, this function checks & sets the port; that's
the one piece of code that appears verbatim in all four functions.

> 3) wxWindow::SetCurrentMacDCNoMargin:  this one is also quite
> confusing; it checks to see whether there is a parent area and
> whether !wxSubType(__type, wxTYPE_FRAME) (presumably, whether this
> class is a subtype of wxFrame); if both are true, it sets the origin
> as the last one did, except that it adds cWindowX and cWindowY, which
> appear to be the global coordinates of the window, before calling
> SetOrigin.  That is, it uses global rather than local coordinates,
> but only when 'this' is not a frame.  I'm pretty much baffled by this
> one.

I think cWindowX and cWindowY are frame-relative (or parent-relative),
rather than global. But global for frames, which is why they're not
used in that case.

Okay, thanks.  Aha, on closer scrutiny I see that this function calls
FrameContentAreaOffset on cParentArea, rather than cClient Area.  This
explains why it's the "No Margin" call.  I'm still in the dark about
cWindowX and cWindowY, though... it seems like the result of
FrameContentAreaOffset should already be relative to the frame.

> 4) wxCanvasDC::SetCurrentDC: this one is a lot like #2, except that
> it sets up the clip region in a slightly different way, and it calls
> wxMacSetCurrentTool.  The real question is why a canvas DC needs its
> own SetCurrentDC, rather than just using the wxWindow one.

Probably doesn't. Maybe having a separate one saves some
region-manipulation time, but I don't know.

Okay, thanks. So I guess my game plan now is simply to add two global
offset variables to MrEd, and consult them whenever MrEd calls a
drawing command.  This is ugly, but probably much easier (and less
error-prone) than attaching the offsets to the objects themselves and
statically determining for each drawing call which SetCurrentDC it's
downstream from.  Judging from the handling of wxTheApp, I don't need
to do anything special GC-wise to add such a global?  Is that true?

john

*********
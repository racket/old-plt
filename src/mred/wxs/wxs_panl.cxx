/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_panl.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_panel.h"
#include "wx_enhdg.h"
#include "wx_dialg.h"
#include "wx_types.h"





#include "wxscheme.h"
#include "wxs_panl.h"
#include "wxscomon.h"


#if !defined(wx_mac)
#define INTERACT_METHODS 1
#else
#define INTERACT_METHODS 0
#endif

static Scheme_Object *panelStyle_wxBORDER_sym = NULL;

static void init_symset_panelStyle(void) {
  panelStyle_wxBORDER_sym = scheme_intern_symbol("border");
}

static int unbundle_symset_panelStyle(Scheme_Object *v, const char *where) {
  if (!panelStyle_wxBORDER_sym) init_symset_panelStyle();
  Scheme_Object *i, *l = v;
  long result = 0;
  while (SCHEME_PAIRP(l)) {
  i = SCHEME_CAR(l);
  if (0) { }
  else if (i == panelStyle_wxBORDER_sym) { result = result | wxBORDER; }
  else { break; } 
  l = SCHEME_CDR(l);
  }
  if (SCHEME_NULLP(l)) return result;
  if (where) scheme_wrong_type(where, "panelStyle symbol list", -1, 0, &v);
  return 0;
}

static int istype_symset_panelStyle(Scheme_Object *v, const char *where) {
  if (!panelStyle_wxBORDER_sym) init_symset_panelStyle();
  Scheme_Object *i, *l = v;
  long result = 1;
  while (SCHEME_PAIRP(l)) {
  i = SCHEME_CAR(l);
  if (0) { }
  else if (i == panelStyle_wxBORDER_sym) { ; }
  else { break; } 
  l = SCHEME_CDR(l);
  }
  if (SCHEME_NULLP(l)) return result;
  if (where) scheme_wrong_type(where, "panelStyle symbol list", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_panelStyle(int v) {
  if (!panelStyle_wxBORDER_sym) init_symset_panelStyle();
  Scheme_Object *l = scheme_null;
  if (v & wxBORDER) l = scheme_make_pair(panelStyle_wxBORDER_sym, l);
  return l;
}



static Scheme_Object *orientation_wxVERTICAL_sym = NULL;
static Scheme_Object *orientation_wxHORIZONTAL_sym = NULL;

static void init_symset_orientation(void) {
  orientation_wxVERTICAL_sym = scheme_intern_symbol("vertical");
  orientation_wxHORIZONTAL_sym = scheme_intern_symbol("horizontal");
}

static int unbundle_symset_orientation(Scheme_Object *v, const char *where) {
  if (!orientation_wxHORIZONTAL_sym) init_symset_orientation();
  if (0) { }
  else if (v == orientation_wxVERTICAL_sym) { return wxVERTICAL; }
  else if (v == orientation_wxHORIZONTAL_sym) { return wxHORIZONTAL; }
  if (where) scheme_wrong_type(where, "orientation symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_orientation(Scheme_Object *v, const char *where) {
  if (!orientation_wxHORIZONTAL_sym) init_symset_orientation();
  if (0) { }
  else if (v == orientation_wxVERTICAL_sym) { return 1; }
  else if (v == orientation_wxHORIZONTAL_sym) { return 1; }
  if (where) scheme_wrong_type(where, "orientation symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_orientation(int v) {
  if (!orientation_wxHORIZONTAL_sym) init_symset_orientation();
  switch (v) {
  case wxVERTICAL: return orientation_wxVERTICAL_sym;
  case wxHORIZONTAL: return orientation_wxHORIZONTAL_sym;
  default: return NULL;
  }
}


/* The derivation panel -> canvas is a lie for Xt */















// @ p "on-item-event" : void OnItemEvent(wxItem!,wxMouseEvent%); ## INTERACT_METHODS
// @ p "on-item-left-click" : void OnItemLeftClick(wxItem!,int,int,int); ## INTERACT_METHODS
// @ p "on-item-right-click" : void OnItemRightClick(wxItem!,int,int,int); ## INTERACT_METHODS
// @ p "on-item-move" : void OnItemMove(wxItem!,int,int); ## INTERACT_METHODS
// @ p "on-item-size" : void OnItemSize(wxItem!,int,int); ## INTERACT_METHODS
// @ p "on-left-click" : void OnLeftClick(int,int,int); ## INTERACT_METHODS
// @ p "on-right-click" : void OnRightClick(int,int,int); ## INTERACT_METHODS










class os_wxPanel : public wxPanel {
 public:

  os_wxPanel(Scheme_Object * obj, class wxFrame* x0, int x1 = -1, int x2 = -1, int x3 = -1, int x4 = -1, int x5 = 0, string x6 = "panel");
  os_wxPanel(Scheme_Object * obj, class wxPanel* x0, int x1 = -1, int x2 = -1, int x3 = -1, int x4 = -1, int x5 = 0, string x6 = "panel");
  ~os_wxPanel();
  void OnChar(class wxKeyEvent& x0);
  void OnEvent(class wxMouseEvent& x0);
  void OnPaint();
  void OnDefaultAction(class wxItem* x0);
  void OnDropFile(pathname x0);
  Bool PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1);
  Bool PreOnChar(class wxWindow* x0, class wxKeyEvent* x1);
  void OnSize(int x0, int x1);
  void OnSetFocus();
  void OnKillFocus();
};

Scheme_Object *os_wxPanel_class;

os_wxPanel::os_wxPanel(Scheme_Object * o, class wxFrame* x0, int x1, int x2, int x3, int x4, int x5, string x6)
: wxPanel(x0, x1, x2, x3, x4, x5, x6)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPanel::os_wxPanel(Scheme_Object * o, class wxPanel* x0, int x1, int x2, int x3, int x4, int x5, string x6)
: wxPanel(x0, x1, x2, x3, x4, x5, x6)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxPanel::~os_wxPanel()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxPanel::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxPanel::OnChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxPanel::OnEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxPanel::OnEvent(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxPanel::OnPaint()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "on-paint", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxPanel::OnPaint();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxPanel::OnDefaultAction(class wxItem* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "on-default-action", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxPanel::OnDefaultAction(x0);
  } else {
  
  p[0] = objscheme_bundle_wxItem(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxPanel::OnDropFile(pathname x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "on-drop-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxPanel::OnDropFile(x0);
  } else {
  
  p[0] = objscheme_bundle_pathname((char *)x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxPanel::PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "pre-on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxMouseEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "pre-on-event in panel%"", extracting return value");
  }
}

Bool os_wxPanel::PreOnChar(class wxWindow* x0, class wxKeyEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "pre-on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxKeyEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "pre-on-char in panel%"", extracting return value");
  }
}

void os_wxPanel::OnSize(int x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "on-size", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxPanel::OnSize(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxPanel::OnSetFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "on-set-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxPanel::OnSetFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxPanel::OnKillFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxPanel_class, "on-kill-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxPanel::OnKillFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxPanelSetBackgroundColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "set-background-colour in panel%", 0);

  
  ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->SetBackgroundColour(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelGetBackgroundColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->GetBackgroundColour();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxPanelSetLabelColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "set-label-colour in panel%", 0);

  
  ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->SetLabelColour(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelGetLabelColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->GetLabelColour();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxPanelSetButtonColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxColour* x0;

  
  x0 = objscheme_unbundle_wxColour(p[0], "set-button-colour in panel%", 0);

  
  ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->SetButtonColour(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelGetButtonColour(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->GetButtonColour();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxPanelGetLabelFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxFont* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->GetLabelFont();

  
  
  return objscheme_bundle_wxFont(r);
}

#pragma argsused
static Scheme_Object *os_wxPanelSetLabelFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxFont* x0;

  
  x0 = objscheme_unbundle_wxFont(p[0], "set-label-font in panel%", 0);

  
  ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->SetLabelFont(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelGetButtonFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxFont* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->GetButtonFont();

  
  
  return objscheme_bundle_wxFont(r);
}

#pragma argsused
static Scheme_Object *os_wxPanelSetButtonFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxFont* x0;

  
  x0 = objscheme_unbundle_wxFont(p[0], "set-button-font in panel%", 0);

  
  ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->SetButtonFont(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelGetLabelPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->GetLabelPosition();

  
  
  return bundle_symset_orientation(r);
}

#pragma argsused
static Scheme_Object *os_wxPanelSetLabelPosition(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;

  
  x0 = unbundle_symset_orientation(p[0], "set-label-position in panel%");

  
  ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->SetLabelPosition(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "on-char in panel%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)->wxPanel::OnChar(*x0);
  else
    ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "on-event in panel%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)->wxPanel::OnEvent(*x0);
  else
    ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelOnPaint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)->wxPanel::OnPaint();
  else
    ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->OnPaint();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelOnDefaultAction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxItem* x0;

  
  x0 = objscheme_unbundle_wxItem(p[0], "on-default-action in panel%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)->wxPanel::OnDefaultAction(x0);
  else
    ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->OnDefaultAction(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelOnDropFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  pathname x0;

  
  x0 = (pathname)objscheme_unbundle_pathname(p[0], "on-drop-file in panel%");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)->wxPanel::OnDropFile(x0);
  else
    ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->OnDropFile(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelPreOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxMouseEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "pre-on-event in panel%", 0);
  x1 = objscheme_unbundle_wxMouseEvent(p[1], "pre-on-event in panel%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnEvent(x0, x1);
  else
    r = ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->PreOnEvent(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxPanelPreOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxKeyEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "pre-on-char in panel%", 0);
  x1 = objscheme_unbundle_wxKeyEvent(p[1], "pre-on-char in panel%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnChar(x0, x1);
  else
    r = ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->PreOnChar(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxPanelOnSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "on-size in panel%");
  x1 = objscheme_unbundle_integer(p[1], "on-size in panel%");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)->wxPanel::OnSize(x0, x1);
  else
    ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->OnSize(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelOnSetFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)->wxPanel::OnSetFocus();
  else
    ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->OnSetFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelOnKillFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxPanel *)((Scheme_Class_Object *)obj)->primdata)->wxPanel::OnKillFocus();
  else
    ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->OnKillFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelSetItemCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "set-item-cursor in panel%");
  x1 = objscheme_unbundle_integer(p[1], "set-item-cursor in panel%");

  
  ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->SetItemCursor(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanelGetCursor(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int _x0;
  int* x0 = &_x0;
  int _x1;
  int* x1 = &_x1;

  
  if (XC_SCHEME_NULLP(p[0]))
    scheme_wrong_type("get-item-cursor in panel%", "non-" XC_NULL_STR, (0 - 0), n, p);
  else
    *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "get-item-cursor in panel%"), "get-item-cursor in panel%");
  if (XC_SCHEME_NULLP(p[1]))
    scheme_wrong_type("get-item-cursor in panel%", "non-" XC_NULL_STR, (1 - 0), n, p);
  else
    *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "get-item-cursor in panel%"), "get-item-cursor in panel%");

  
  ((wxPanel *)((Scheme_Class_Object *)obj)->primdata)->GetCursor(x0, x1);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxPanel_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxPanel *realobj;
  if ((n >= 1) && objscheme_istype_wxPanel(p[0], NULL, 0)) {
    class wxPanel* x0;
    int x1;
    int x2;
    int x3;
    int x4;
    int x5;
    string x6;

    
    if ((n < 1) ||(n > 7)) 
      scheme_wrong_count("initialization in panel% (panel parent case)", 1, 7, n, p);
    x0 = objscheme_unbundle_wxPanel(p[0], "initialization in panel% (panel parent case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "initialization in panel% (panel parent case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "initialization in panel% (panel parent case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "initialization in panel% (panel parent case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_integer(p[4], "initialization in panel% (panel parent case)");
    } else
      x4 = -1;
    if (n > 5) {
      x5 = unbundle_symset_panelStyle(p[5], "initialization in panel% (panel parent case)");
    } else
      x5 = 0;
    if (n > 6) {
      x6 = (string)objscheme_unbundle_string(p[6], "initialization in panel% (panel parent case)");
    } else
      x6 = "panel";

    if (!x3) x3 = -1;if (!x4) x4 = -1;
    realobj = new os_wxPanel(obj, x0, x1, x2, x3, x4, x5, x6);
    
    
  } else  {
    class wxFrame* x0;
    int x1;
    int x2;
    int x3;
    int x4;
    int x5;
    string x6;

    
    if ((n < 1) ||(n > 7)) 
      scheme_wrong_count("initialization in panel% (frame case)", 1, 7, n, p);
    x0 = objscheme_unbundle_wxFrame(p[0], "initialization in panel% (frame case)", 0);
    if (n > 1) {
      x1 = objscheme_unbundle_integer(p[1], "initialization in panel% (frame case)");
    } else
      x1 = -1;
    if (n > 2) {
      x2 = objscheme_unbundle_integer(p[2], "initialization in panel% (frame case)");
    } else
      x2 = -1;
    if (n > 3) {
      x3 = objscheme_unbundle_integer(p[3], "initialization in panel% (frame case)");
    } else
      x3 = -1;
    if (n > 4) {
      x4 = objscheme_unbundle_integer(p[4], "initialization in panel% (frame case)");
    } else
      x4 = -1;
    if (n > 5) {
      x5 = unbundle_symset_panelStyle(p[5], "initialization in panel% (frame case)");
    } else
      x5 = 0;
    if (n > 6) {
      x6 = (string)objscheme_unbundle_string(p[6], "initialization in panel% (frame case)");
    } else
      x6 = "panel";

    if (!x3) x3 = -1;if (!x4) x4 = -1;
    realobj = new os_wxPanel(obj, x0, x1, x2, x3, x4, x5, x6);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

void objscheme_setup_wxPanel(void *env)
{
if (os_wxPanel_class) {
    objscheme_add_global_class(os_wxPanel_class, "panel%", env);
} else {
  os_wxPanel_class = objscheme_def_prim_class(env, "panel%", "canvas%", os_wxPanel_ConstructScheme, 24);

 scheme_add_method_w_arity(os_wxPanel_class, "set-background-colour", os_wxPanelSetBackgroundColour, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "get-background-colour", os_wxPanelGetBackgroundColour, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "set-label-colour", os_wxPanelSetLabelColour, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "get-label-colour", os_wxPanelGetLabelColour, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "set-button-colour", os_wxPanelSetButtonColour, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "get-button-colour", os_wxPanelGetButtonColour, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "get-label-font", os_wxPanelGetLabelFont, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "set-label-font", os_wxPanelSetLabelFont, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "get-button-font", os_wxPanelGetButtonFont, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "set-button-font", os_wxPanelSetButtonFont, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "get-label-position", os_wxPanelGetLabelPosition, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "set-label-position", os_wxPanelSetLabelPosition, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "on-char", os_wxPanelOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "on-event", os_wxPanelOnEvent, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "on-paint", os_wxPanelOnPaint, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "on-default-action", os_wxPanelOnDefaultAction, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "on-drop-file", os_wxPanelOnDropFile, 1, 1);
 scheme_add_method_w_arity(os_wxPanel_class, "pre-on-event", os_wxPanelPreOnEvent, 2, 2);
 scheme_add_method_w_arity(os_wxPanel_class, "pre-on-char", os_wxPanelPreOnChar, 2, 2);
 scheme_add_method_w_arity(os_wxPanel_class, "on-size", os_wxPanelOnSize, 2, 2);
 scheme_add_method_w_arity(os_wxPanel_class, "on-set-focus", os_wxPanelOnSetFocus, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "on-kill-focus", os_wxPanelOnKillFocus, 0, 0);
 scheme_add_method_w_arity(os_wxPanel_class, "set-item-cursor", os_wxPanelSetItemCursor, 2, 2);
 scheme_add_method_w_arity(os_wxPanel_class, "get-item-cursor", os_wxPanelGetCursor, 2, 2);


  scheme_made_class(os_wxPanel_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxPanel, wxTYPE_PANEL);

}
}

int objscheme_istype_wxPanel(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxPanel_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "panel% object or " XC_NULL_STR: "panel% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxPanel(class wxPanel *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_PANEL) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxPanel_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxPanel *objscheme_unbundle_wxPanel(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxPanel(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxPanel *)o->primdata;
  else
    return (wxPanel *)o->primdata;
}



static Scheme_Object *dialogStyle_wxNO_CAPTION_sym = NULL;

static void init_symset_dialogStyle(void) {
  dialogStyle_wxNO_CAPTION_sym = scheme_intern_symbol("no-caption");
}

static int unbundle_symset_dialogStyle(Scheme_Object *v, const char *where) {
  if (!dialogStyle_wxNO_CAPTION_sym) init_symset_dialogStyle();
  Scheme_Object *i, *l = v;
  long result = 0;
  while (SCHEME_PAIRP(l)) {
  i = SCHEME_CAR(l);
  if (0) { }
  else if (i == dialogStyle_wxNO_CAPTION_sym) { result = result | wxNO_CAPTION; }
  else { break; } 
  l = SCHEME_CDR(l);
  }
  if (SCHEME_NULLP(l)) return result;
  if (where) scheme_wrong_type(where, "dialogStyle symbol list", -1, 0, &v);
  return 0;
}

static int istype_symset_dialogStyle(Scheme_Object *v, const char *where) {
  if (!dialogStyle_wxNO_CAPTION_sym) init_symset_dialogStyle();
  Scheme_Object *i, *l = v;
  long result = 1;
  while (SCHEME_PAIRP(l)) {
  i = SCHEME_CAR(l);
  if (0) { }
  else if (i == dialogStyle_wxNO_CAPTION_sym) { ; }
  else { break; } 
  l = SCHEME_CDR(l);
  }
  if (SCHEME_NULLP(l)) return result;
  if (where) scheme_wrong_type(where, "dialogStyle symbol list", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_dialogStyle(int v) {
  if (!dialogStyle_wxNO_CAPTION_sym) init_symset_dialogStyle();
  Scheme_Object *l = scheme_null;
  if (v & wxNO_CAPTION) l = scheme_make_pair(dialogStyle_wxNO_CAPTION_sym, l);
  return l;
}




















// @ p "on-item-event" : void OnItemEvent(wxItem!,wxMouseEvent%); ## INTERACT_METHODS
// @ p "on-item-left-click" : void OnItemLeftClick(wxItem!,int,int,int); ## INTERACT_METHODS
// @ p "on-item-right-click" : void OnItemRightClick(wxItem!,int,int,int); ## INTERACT_METHODS
// @ p "on-item-move" : void OnItemMove(wxItem!,int,int); ## INTERACT_METHODS
// @ p "on-item-size" : void OnItemSize(wxItem!,int,int); ## INTERACT_METHODS
// @ p "on-left-click" : void OnLeftClick(int,int,int); ## INTERACT_METHODS
// @ p "on-right-click" : void OnRightClick(int,int,int); ## INTERACT_METHODS

class os_wxDialogBox : public wxDialogBox {
 public:

  os_wxDialogBox(Scheme_Object * obj, class wxWindow* x0, nstring x1, Bool x2 = FALSE, int x3 = 300, int x4 = 300, int x5 = 500, int x6 = 500, int x7 = 0, string x8 = "dialogBox");
  ~os_wxDialogBox();
  void OnDefaultAction(class wxItem* x0);
  void OnChar(class wxKeyEvent& x0);
  void OnEvent(class wxMouseEvent& x0);
  void OnPaint();
  void OnDropFile(pathname x0);
  Bool PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1);
  Bool PreOnChar(class wxWindow* x0, class wxKeyEvent* x1);
  void OnSize(int x0, int x1);
  void OnSetFocus();
  void OnKillFocus();
  Bool OnClose();
  void OnActivate(Bool x0);
};

Scheme_Object *os_wxDialogBox_class;

os_wxDialogBox::os_wxDialogBox(Scheme_Object * o, class wxWindow* x0, nstring x1, Bool x2, int x3, int x4, int x5, int x6, int x7, string x8)
: wxDialogBox(x0, x1, x2, x3, x4, x5, x6, x7, x8)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxDialogBox::~os_wxDialogBox()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxDialogBox::OnDefaultAction(class wxItem* x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-default-action", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnDefaultAction(x0);
  } else {
  
  p[0] = objscheme_bundle_wxItem(x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxDialogBox::OnChar(class wxKeyEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnChar(x0);
  } else {
  
  p[0] = objscheme_bundle_wxKeyEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxDialogBox::OnEvent(class wxMouseEvent& x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnEvent(x0);
  } else {
  
  p[0] = objscheme_bundle_wxMouseEvent(&x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxDialogBox::OnPaint()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-paint", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnPaint();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxDialogBox::OnDropFile(pathname x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-drop-file", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnDropFile(x0);
  } else {
  
  p[0] = objscheme_bundle_pathname((char *)x0);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxDialogBox::PreOnEvent(class wxWindow* x0, class wxMouseEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "pre-on-event", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxMouseEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "pre-on-event in dialog-box%"", extracting return value");
  }
}

Bool os_wxDialogBox::PreOnChar(class wxWindow* x0, class wxKeyEvent* x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "pre-on-char", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return FALSE;
  } else {
  
  p[0] = objscheme_bundle_wxWindow(x0);
  p[1] = objscheme_bundle_wxKeyEvent(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "pre-on-char in dialog-box%"", extracting return value");
  }
}

void os_wxDialogBox::OnSize(int x0, int x1)
{
  Scheme_Object *p[2];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-size", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnSize(x0, x1);
  } else {
  
  p[0] = scheme_make_integer(x0);
  p[1] = scheme_make_integer(x1);
  

  v = scheme_apply(method, 2, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxDialogBox::OnSetFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-set-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnSetFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

void os_wxDialogBox::OnKillFocus()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-kill-focus", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnKillFocus();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

Bool os_wxDialogBox::OnClose()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-close", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
return wxDialogBox::OnClose();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return objscheme_unbundle_bool(v, "on-close in dialog-box%"", extracting return value");
  }
}

void os_wxDialogBox::OnActivate(Bool x0)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  mz_jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxDialogBox_class, "on-activate", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
    if (sj) {
      COPY_JMPBUF(scheme_error_buf, savebuf);
      scheme_clear_escape();
    }
  } else sj = 1;
  if (sj) {
wxDialogBox::OnActivate(x0);
  } else {
  
  p[0] = (x0 ? scheme_true : scheme_false);
  

  v = scheme_apply(method, 1, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnDefaultAction(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxItem* x0;

  
  x0 = objscheme_unbundle_wxItem(p[0], "on-default-action in dialog-box%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnDefaultAction(x0);
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnDefaultAction(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxKeyEvent* x0;

  
  x0 = objscheme_unbundle_wxKeyEvent(p[0], "on-char in dialog-box%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnChar(*x0);
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnChar(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxMouseEvent* x0;

  
  x0 = objscheme_unbundle_wxMouseEvent(p[0], "on-event in dialog-box%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnEvent(*x0);
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnEvent(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnPaint(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnPaint();
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnPaint();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnDropFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  pathname x0;

  
  x0 = (pathname)objscheme_unbundle_pathname(p[0], "on-drop-file in dialog-box%");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnDropFile(x0);
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnDropFile(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxPreOnEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxMouseEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "pre-on-event in dialog-box%", 0);
  x1 = objscheme_unbundle_wxMouseEvent(p[1], "pre-on-event in dialog-box%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnEvent(x0, x1);
  else
    r = ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->PreOnEvent(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxPreOnChar(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxWindow* x0;
  class wxKeyEvent* x1;

  
  x0 = objscheme_unbundle_wxWindow(p[0], "pre-on-char in dialog-box%", 0);
  x1 = objscheme_unbundle_wxKeyEvent(p[1], "pre-on-char in dialog-box%", 0);

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)-> wxWindow::PreOnChar(x0, x1);
  else
    r = ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->PreOnChar(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  x0 = objscheme_unbundle_integer(p[0], "on-size in dialog-box%");
  x1 = objscheme_unbundle_integer(p[1], "on-size in dialog-box%");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnSize(x0, x1);
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnSize(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnSetFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnSetFocus();
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnSetFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnKillFocus(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnKillFocus();
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnKillFocus();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnClose(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnClose();
  else
    r = ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnClose();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxDialogBoxOnActivate(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  Bool x0;

  
  x0 = objscheme_unbundle_bool(p[0], "on-activate in dialog-box%");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->wxDialogBox::OnActivate(x0);
  else
    ((wxDialogBox *)((Scheme_Class_Object *)obj)->primdata)->OnActivate(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxDialogBox_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxDialogBox *realobj;
  class wxWindow* x0;
  nstring x1;
  Bool x2;
  int x3;
  int x4;
  int x5;
  int x6;
  int x7;
  string x8;

  
  if ((n < 2) ||(n > 9)) 
    scheme_wrong_count("initialization in dialog-box%", 2, 9, n, p);
  x0 = objscheme_unbundle_wxWindow(p[0], "initialization in dialog-box%", 1);
  x1 = (nstring)objscheme_unbundle_nullable_string(p[1], "initialization in dialog-box%");
  if (n > 2) {
    x2 = objscheme_unbundle_bool(p[2], "initialization in dialog-box%");
  } else
    x2 = FALSE;
  if (n > 3) {
    x3 = objscheme_unbundle_integer(p[3], "initialization in dialog-box%");
  } else
    x3 = 300;
  if (n > 4) {
    x4 = objscheme_unbundle_integer(p[4], "initialization in dialog-box%");
  } else
    x4 = 300;
  if (n > 5) {
    x5 = objscheme_unbundle_integer(p[5], "initialization in dialog-box%");
  } else
    x5 = 500;
  if (n > 6) {
    x6 = objscheme_unbundle_integer(p[6], "initialization in dialog-box%");
  } else
    x6 = 500;
  if (n > 7) {
    x7 = unbundle_symset_dialogStyle(p[7], "initialization in dialog-box%");
  } else
    x7 = 0;
  if (n > 8) {
    x8 = (string)objscheme_unbundle_string(p[8], "initialization in dialog-box%");
  } else
    x8 = "dialogBox";

  if (x0 && !wxSubType(((wxObject *)x0)->__type, wxTYPE_FRAME) && !wxSubType(((wxObject *)x0)->__type, wxTYPE_DIALOG_BOX)) scheme_wrong_type(METHODNAME("dialog-box%","initialization"), "frame or dialog box", 0, n, p);if (!x5) x5 = -1;if (!x6) x6 = -1;
  realobj = new os_wxDialogBox(obj, x0, x1, x2, x3, x4, x5, x6, x7, x8);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

void objscheme_setup_wxDialogBox(void *env)
{
if (os_wxDialogBox_class) {
    objscheme_add_global_class(os_wxDialogBox_class, "dialog-box%", env);
} else {
  os_wxDialogBox_class = objscheme_def_prim_class(env, "dialog-box%", "panel%", os_wxDialogBox_ConstructScheme, 12);

 scheme_add_method_w_arity(os_wxDialogBox_class, "on-default-action", os_wxDialogBoxOnDefaultAction, 1, 1);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-char", os_wxDialogBoxOnChar, 1, 1);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-event", os_wxDialogBoxOnEvent, 1, 1);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-paint", os_wxDialogBoxOnPaint, 0, 0);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-drop-file", os_wxDialogBoxOnDropFile, 1, 1);
 scheme_add_method_w_arity(os_wxDialogBox_class, "pre-on-event", os_wxDialogBoxPreOnEvent, 2, 2);
 scheme_add_method_w_arity(os_wxDialogBox_class, "pre-on-char", os_wxDialogBoxPreOnChar, 2, 2);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-size", os_wxDialogBoxOnSize, 2, 2);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-set-focus", os_wxDialogBoxOnSetFocus, 0, 0);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-kill-focus", os_wxDialogBoxOnKillFocus, 0, 0);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-close", os_wxDialogBoxOnClose, 0, 0);
 scheme_add_method_w_arity(os_wxDialogBox_class, "on-activate", os_wxDialogBoxOnActivate, 1, 1);


  scheme_made_class(os_wxDialogBox_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxDialogBox, wxTYPE_DIALOG_BOX);

}
}

int objscheme_istype_wxDialogBox(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxDialogBox_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "dialog-box% object or " XC_NULL_STR: "dialog-box% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxDialogBox(class wxDialogBox *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_DIALOG_BOX) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxDialogBox_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxDialogBox *objscheme_unbundle_wxDialogBox(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxDialogBox(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxDialogBox *)o->primdata;
  else
    return (wxDialogBox *)o->primdata;
}



_texpict_ is a MzScheme/MrEd utility for creating pictures using a
MrEd dc<%> (including post-script-dc% for _PostScript_ output) or
_LaTeX_ as the back-end. The library was originally designed for LaTeX
output, hence the name.

Pictures are created as `pict' structures. Some procedures in the
texpict library create new simple picts (e.g., `hline'). Others build
new picts out of existing picts (e.g., `ht-append'). In the latter
case, the embedded picts retain their identity, so that offset-finding
functions (e.g., `find-lt') can find the offset of an embedded pict in
a larger pict.

A pict has the following structure:
                w
        ------------------
       |                  | a  \
       |------------------|    |
       |                  |    | h
       |------------------|    |
       |                  | d  /
        ------------------     
For a single text line, d is descent below the baseline and
a + d = h. For multiple text lines (created with vX-append), a is 
ascent of top line above baseline and d is descent of bottom line,
so a + d < h. Most other boxes have d = 0 and a = h.

The size information for a pict is computed when the pict is
created. This strategy supports programs that create new picts though
arbitrarily complex computations on the size and shape of existing
picts. However, it also means that a pict cannot be generated before
its target device is known.

A slightly different set of picture-making function are available for
MrEd and LaTeX output. For example, the LaTeX set includes `tex',
which accepts a string of arbitrary LaTeX code, and the MrEd set
includes `dc', which accepts an arbitrary Scheme procedure for drawing
to a dc<%>.

When creating pictures with `picture' or `cons-picture', or when
finding relative picture locations with `find-lt', etc., the coordiate
system is upside-down: (0, 0) is in the lower left.

MrEd (or PostScript) output
---------------------------

The MrEd texpict function set is loaded by the _mrpict.ss_ library.
The library is available in unit form via _mrpictr.ss_, which produces
a unit importing mred^. The _mrpicts.ss_ library file defines the
unit's signature.

When creating a picture for a MrEd dc<%> that contains text, texpict
needs a drawing context for measuring the text. Provide a dc<%> before
constructing pictures via the `dc-for-text-size' parameter. The dc<%>
should have the same text-measuring results as the destination dc<%>;
in particular, use a post-script-dc% for preparing PostScript output,
and a bitmap-dc% will work fine for bitmap-dc% or canvas% output.

The `draw-pict' function takes a picture, a device context

 ;; Example of prodcuing PostScript output
 (require (lib "mrpict.ss" "texpict"))

 ;; Create PS context
 (define ps-dc (make-object post-script-dc%))
 (send ps-dc start-doc "Pict output")
 (send ps-dc start-page)

 ;; Install context for sizing
 (dc-for-text-size ps-dc)

 ;; Create the pict
 (define p ...)

 ;; Output pict
 (draw-pict p ps-dc 0 0)
 (send ps-dc end-page)
 (send ps-dc end-doc))

If the output dc<%> has a "user scale", it is not reflected in the
size information reported for pictures. This is consistent with MrEd's
usual policy for reporting size information.

LaTeX output
------------

The LaTeX texpict function set is loaded by the _texpict.ss_ library.
The library is available in unit form via _texpictr.ss_, which
produces a unit with no imports. The _texpicts.ss_ library file
defines the unit's signature.

To create a LaTeX picture, assemble a pict and then
call `pict->string'. This string can be `display'ed to obtain the
LaTeX code, which is usually of the form:
   \begin{picture} ... \end{picture}
When using colors, the output may be of the form:
   \special{color push ...} ... \special{color pop ...}
so consider putting the output in an \hbox{} when using color.

The `tex' function creates a pict given an arbitrary LaTeX
expression as a string. Initially, `tex' guess at the size of the
resulting pict. (It always guesses 10 x 10.) The LaTeX expression
generated for a `tex' pict causes information to be written to an
auxilliary file when LaTeX evaluates the expression. If you use
`tex' boxes, then:

   * Use the package "mztp.sty" at the start of your LaTeX
     document "X.tex".
   * In the MzScheme code creating `tex' picts, call
     (read-in-sizes "X.mztp") before calling `tex'.
   * Run the texpict-LaTeX cycle twice to get properly
     draw pictures.

texpict keys `tex' size information on the exact LaTeX expression
provided to `tex'. If you use a single `tex' pict in two different
contexts where the provided expression produces differently sized
output, texpict will not distinguish the uses (and the size of the
first instance of the pict will be used) by default. The
`serialize-tex-picts' parameter can solve this problem, but
serialization requires that the output is built in exactly the same
order every time, and generally requires more texpict-tex cycles to
reach a fixed point after a small change to the output. The
`tex-series-prefix' parameter may be used to explicitly tag `tex'
sequences in different contexts.

For LaTeX output, all positions and sizes must be specified as exact
integers, but texpict does not check that exact integers are supplied.

------------------------------------------------------------
Structures
------------------------------------------------------------

A pict is an instance of the `pict' structure type:

> struct:pict :: (struct pict (draw width height ascent descent children))

The `children' field is a list of `child' structures:

> struct:child :: (struct child (pict dx dy))

------------------------------------------------------------
Procedures
------------------------------------------------------------

   ;; -- MrEd only --
   ;; Parameter specifying the dc<%> to use for measuring text.
   ;; Default: #f
>  dc-for-text-size

   ;; -- LaTeX only --
   ;; Load `tex' pict size information generated by a LaTeX run.
>  read-in-sizes  ; string -> void

   ;; -- LaTeX only --
   ;; Parameter specifying whether to produce LaTeX commands to
   ;; produce size information for a future run.
   ;; Default: #t
>  output-measure-commands

   ;; -- LaTeX only --
   ;; Parameter specifying whether the `pict2e' package is active.
   ;; Default: #f
>  using-pict2e-package

   ;; -- LaTeX only --
   ;; Parameter specifying whether to draw precise lines for `connect'
   ;; with bezier curves. The value is a Boolean or a procedure that
   ;; takes a length and returns the number of points to use.
   ;; Default: #f
>  draw-bezier-lines

   ;; -- LaTeX only --
   ;; Parameter to use the old implementation of `connect'.
   ;; Default: #f
>  use-old-connect

   ;; -- LaTeX only --
   ;; Parameter specifying a string to embed in the sizing key for a
   ;; pict created with `tex'. The prefix is applied when the `tex'
   ;; pict is created. Turning on the `serialize-tex-picts' parameter
   ;; effectively generates a new series prefix for every `tex' pict.
   ;; Default: #f
>  tex-series-prefix
   
   ;; -- LaTeX only --
   ;; Parameter specifying whether to assign serial numbers to
   ;; `tex'-generated strings for sizing purposes. Serial numbers
   ;; allow the same tex string to be used in multiple contexts, but
   ;; the output must be built in the same order every time.
   ;; Default: #f
>  serialize-tex-picts

   ;; Parameter specifying whether to draw in B&W or color (when
   ;; `colorize' is used).
   ;; Default: #f
>  black-and-white

   ;; Find an embedded picture; see bottom for the definition of pict-path
>  find-lt  ; (left & top)  ; pict pict-path -> dx dy
>  find-lc  ; (left & vertical center)
>  find-lb  ; (left & bottom)
>  find-ltl ; (left and top baseline)
>  find-lbl ; (left and bottom baseline)
>  find-ct  ; (horizontal center & top)
>  find-cc
>  find-cb
>  find-ctl
>  find-cbl
>  find-rt
>  find-rc
>  find-rb
>  find-rtl
>  find-rbl

   ;; Create a new pict that hides the given pict from find-XX
>  launder  ; pict -> pict

   ;; Create an empty pict
>  blank        ; -> pict
                ; s -> pict ; s is side length of square
                ; w h -> pict
                ; w h d -> pict

   ;; -- LaTeX only --
   ;; Create picts from LaTeX code
>  tex               ; string -> pict
>  text-line         ; string -> pict
>  text-line/phantom ; string string -> pict
>  tex-paragraph     ; w string ['top|'bottom] -> pict

   ;; -- MrEd only --
   ;; Create a pict from a string, style, and size.
   ;;  A style is one of
   ;;    null (the default, same a 'default),
   ;;    a font% object,
   ;;    a font family symbol (e.g., 'roman),
   ;;    a font face string (e.g., "-adobe-symbol"),
   ;;    `(bold . ,style),
   ;;    `(italic . ,style), 
   ;;    `(subscript . ,style), or
   ;;    `(supersript . ,style).
   ;;  A size is an exact number in [1, 255] in pixels; the
   ;;   default size is 12, but the size is ignored if
   ;;   a font% object is provided in the style.
>  text      ; string [style [size]] -> pict
   ;; Same, but use small caps:
>  caps-text ; string [style [size]] -> pict
   ;; A parameter used to refine text measurements to better
   ;; match an expected scaling of the image:
>  current-expected-text-scale ; -> (list num num)
                               ; (list num num) -> void

   ;; -- MrEd only --
   ;; Create an arbitrary self-rendering pict.  The arguments to the
   ;; rendering procedure will be a device context and top-left
   ;; location for drawing.
   ;;
   ;; When the rendering procedure is called, the current pen and
   ;; brush will be solid and in the pict's color (and linewidth), and
   ;; the scale and offset of the dc will be set. The text mode will
   ;; be transparent, but the font and colors are not guaranteed to be
   ;; anything in particular.
>  dc      ; (dc<%> dx dy -> void) w h a d -> pict

   ;; -- LaTeX only --
   ;; Delimitters to go around height h (result is taller than h;
   ;;  try h/2)
>  left-brace     ; h -> pict
>  right-brace    ; h -> pict
>  left-delimit   ; str h -> pict
>  right-delimit  ; str h -> pict
>  middle-delimit ; str h -> pict
   ;; Delimitter to go around width w (result is w wide)
>  top-brace      ; w -> pict
>  bottom-brace   ; w -> pict

   ;; Truncates picture, removing descent part
>  clip-descent   ; pict -> pict

   ;; Lifts picture relative to its baseline, extending
   ;;  the height if necessary
>  lift           ; pict n -> pict

   ;; Drops picture below its ascent line, extending
   ;;  the height if necessary
>  drop           ; pict n -> pict

   ;; Extends picture size; ascent and descent are
   ;;  extended, too
>  inset          ; pict i -> pict
                  ; pict hi vi -> pict
                  ; pict l t r b -> pict

>  hline        ; w h -> pict
>  dash-hline   ; w h seg-length -> pict ; default seg-length is 5
>  vline        ; w h -> pict
>  dash-vline   ; w h seg-length -> pict ; default seg-length is 5
   ;; To draw other kinds of lines, use `picture' or `cons-picture'

>  frame        ; pict -> pict
>  dash-frame   ; pict seg-length -> pict ; default seg-length is 5
>  oval         ; pict -> pict
>  oval/radius  ; pict r -> pict ; r is radius of corners

   ;; Creates a fairly round circle using four splines:
>  big-circle   ; diameter -> pict

   ;; Set the line thickness for a picture. For MrEd output,
   ;; selects between a pen width of 0 or 1.
>  thick       ; pict -> pict
>  thin        ; pict -> pict

   ;; -- MrEd only --
   ;; Set a specific pen width for drawing.
>  linewidth   ; w pict -> pict

   ;; Make a container picture that doesn't draw the child picture,
   ;; but uses the child's size
>  ghost        ; pict -> pict

   ;; Make a UML-like record picture, where the
   ;; first argument is the title and the rest are fields.
>  record       ; pict pict ... -> pict

   ;; Make a new picture as a column (vX-append) or row (hX-append)
   ;; of other pictures. Different procedures align pictures in the
   ;; orthogonal direction in different ways; e.g, vl-append left-aligns
   ;; all of the pitures. A specified amount of space is inserted
   ;; between each pair of pictures in making the column or row.
>  vl-append    ; [d] pict ... -> pict ; d units between each picture
>  vc-append                           ;  default=0
>  vr-append
>  ht-append
>  hc-append
>  hb-append
>  htl-append       ; align bottoms of ascents
>  hbl-append       ; align tops of descents (normal text alignment)

   ;; Make a new picture by superimposing a set of pictures. The
   ;; alignment indicators are essentially as above: horizontal
   ;; alignment then vertical alignment.
>  lt-superimpose ; pict ... -> pict
>  lb-superimpose
>  lc-superimpose
>  ltl-superimpose
>  lbl-superimpose
>  rt-superimpose
>  rb-superimpose
>  rc-superimpose
>  rtl-superimpose
>  rbl-superimpose
>  ct-superimpose
>  cb-superimpose
>  cc-superimpose
>  ctl-superimpose
>  cbl-superimpose

   ;; Make a table given a list of picts. The list is a
   ;; concatentation of rows (which means that a Scheme `list' call
   ;; can be formatted to reflect the shape of the output table).
   ;;
   ;; The col-aligns, row-aligns, col-seps, and row-seps arguments are
   ;; `lists' specifying the row and columns alignments separation
   ;; between rows and columns.  For C columns and R rows, the first
   ;; two should have C and R superimpose procedures, and the last two
   ;; should have C - 1 and R - 1 numbers, respectively. The lists can
   ;; be improper (e.g. just a number), in which case the non-pair cdr
   ;; is used as the value for all remaining list items that were
   ;; expected. The alignment procedures are used to superimpose all
   ;; of the cells in a column or row; this superimposition determines
   ;; the total width oir height of the column or row, and also
   ;; determines the horizontal or vertical placement of each cell in
   ;; the column or row.
>  table ; ncols pict-list col-aligns row-aligns col-seps row-seps -> pict

   ;; Apply a color to a picture. If the given picture has a colorized
   ;; sub-picture, the color of the sub-picture is not affected.
   ;; Be sure to use the LaTeX package `colordvi'.
>  colorize ; pict color-string -> pict

   ;; -- MrEd only --
   ;; same as above, except uses the color% object instead of a string
   ;; to indicate the color of the pict.
>  colorize ; pict color% -> pict

   ;; Describe a picture with low-level commands; see below.
>  picture      ; w h command-list -> pict

   ;; Create a new picture by `cons'ing drawing commands onto
   ;; an existing picture. `cons-picture*' maintains the pict's
   ;; descent and ascent.
>  cons-picture ; pict command-list -> pict
>  cons-picture* ; pict command-list -> pict

   ;; -- LaTeX only --
   ;; Generate the LaTeX code for a pict.
>  pict->string ; pict -> string

   ;; -- MrEd only --
   ;; Opens a frame that displays the pict.
   ;; The frame adds one method: 
   ;;   set-pict : pict -> void
   ;; that changes the visible pict.
   ;; the optional w and h arguments must
   ;; be either numbers of #f. If numbers,
   ;; the window is at least that size
   ;; and the pict is drawn in the middle of
   ;; the window.
>  show-pict ; pict [w h] -> void

   ;; -- MrEd only --
   ;; Draw a pict to a dc<%>
>  draw-pict ; pict dc x y -> void

   ;; -- MrEd only --
   ;; Generate a pict-drawer procedure for multiple renderings of a
   ;; pict (much faster than repeated calls to draw-pict)
>  make-pict-drawer ; pict -> (dc x y -> void)

------------------------------------------------------------
Picture Paths, Command, Putables, and Drawables
------------------------------------------------------------

pict-path:

   pict
   non-empty-pict-path-list

commands:

   ;; These commands use LaTeX-style coordinates: bottom-left
   ;; is (0, 0).

   `(place ,x ,y ,pict)
   `(put ,x ,y ,putable)
   
   ;; The varieties of `connect' commands are for LaTeX, where
   ;; lines are constrained to a small set of allowed angles.
   ;; For MrEd, all of the commands below act the same, and produce
   ;; liens with precisely the requested angle.

   `(connect ,x1 ,y1 ,x2 ,y2 ,bool)         ; line or vector; bool => vector;
                                            ;   from (x1,y1) to (~x2,~y2)
                                            ;   as close as possible
                                            ;   (synonym for connect~xy with 
                                            ;   an infinite tolerance when
                                            ;   draw-bezier-lines is #f, or
                                            ;   for curve when draw-bezier-lines
                                            ;   is #t)
   `(dconnect ,x ,y ,dx ,dy ,bool)          ; line or vector; bool => vector;
                                            ;   from (x,y) to (~(x+dx),~(y+dy))
                                            ;   as close as possible (uses
                                            ;   connect)
   `(connect~y ,tol ,x1 ,y2 ,x2 ,y2 ,bool)  ; sequence of lines from
                                            ;  (~x1,~y1) to (~x2,~y2) where
                                            ;  either: 
                                            ;    1) ~x2=x2 and |~y2-y2|<tol
                                            ;    2) ~y2=y2 and |~x2-x2|<tol and 
                                            ;       the final line is vertical
   `(connect~x ,tol ,x1 ,y2 ,x2 ,y2 ,bool)  ; like connect~y, but either:
                                            ;    1) ~x2=x2 and |~y2-y2|<tol
                                            ;       the final line is horizontal
                                            ;    2) ~y2=y2 and |~x2-x2|<tol
   `(connect~xy ,tol ,x1 ,y2 ,x2 ,y2 ,bool) ; like connect~y, but either:
                                            ;    1) ~x2=x2 and |~y2-y2|<tol
                                            ;       the final line is horizontal
                                            ;    2) ~y2=y2 and |~x2-x2|<tol
                                            ;       the final line is vertical
                                            ;    3) |(x2,y2)-(~x2,~y2)|<tol
   `(curve ,x1 ,y1 ,x2 ,y2 ,xc ,yc ,d)      ; bezier curve; d is optional density
                                            ;  for LaTeX; the default d is 1.0

  [Notes: curve can generate more precise lines than connect~, but it usually 
          requires more LaTeX memory.]

putables:

   draw
   `(line ,dh ,dv ,hlen)       ; LaTeX-style line - slope and size is limited
   `(vector ,dh ,dv ,hlen)     ; LaTeX-style vector - slope and size is limited
   `(circle ,d)                ; LaTeX-style circle - size is limited
   `(circle* ,d)
   `(frame ,draw)
   `(colorbox ,color-str ,draw)
   `(oval ,str ,w ,h)  ; str is portion a la LaTeX: e.g., "" or "[bl]";
                       ;  the oval is centered at the put position, instead of
                       ;  bl-aligned
   ; plus some more undocumented ones...

draws:

   string ; latex string
   `(picture ,w ,h ,@command-list)
   `(color ,color-string ,draw)
   `(thickness ,thickness ,draw) ; thickness is thicklines or thinlines

------------------------------------------------------------
Additional MrEd Utilities
------------------------------------------------------------

The _utils.ss_ library provides additional drawing procedures for MrEd
(not LaTeX) output. [It is not currently provided in unit form, though
it should be.]

  ;; Like `cons-picture', but the newly consed commands get a
  ;; color
> cons-colorized-picture  ; pict color-string command-list -> pict

  ;; Like `frame' and `dash-frame', but the frame gets a color and
  ;; optional line width
> color-frame             ; pict color-string -> pict
                          ; pict color-string line-w -> pict
> color-dash-frame        ; pict seg-length color-string -> pict
                          ; pict seg-length color-string line-w -> pict

  ;; Rounded frames
> round-frame             ; pict -> pict
> color-round-frame       ; pict color-string -> pict
                          ; pict color-string line-w -> pict

  ;; Unfilled and filled circles; works for all sizes.
> circle                  ; diameter -> pict
> disk                    ; diameter -> pict

  ;; Unfilled and filled ellipses; works for all sizes.
> ellipse                 ; width height -> pict
> filled-ellipse          ; width height -> pict

  ;; Unfilled and filled rectangle; works for all sizes.
> rectangle               ; width height -> pict
> filled--rectangle        ; width height -> pict

  ;; Creates an arrow or arrowhead in the specific direction
  ;;  within a size x size pict. (Points on the arrow may
  ;;  extend slightly beyond the box.)
> arrow                   ; size radians -> pict
> arrowhead               ; size radians -> pict

  ;; Creates a line with arrowhead(s) as a 0-sized picture (suitable
  ;; for use with `put'). The 0-sized picture contains the starting
  ;; point.
> arrow-line              ; dx dy size -> pict
> arrows-line             ; dx dy size -> pict
	   
  ;; Conses a line or line-with-arrows onto a pict, using
  ;; one of the sub-pict-finding functions (e.g., `find-tc')
  ;; to extract the source and destination of the line.
> add-line                ; pict src-pict (pict -> x y)
                          ;      dest-pict (pict -> x y)
                          ;      [line-w [color-string]] -> pict
> add-arrow-line          ; arrow-size pict src-pict (pict -> x y)
                          ;      dest-pict (pict -> x y)
                          ;      [line-w [color-string]] -> pict
> add-arrows-line         ; arrow-size pict src-pict (pict -> x y)
                          ;      dest-pict (pict -> x y)
                          ;      [line-w [color-string]] -> pict

  ;; Loads a bitmap into a pict
> bitmap                  ; filename -> pict
> bitmap                  ; bitmap%-object -> pict

  ;; Scales a pict (by adjusting the destination dc<%>'s
  ;; scale while drawing the pict.
> scale                   ; pict factor -> pict
> scale                   ; pict x-factor y-factor -> pict

  ;; Scales a color, making it brighter or darker. If the
  ;; factor is < 1, the color is darkened by multiplying
  ;; the RGB components by the factor. If the factor is > 1,
  ;; the color is lightened by dividing the gap between
  ;; the RGB components and 255 by the factor.
> scale-color             ; factor string-or-color% -> color%

  ;; Gets an immutable pen% from the-pen-list
> find-pen                ; string-or-color% [size [style]] -> pen%
                          ;   size defaults to 1
                          ;   style defaults to 'solid

  ;; Gets an immutable brush from the-brush-list
> find-brush              ; string-or-color% [style] -> brush%
                          ;   style defaults to 'solid


  ;; Calls a drawing function multiple times, gradually
  ;; changing the pen/brush color for each call. The
  ;; step count and step delta should be exact numbers;
  ;; the procedure is called with each number from 0 to 
  ;; the step count, using the step delta. For the first
  ;; call, the current pen and/or brush color matches the
  ;; starting color; for the last call, it matches the
  ;; ending color; and for intermediate calls, the color
  ;; is an intermediate color.
> color-series            ; dc<%> num-steps step-delta
                          ;  start-color-or-string%
                          ;  end-color-or-string%
                          ;  (num -> any)
                          ;  set-pen? set-brush?

  ;; Fluffy cloud; default color is "gray".
> cloud                   ; w h -> pict
                          ; w h color-string -> pict

  ;; Creates a MacOS-like file icon, optionally shaded
> file-icon               ; w h gray [fancy?] -> pict
                          ;   gray = #f -> white
                          ;   gray = #t -> default color
                          ;   gray = color/string -> uses color

  ;; Creates a jack-o-lantern; use the same pumkin-color and
  ;; face color to get a plain pumpkin. The size is the width.
> jack-o-lantern          ; size [pumpkin-color face-color] -> pict

  ;; Creates an angel wing, left or right, or any size.
  ;; The color and pen width for drawing the wing outline is the
  ;; current one.
> angel-wing              ; w h left? -> pict

------------------------------------------------------------
_slideshow-run.ss_ and _slideshow.ss_
------------------------------------------------------------

Overview
========

The "slideshow-run.ss" library acts as a language (an extension of
MzScheme) for defining a slide presentation. The "slideshow.ss"
library is like "slideshow-run.ss", except that it can be used by
utility modules (i.e., other than the main module of a presentation)
to get access to all of the Slideshow functions.

Slide images are generated as picts, using the "mrpict.ss" functions
defined above; the "slideshow-run.ss" and "slideshow.ss" module
exports everything provided by "mrpict.ss" and "utils.ss".

The main Slideshow function is `slide/title', which adds a slide to
the presentation with a given title and content. For example, the
Hello World presentation can be defined by the following module:

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (slide/title
    "How to Say Hello"
    (t "Hello World!")))
 
The `t' function creates a pict containing the given text in the
default font and style.

Executing the above module pops up a slide-presentation window. Type
Alt-q (or Meta-q) to end the slides. More controls:

    Alt-q or Meta-q               :  end slide show
    Right arrow, Space, f, or n   :  next slide
    Left arrow or b               :  previous slide
    g                             :  last slide
    1                             :  first slide
    Alt-g or Meta-g               :  select a slide

In general, each element after the title string for `slide/title' is a
pict that will be centered on the slide. The picts are stacked
verically and top-aligned, with `gap-size' separation between each
pict.

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (slide/title
    "How to Say Hello"
    (t "Hello World!")
    (t "Goodbye Dlrow!")))

The `slide/title/center' form centers the stacked picts vertically
instead of putting them at the top of the slide:

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (slide/title/center
    "How to Say Hello"
    (t "Hello World!")
    (t "Goodbye Dlrow!")))

Various functions format paragraphs and generate bullted items for
lists. For example, `item/page' creates a bulleted paragraph that
spaces the width of the slide:

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (slide/title
    "How to Say Hello"
    (page-item "If you want to create an example, you"
               "can always do something with" (bt "Hello World!"))
    (page-item "It's a bit silly, but a follow-up example"
               "could be" (bt "Goodbye Dlrow!"))))

In this example, `bt' is like `t', except that it makes the text bold.
The `page-item' function accepts a mixture of strings and picts, and
it formats them as a paragraph.

Staging Slides
==============

The `slide/title' function creates a slide as a side-effect. It can be
put inside a function to abstract over a slide:

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (define (make-slide-n n)
     (slide/title
      "How to Generalize Slides"
      (page-item "This is slide number" (number->string n))))

   (make-slide-n 1)
   (make-slide-n 2)
   (make-slide-n 3))

The `slide/title' function also has built-in support for some common
multi-slide patterns. Each element argument to `slide/title' after the
title is usually a pict, but there are a few other possibilities:

  * If an element is 'next, then a slide is generated containing only
    the preceeding elements, and then the <elems> are re-processed
    without the 'next. Multiple 'next elements generate multiple slides.

  * If an element is 'alts, then the next element must be a list of
    element lists. Each list up to the last one is appended to the
    elements before 'alts and the resulting list of elements is
    processed. The last lists is appended to the preceeding elements
    along with the remaining elements (after the list of lists) and the
    result is re-processed.

  * A 'nothing element is ignored (useful as a result of a branching
    expression).

  * 'next! is like 'next, except that it is preserved when consensing
    (see below on the --condense flag).

  * 'alts~ is like 'alts, except that it is *not* preserved when
    consensing (see below on the --condense flag).

  * A comment produced by `comment' is ignored, except when commentary
    is displayed.

Here's an example to illustrate how 'next and 'alts work:

 (module multi-step (lib "slideshow-run.ss" "texpict")
  (slide/title
   "Example"
   (page-item "First step")
   'NEXT
   (page-item "Second step")
   'NEXT
   'ALTS
   (list (list (page-item "Tentative third step")
               'NEXT
               (page-item "This isn't working... back up"))
         (list (page-item "Third step that works")))
   'NEXT
   (page-item "Fourth step")))

[The code above is case-insensitive; 'NEXT and 'ALTS are capitalized
merely to stand out.]

Display Size and Fonts
======================

Slideshow is configured for generating slides in 1024x768 pixel
format. When the current display has a different size as Slideshow is
started, the Slideshow display still occupies the entire screen, and
pictures are scaled just before they are displayed. Thus, one picture
unit reliably corresponds to a "pixel" that occupies 1/1024 x 1/768 of
the screen.

The `text' form for generating text pictures takes into account any
expected scaling for the display when measuring text. (All Slideshow
text functions, such as `t' and `page-para', are built on `text'.) In
particular, scaling the picture causes a different font size to be
used for drawing the slide (rather than bitmap-scaling the original
font), and changing the font size by a factor of K does not
necessarily scale all text dimensions equally by a factor of
K. Nevertheless, using the `current-expected-text-scale' parameter,
Slideshow is usually able to produce good results when the slide is
scaled.

More generally, different font sets on different platforms can change
the way a slide is rendered. For example, the `tt' font on one
platform might be slightly wider than on another, causing different
line breaks, etc. Beware.

Beware also of using bitmaps in slides when the presentation screen
will not be 1024x768. In that case, consider using `size-in-pixels'
(with the caveat that the resulting picture will have a different size
on different displays).

Command-line Options
====================

The "slideshow.ss" module can be invoked directly, in which case a
module file name should be provided on the command line (implemented
either with "slideshow.ss" or "slideshow-run.ss") to provide the slide
content. Setup PLT creates a "Slideshow" executable that runs
"slideshow.ss".

Thus, if the above example is in multi-step.ss, then

   slideshow multi-step.ss

runs the slides.

The "Slideshow" executable accepts a number of command-line flags:

  --print : Prints the slides to a PostScript file. Note that the
            fonts might be different, so printed results will not
            necessarily match the screen form exactly.

  -c, --condense : Skips 'next in slide constructions, and uses only
            the last alternative for 'alts~ (which otherwise acts like
            'alts).

  -p <page> : Sets the starting page.

  -q, --quad : Shows four slides at a time.

  -f <fs>, --font <fs> : Sets the base font size.

  --comment : Displays commentary from `comment' elements.

Procedure Reference
===================

> (slide/title title-string element ...) - Creates a titled slide. See
  the overview for information about `element's.

> (slide/title/tall title-string element ...) - Like `slide/title',
  except that less extra space is inserted between the title and the
  slide content.

> (slide/title/center title-string element ...) - Like `slide/title',
  except that the slide content is centered vertically.

> (slide element ...) - Like `slide/title', but without the title.

> (slide/center element ...) - Like `slide/title/center', but without
  the title.

> (slide/title/inset title-string slide-inset element ...)
> (slide/title/tall/inset title-string slide-inset element ...)
> (slide/title/center/inset title-string slide-inset element ...)
> (slide/inset slide-inset element ...)
> (slide/center/inset slide-inset element ...)
  Like `slide/title', etc., except that an inset is supplied. A slide
  inset is created with `make-slide-inset'.

> (make-slide-inset left-inset top-inset right-inset bottom-inset) -
  Creates a slide inset, which describes a number of pixels to inset
  a slide on each side. Each inset must be an exact, non-negative
  integer.

> (t string) - Same as (text string (current-main-font) (current-font-size))
> (it string) - Same as (text string `(italic . ,(current-main-font)) (current-font-size))
> (bt string) - Same as (text string `(bold . ,(current-main-font)) (current-font-size))
> (bit string) - Same as (text string `(bold italic . ,(current-main-font)) (current-font-size))
> (tt string) - Same as (text string `(bold . modern) (current-font-size))
> (rt string) - Same as (text string `roman (current-font-size))
> (titlet string) - Like `t', but using the slide-title font and color.

> (para width-n ielement ...) - Generates a paragraph picture of width
  `width-n'. Each ielement is either a string or a pict; strings are
  split at spaces for word-wrapping to fit the page, and space is
  added between elements. However, if a string element starts with a
  punctuation mark (e.g., a comma), no space is added before the
  element.

> (para* width-n ielement ...) - Like `para, except that the
  paragraph is only as wide as necessary, which may be less than
  `width-n'.

> (page-para ielement ...) - Like `para, except that the width
   is `client-w' (see below).

> (page-para* ielement ...) - Like `para*', except that the width
   is `client-w' (see below).

> (item width-n ielement ...)
> (item* width-n ielement ...)
> (page-item ielement ...)
> (page-item* ielement ...)
  Like `para, etc., except that a bullet is placed in front of the
  paragraph, and the paragraph is indented on the left.

> (subitem width-n ielement ...)
> (subitem* width-n ielement ...)
> (page-subitem ielement ...)
> (page-subitem* ielement ...)
  Like `item', etc., except that a hollow bullet is used, and the
  width for the `page-' versions is inset from `client-w'.


> (para/c width-n ielement ...)
> (para*/c width-n ielement ...)
> (page-para/c ielement ...)
> (page-para*/c ielement ...)
  Like `para, etc., except that text is centered within the paragraph.

> (para/r width-n ielement ...)
> (para*/r width-n ielement ...)
> (page-para/r ielement ...)
> (page-para*/r ielement ...)
  Like `para, etc., except that text is right-aligned within the
  paragraph.

> (clickback pict thunk)
  Creates a pict that embeds the given one, and is the same size as
  the given pict, but that when clicked during a presentation calls
  `thunk'.

> (most-recent-slide) - Returns a slide structure that be supplied to
  `re-slide' to make a copy of the slide.

> (retract-most-recent-slide) - Cancels the most recently created
  slide, and also returns a slide structure that be supplied to
  `re-slide' to restore the slide (usually in a later position).

> (re-slide slide) - [Re-]inserts a slide.

> (comment string ...) - Concatenated the strings, to be used as a
  slide element for (usually hidden) commentary.

> (make-outline { symbol/s string-or-pict subitems } ...)  - Returns a
  function that takes a symbol and generates an outline slide. Each
  trio of arguments defines a section for the outline:

   - The symbol/s names the section, either with a single symbol or a
     list of symbols. When the outline function is called later to
     make an outline, the given symbol is compared to the section's
     symbol(s), and the section is marked as current if the symbol
     matches.

   - The string-or-pict is used as the displayed name of the
     section.

   - The subitems are displayed when the section is active. It can be
     #f or null (for historical reasons) if no subitems are to be
     displayed. Otherwise, it should be a procedure that takes a symbol
     (the same one passed to the outline maker) and produces a pict.

> (size-in-pixels p) - Scales p so that p is displayed on the screen
  as (pict-width p) wide and (pict-height p) tall. The result is just
  p for a 1024x768 display.


> font-size - The default font size, 32. This size is in pixels for a
  1024x768 screen; see also the "Display Size and Fonts" section, above.
> gap-size - (* 3/4 font-size)

> current-font-size - Parameter for the font size used by `t', etc.,
  initialized to `font-size'.
> line-sep - Amount of seperating between paragraph lines.
> title-size - Font size used for slide titles, derived from `font-size'.
> main-font - Font specification used for `t' by default
> current-main-font - Parameter for the font specification used for `t'

> (with-font f thunk) - Calls `thunk' with `current-main-font' set to `f'.

> red - a color name like "red", possibiliy selected by the user.
> green - a color name like "green"
> blue - ...
> purple - ...
> orange - ...

> bullet - a bullet pict
> o-bullet - a hollow bullet pict

> client-w - useable width of a slide
> client-h - useable height of a slide

> margin - client margin within the full slide

> full-page - an empty pict that is the same size as the client ares
> titleless-page - an empty pict that is the same size as the client
  ares minus the title area

> printing? - #t if the slides are begin durected to PostScript output
> condense? - #t if slides are being condensed (see overview)
> (skip-slides n) - increment the slide counter by `n' without adding
  any slides.

> (start-making-slides)
> (done-making-slides)
  Called implicitly by "slideshow-run.ss", and not to be called
  directly.

> (set-use-background-frame! on?) - enables or disables the creation
  of a background frame, which is typically useful only when insets
  are active. The last enable/disable during slide creation takes
  effect once and for all.

------------------------------------------------------------
_face.ss_
------------------------------------------------------------

The "face.ss" module provides functions for a kind of
Mr.-Potatohead-style face library. The _face-demo.ss_ module
implements an interactive browser for face configurations.

> default-face-color - orange

> (face mood-symbol [color]) - returns a pict a pre-comfigured face
  with the given base color. The built-in configurations, selected by
  mood-symbol, are as follows:

    'unhappy - (face* 'none 'plain #t face-color 6)
    'happy - (face* 'worried 'medium #f face-color 6)
    'unhappy - (face* 'worried 'grimace #t face-color 6)
    'happy - (face* 'none 'plain #f face-color 6)
    'happier - (face* 'none 'large #f face-color 3)
    'embarassed - (face* 'worried 'medium #f face-color 3)
    'embarassed - (face* 'worried 'medium #t face-color 3)
    'unhappier - (face* 'normal 'large #t face-color 3)
    'happiest - (face* 'normal 'huge #f face-color 0 -3)
    'unhappiest - (face* 'normal 'huge #t face-color 0 -3)
    'mad - (face* 'angry 'grimace #t face-color 0)
    'mean - (face* 'angry 'narrow #f face-color 0)

> (face* eyebrow-kind mouth-kind frown? [color eye-inset eyebrow-dy pupil-dx pupil-dy])
  - returns a pict for a configured face:

      - eyebrow-kind is one of 'none, 'normal, 'worried, or 'angry
      - mouth-kind is one of 'plain, 'narrow, 'medium, 'large, 'huge, 
                             'grimace, or 'tongue
      - frown? determines whether the mouth is up or down
      - color is either a color string or a color% object
      - eye-inset adjusts the eye size; recommend values: between 0 and 10
      - eyebrow-dy adjusts the eyebrows; recommend values: between -5 and 5
      - pupil-dx adjusts the pupil; recommend values: between -10 and 10
      - pupil-dy adjusts the pupil; recommend values: between -15 and 15

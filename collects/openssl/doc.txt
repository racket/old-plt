The _openssl_ collection provides glue for the OpenSSL library with
the MzScheme port system. The OpenSSL collection functions nearly
identically to the standard TCP subsystems in PLT Scheme, with a few
additional flags.

To use this library, you will need OpenSSL installed on your
machine. To build from source, you will need a C compiler and linker;
see the end of this documentation for build notes.

==================================================

_mzssl.ss_ library

The variables below are provided the by "mzssl.ss" library.

> ssl-available? 

A boolean value which says whether the system openssl library was
successfully loaded. Calling `ssl-connect', etc.  when this value is
#f (library not loaded) will raise an error.

-- Client procedures ----------------------------------------

> (ssl-connect hostname port-k [protocol-symbol])

Connect to the given host (a string) on the given port-k (a number
from 1 to 65535). This encryption will be encrypted using SSL. The
optional `protocol-symbol' determines which encryption protocol is
used. At the current time, `protocol-symbol' must be one of the
following: 'sslv2-or-v3 (SSL protocol versions 2 or 3, as appropriate;
this is the default), 'sslv2 (SSL protocol version 2), 'sslv3 (SSL
protocol version 3), or 'tls (the TLS protocol version 1). The return
values are as tcp-connect; an input port and an output port.

> (ssl-connect/enable-break hostname port-k [protocol-symbol])

Like ssl-connect, but breaking is enabled while trying to connect. 

-- Server procedures ----------------------------------------

> (ssl-listen port-k [queue-k reuse? hostname-or-#f protocol-symbol])

Like `tcp-listen', but the result is an SSL listener (which is a
waitable object). The extra optional `protocol-symbol' is as for
`ssl-connect'.

Call `ssl-load-certificate-chain' and `ssl-load-private-key' to avoid
a _no shared cipher_ error on accepting connections. The file
"test.pem" in the "openssl" collection is a suitable argument for
testing; since "test.pem" is public, however, such a test
configuration obviously provides no security.

> (ssl-close ssl-listener)
> (ssl-listener? v)

Analogous to `tcp-close' and `tcp-listener?'.

> (ssl-load-certification-chain ssl-listener pathname)

Loads a certification chain file for connections to be accepted for
`ssl-listener'.

> (ssl-load-private-key ssl-listener pathname [rsa? asn1?])

Loads the firprivate key from `pathname' for connections to be
accepted for `ssl-listener'. If `rsa?' is #t (the default), the first
RSA key is read (i.e., non-RSA keys are skipped). If `asn1?' is #t
(the default is #f), the file is parsed as ASN1format instead of PEM.

> (ssl-accept ssl-listener)

Analogous to `tcp-accept'.

> (ssl-accept/enable-break ssl-listener)

Analogous to `tcp-accept/enable-break'.

==================================================

Build notes
-----------

The "mzssl.ss" library is actually implemented in C as "mzssl.c".
When you run Setup PLT, setup attempts to compile and link "mzssl.c"
to create a PLT Scheme extension.

Per-platform notes:

 * Windows

   The setup script wants "libeay32.lib" and "ssleay32.lib", which it
   can find automatically if they are installed as
   plt/collects/openssl/openssl/{lib,ssl}easy32.lib. Similarly, it
   wants header files, which it can find automatically if they are
   installed as plt/collects/openssl/openssl/include/openssl/ssl.h,
   etc. At run-time, "libeay32.dll" and "ssleay32.dll" must be found
   by the system for application using the OpenSSL library (e.g., in
   the system folder, in the same directory as the application).

   To designate a directory other than plt/collects/openssl

   If OpenSLL is built with cygwin, ".a" files are generated instead
   of ".lib" an ".dll" files. Presumably "mzssl.c" could be made to
   build with those libraries by modifying "pre-installer.ss", but we
   haven't tried. Similar caveats apply to other build techniques that
   do not produce DLLs.

 * Mac OS

   "Just works" for Mac OS X version >= 10.2 if you have the developer
   tools installed. Building for 10.1 requires installing OpenSSL. Mac
   OS Classic is not supported at all.

 * Unix (including Linux)

   Usually "just works" if you have OpenSSL installed.  If the header
   files or libraries are in a non-standard place, define the
   environment variable PLT_EXTENSION_LIB_PATHS as a colon-separated
   path list, where one of the paths contains "include" and "lib"
   subdirectories with the OpenSSL headers and libraries.

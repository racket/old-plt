;;; <cond-expand.ss> SRFI-0 cond-expand port to PLT Scheme  -*- Scheme -*-
;;; Time-stamp: <03/02/24 09:54:38 solsona>
;;;
;;; Copyright (C) 2002 by MJ Ray.
;;;
;;; This file is part of PLT Scheme.

;;; PLT Scheme is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU Lesser General Public
;;; License as published by the Free Software Foundation; either
;;; version 2.1 of the License, or (at your option) any later version.

;;; PLT Scheme is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Lesser General Public License for more details.

;;; You should have received a copy of the GNU Lesser General Public
;;; License along with PLT Scheme; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

;;; Author: MJ Ray <markj@cloaked.freeserve.co.uk>
;;; slightly modified by: Francisco Solsona <solsona@acm.org>

#| Comments:

(SRFI developers:)

The idea is that when new SRFIs are installed, we call add-package
with something like:

(add-package 'srfi-13 '(require (lib "13.ss" "srfi")))

and the catalogue.ss file is updated accordingly, with srfi-13 added
to the list of symbols and it is expanded to the require statement in
any cond-expand.  User programs can be written using cond-expand to
access portable features and run with '-L 0.ss srfi' on the mzscheme
commmand line.

(Regular users:)

Simply (require (lib "0.ss" "srfi")) and use it! :-).  See the
documentation on the SRFI web site:

http://srfi.schemers.org/srfi-0/

|#

(module cond-expand mzscheme
  (require (lib "catalogue.ss" "srfi")
	   (lib "pretty.ss"))
  (provide add-package catalog
	   (all-from (lib "catalogue.ss" "srfi")))

  ;; Parameter to allow the use of different catalog files.
  (define catalog (make-parameter
		   (build-path (current-directory) 'up "catalogue.ss")
		   (lambda (filename)
		     (if (file-exists? filename)
			 filename
			 (error 'catalogue "file, ~a, does not exists!" filename)))))

  
  (define (syntax-error args)
    (error 'syntax-error args))

  (define basic-cond-expand
    '(module catalogue mzscheme
       (provide cond-expand)

       (define-syntax cond-expand
	 (syntax-rules
	  (and or not else srfi-0)
	  ((cond-expand) (syntax-error "Unfulfilled cond-expand"))
	  ((cond-expand (else body ...))
	   (begin body ...))
	  ((cond-expand ((and) body ...) more-clauses ...)
	   (begin body ...))
	  ((cond-expand ((and req1 req2 ...) body ...) more-clauses ...)
	   (cond-expand (req1 (cond-expand ((and req2 ...) body ...) more-clauses ...))
			more-clauses ...))
	  ((cond-expand ((or) body ...) more-clauses ...)
	   (cond-expand more-clauses ...))
	  ((cond-expand ((or req1 req2 ...) body ...) more-clauses ...)
	   (cond-expand (req1 (begin body ...)) (else (cond-expand ((or req2 ...) body ...) more-clauses ...))))
	  ((cond-expand ((not req) body ...) more-clauses ...)
	   (cond-expand (req (cond-expand more-clauses ...)) (else body ...)))
	  ((cond-expand (srfi-0 body ...) more-clauses ...)
	   (begin body ...))
	  ((cond-expand (feature-id body ...) more-clauses ...)
	   (cond-expand more-clauses ...))))))

  (define (matcher sym)
    `(cond-expand (,sym body ...) more-clauses ...))

  (define (expander clause)
    `(begin ,clause body ...))

  (define (add-package sym clause)
    (let ((cat (if (file-exists? (catalog))
		   (call-with-input-file (catalog)
		     (lambda (in)
		       (read in)))
		   basic-cond-expand)))
      (call-with-output-file (catalog)
	(lambda (out)
	  (display ";; WARNING: This file was generated automatically by add-package (SRFI-0)" out)
	  (newline out)
	  (display ";;  DO NOT hand edit this file! (unless, of course, you do know what you are doing)" out)
	  (newline out)
	  (pretty-print
	   (apply
            (lambda (mo ca mz prov target)
	      (let ((ds (car target))
		    (ce (cadr target))
		    (c2 (caddr target)))
		(list mo ca mz prov
		      (list ds ce
			    (append
			     (list (car c2) (cons sym (cadr c2))
				   (list (matcher sym) (expander clause)))
			     (cddr c2))))))
            cat)
	   out))
	'truncate/replace)
      ;; We have the extended cond-expand, so we load it into the current environment:
      ;; FIXME: will one fo these have the dynamic effect we're looking for?
      ;;  (load (catalog))
      ;;  (dynamic-require `(file ,(catalog)) 'cond-expand)
      ))
  )
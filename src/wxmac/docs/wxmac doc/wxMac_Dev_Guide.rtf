{\rtf1\mac\deff2 {\fonttbl{\f0\fswiss Chicago;}{\f2\froman New York;}{\f3\fswiss Geneva;}{\f4\fmodern Monaco;}{\f13\fnil Zapf Dingbats;}{\f15\fnil Helvetica Narrow;}{\f16\fnil Palatino;}{\f18\fnil Zapf Chancery;}{\f20\froman Times;}{\f21\fswiss Helvetica;}
{\f22\fmodern Courier;}{\f23\ftech Symbol;}{\f34\fnil New Century Schoolbook;}{\f128\fnil Bold Monaco;}{\f129\fnil West Monaco;}{\f256\fnil N Helvetica Narrow;}{\f2488\fnil AppleIconTwo;}{\f4788\fnil NewZurica;}{\f5466\fnil NewZuricaBold;}
{\f5735\fnil MPW;}{\f8516\fnil NewZuricaOblique;}{\f12761\fnil Torino Outline;}{\f32525\fnil VT100;}}{\colortbl\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\s245\li360\sa120 \f20\fs18\up6 \sbasedon0\snext0 footnote reference;}{\s246\li360\sa120 \f20\fs20 \sbasedon0\snext246 footnote text;}{\s250\li360\sb120\sa120\keepn \b\f20\fs28 
\sbasedon251\snext0 heading 6;}{\s251\li360\sb120\sa120\keepn \b\f20\fs28 \sbasedon252\snext0 heading 5;}{\s252\li360\sb120\sa120\keepn \b\f20\fs28 \sbasedon253\snext0 heading 4;}{\s253\li360\sb120\sa120\keepn \b\f20\fs28 \sbasedon254\snext0 heading 3;}{
\s254\li180\sb120\sa120\keepn\brdrb\brdrs \b\f20\fs36 \sbasedon255\snext0 heading 2;}{\s255\li360\sb240\sa240\keepn\brdrb\brdrs \b\f20\fs48 \sbasedon0\snext0 heading 1;}{\li360\sa120 \f20 \sbasedon222\snext0 Normal;}{\s1\fi-540\li900\sa120\tx900 \f20 
\sbasedon0\snext1 numbered list;}{\s2\fi-540\li1440\sa120\tx1440 \f20 \sbasedon0\snext2 numbered list 1;}{\s3\fi-540\li1980\sa120\tx1980 \f20 \sbasedon0\snext3 numbered list 2;}{\s4\fi-280\li900\sa120\tx900 \f20 \sbasedon1\snext4 bullet list;}{
\s5\fi-280\li1440\sa120\tx1440 \f20 \sbasedon2\snext5 bullet list 1;}{\s6\fi-280\li1980\sa120\tx1980 \f20 \sbasedon3\snext6 bullet list 2;}{\s7\fi-3960\li4320\sa120\tx4320 \f20 \sbasedon0\snext7 glossary;}{\s8\fi-3960\li4860\sa120\tx4860 \f20 
\sbasedon7\snext8 glossary 1;}{\s9\keep\tx880\tx1740\tx2620\tx3480\tx4320\tx5220\tx6060\tx6940\tx7780 \f22\fs20 \sbasedon0\snext9 pre;}{\s10\li360\sa120 \i\f20 \sbasedon0\snext10 address;}{\s11\li1440\ri1440\sa120 \i\f20 \sbasedon0\snext11 blockquote;}{
\s12\sb120\sa120\brdrb\brdrth \f20 \sbasedon0\snext0 hr;}{\s13\fi360\tx360\tx3600\tx4320\tx7200\tx10700 \f20 \sbasedon0\snext13 dir;}{\s14\fi360\li360\tx720\tx3960\tx4320\tx7560\tx10700 \f20 \sbasedon0\snext14 dir 1;}{
\s15\fi360\li720\tx1080\tx4320\tx7920\tx10700 \f20 \sbasedon0\snext15 dir 2;}{\s16\fi-720\li1440\tx1440 \f20 \sbasedon10\snext16 menu 1;}{\s17\fi-720\li1080\tx1080 \f20 \sbasedon16\snext17 menu;}{\s18\fi-720\li1800\tx1800 \f20 \sbasedon0\snext18 menu 2;}{
\s19\fi-3960\li5400\sa120\tx5400 \f20 \sbasedon8\snext19 glossary 2;}{\s20\li360 \f22 \sbasedon0\snext20 HTML;}{\s21\li360\sa120 \f20 \sbasedon7\snext21 TERM;}{\s22\li900\sa120 \f20 \sbasedon7\snext22 DEF;}{\s23\fi-3960\li4860\sa120\tx4860 \f20 
\sbasedon8\snext23 TERM 1;}{\s24\li1440\sa120 \f20 \sbasedon8\snext24 DEF 1;}{\s25\li1440\sa120 \f20 \sbasedon19\snext25 TERM 2;}{\s26\li1980\sa120 \f20 \sbasedon25\snext26 DEF 2;}}{\info{\title WxMac Development Guide}{\author Cecil Coupe}}
\margl720\margr720\widowctrl\ftnbj\fracwidth \sectd \linemod0\cols1 \pard\plain \s11\li1440\ri1440\sa120 \i\f20 This file is the start of a wxMac Developers Guide.\par 
\pard \s11\li1440\ri1440\sa120 Written by Cecil Coupe (ccoupe@simplot.com) with additions from Bill Hale and Tomaso Paoletti, and Matthew Flatt\par 
\pard\plain \s254\li180\sb120\sa120\keepn\brdrb\brdrs \tx0 \b\f20\fs36 {\f3 I. Introduction\par 
}\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 What is wxWindows and wxMac\par 
\pard\plain \li360\sa120 \f20 wxWindows is a cross platform GUI development library with supporting applications and demos. wxMac is a port of wxWindows for the Macintosh.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 Who is this document for?\par 
\pard\plain \li360\sa120 \f20 Part II of this document will help you install and *use* wxWindows for the Macintosh. Part III and beyond are intended for alpha and beta testers and for those who want to add  to or fix the wxMac code\par 
\pard\plain \s254\li180\sb120\sa120\keepn\brdrb\brdrs \tx0 \b\f20\fs36 {\f3 II. Installation\par 
}\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 Hardware and Software requirements\par 
\pard\plain \li360\sa120 \f20 MacOS - System 7 or greater\par 
Color QuickDraw\par 
32 bit addressing - so you require a 68030/68040 or PowerPC.\par 
Floating point hardware will help (probably a lot).\par 
Enough memory for your C++ compiler to handle large programs.\par 
\pard \li360\sa120 You will want 20MB of free space in order to run the sample applications, 40MB free would be easier to deal with.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 Archives and compression\par 
\pard\plain \li360\sa120 \f20 
There are several methods for bundling up a directory tree into a single file and compressing that file to reduce its size. Depending on how and which distribution you got you may need additional helper programs to create a real Macintosh folder(s).\par 
\pard \li360\sa120 1. If you are lucky, you downloaded a self extracting stuffit archive. Simply double click on the icon and StuffIt will ask where to put the Folders and files.\par 
2. If you don't have the .sea or .sit versions of the distribution, but instead have a file ending in .tar.Z, .tar.gz, or .ZIP (or .zip), you need to acquire the following programs for your Macintosh:\par 
\pard\plain \s4\fi-280\li900\sa120\tx900 \f20 MacGzip from ....\par 
Suntar(2.0.2) from ....\par 
\pard\plain \li360\sa120 \f20 Also note, that tar may not preserve some of the Mac special characters, in particular the 'pi' character is the Option-p keys, and needs to be placed
 in project files. Parentheses are replaced with '+', which is only really a problem for Symantec.\par 
\pard \li360\sa120 3. If you don't understand both steps 1 and 2, (and even if you don't need #2) you will have a extremely steep learning curve ahead of you. I'm sorry,  but that is how it is in the cross platform world.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 Chose your compiler/environment\par 
\pard\plain \li360\sa120 \f20 {\b Note}: Symantec Projects and MPW makefiles are out of date. CodeWarrior is the only supported compilers.\par 
\pard \li360\sa120 By now you've untarred/unzipped/unstuffed the archive, you might have read
 the README files, and you've already tried to build the system with CodeWarrior or Think-C++. MPW aficionados just modified the Makefile and tried it. You probably wouldn't be reading this unless you had a problem. Lets try it again, from the archive/zip/
tar file (you did make a copy, right).\par 
\pard \li360\sa120 You should decide whether you want to use MPW, CodeWarrior, or ThinkC++. They can all coexist in the same set of folders, but life will be so much better and easier if you chose one now and stick with it throughout yo
ur wxWindows exploration.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 Structure of distribution directories\par 
\pard\plain \li360\sa120 \f20 
There will be a lot of directories/folders and files. The ones you want to deal with  are "samples", "src" and "include" in the top-level directory, plus the project files and/or Makefile and hopefully the README's and Documentation. IGNORE the others. You
'll have plenty of time later after you get a decent install.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 Compiling a wxWindows program with Metrowerks C++ (v7)\par 
\pard\plain \li360\sa120 \f20 The wxWindows library (used by all samples and any programs you write) has to be built first. In the top level directory, along with the 'src' and "include" directories should be a wxMac161-PPC.\'b9 or wxMac161-68K\'b9
 project. Double click, select Make from the "Project" menu and cross your fingers. CodeWarrior may complain that some 
path's are not available, typically this is the path to wherever you installed Codewarrior. This error message is corrected by setting the project preferences (Edit->Preferences->Paths) to your CW installation Folder.\par 
\pard \li360\sa120 For 68k compilation, you must make sur
e that the library and all applications are compiled with the same prefs settings. As distributed, the projects build for 4 byte ints, 8 byte doubles, and no floating pt HW (that is 4i/8d). If you wish to change this you will also have to add the appropria
te libraries into the project in place of the 4i/8d's that are there.\par 
\pard \li360\sa120 If all works well (no fatal compile errors) you can try the sample programs located in the "samples" directories. Drill down into samples:hello. Loaded it - I happen to like using the Fi
nder to open the :samples:hello: folder and double clicking on the hello.ppc.\'b9. \par 
\pard \li360\sa120 Although, the 'minimal' program is even simpler than 'hello', if hello doesn't run for you, well its a long and winding road...\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 Compiling a wxWindows program with Symantec C++  or MPW\par 
\pard\plain \li360\sa120 \f20 
Symantec and MPW is no longer supported with the alpha-4 snapshot. I'm not saying that you couldn't make it work, only that I no longer care to spend the copious amounts of time watching MPW compile. Its large enough under CodeWarrior as it is!\par 
\pard\plain \s254\li180\sb120\sa120\keepn\brdrb\brdrs \tx0 \b\f20\fs36 {\f3 III. WxMac Internals\par 
}\pard\plain \li360\sa120 \f20 Aside from curiosity, there are only three reasons to be reading this section of the document:\par 
\pard\plain \s5\fi-280\li1440\sa120\tx1440 \f20 Your compiler coughed, rolled over and died on something. \par 
The test programs died, probably taking the MacOS with it. \par 
You like what you see and want to help it grow.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 A. Philosophy and Goals of the wxMac Project [and participants]\par 
\pard\plain \li360\sa120 \f20 The first developer and instigator of the Macintosh port was Bill Hale who wanted to learn C++ by porting a "major" piece of code. The second to join was Tomaso Paolet
ti  who wanted (?) The third was Cecil Coupe who just wanted a cross-platform GUI for the python language and got sucked into the effort. Bill created the Mac specific part of Julian Smarts (jacs@aiai.ed.ac.uk)  wxWindows.\par 
\pard \li360\sa120 Louis Birk, Matthew Flatt, Scott Maxwell and Greg Whitehead joined the project, each with real applications that they wanted to port. Each contributed serious development effort for wxMac.\par 
Given the different perspectives it should be no  surprise that there are different stylistic tactics taken in various wxMac modules. So be it, We offer no apologies.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 {\f3 B. Necessary [useful] skills and reference material\par 
}\pard\plain \li360\sa120 \f20 See the wxMac_Status document. The bug you found may be known. Also, sometimes the wxWindows documentation differs from the actual implementation.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 {\f3 C. How the classes are laid out (file/project point of view)\par 
}\pard\plain \li360\sa120 \f20 Here is the list of .c and .cc files needed. This could be used to determine which files to load into another development environment.\par 
\pard\plain \s21\li360\sa120 \f20 Project Name: "Prog:wxmac161d-a4:wxMac161-PPC."\par 
Precompiled Headers\par 
\tab wxGWin.pch\par 
Base\par 
\tab DebugNew.cp\par 
\tab wb_dc.cc\par 
\tab wb_data.cc\par 
\tab wb_canvs.cc\par 
\tab wb_dialg.cc\par 
\tab wb_gdi.cc\par 
\tab wb_frame.cc\par 
\tab wb_hash.cc\par 
\tab wb_help.cc\par 
\tab wb_ipc.cc\par 
\tab wb_item.cc\par 
\tab wb_list.cc\par 
\tab wb_main.cc\par 
\tab wb_mgstr.cc\par 
\tab wb_obj.cc\par 
\tab wb_panel.cc\par 
\tab wb_ps.cc\par 
\tab wb_mf.cc\par 
\tab wb_stdev.cc\par 
\tab wb_sysev.cc\par 
\tab wb_text.cc\par 
\tab wb_timer.cc\par 
\tab wb_types.cc\par 
\tab wb_utils.cc\par 
\tab wb_win.cc\par 
\tab wxstring.cc\par 
\tab xfspline.cc\par 
Mac Core\par 
\tab wx_app.cc\par 
\tab wx_area.cc\par 
\tab wx_buttn.cc\par 
\tab wx_canvs.cc\par 
\tab wx_check.cc\par 
\tab wx_choic.cc\par 
\tab wx_clipb.cc\par 
\tab wx_dc.cc\par 
\tab wx_dccan1.cc\par 
\tab wx_dccan2.cc\par 
\tab wx_dccan3.cc\par 
\tab wx_dcmem.cc\par 
\tab wx_dialg.cc\par 
\tab wx_frame.cc\par 
\tab wx_gdi.cc\par 
\tab wx_ipc.cc\par 
\tab wx_item.cc\par 
\tab wx_main.cc\par 
\tab wx_lbox.cc\par 
\tab wx_menu.cc\par 
\tab wx_messg.cc\par 
\tab wx_mnuit.cc\par 
\tab wx_mtxt.cc\par 
\tab wx_panel.cc\par 
\tab wx_rbox.cc\par 
\tab wx_rbut.cc\par 
\tab wx_sbar.cc\par 
\tab wx_screen.cc\par 
\tab wx_slidr.cc\par 
\tab wx_text.cc\par 
\tab wx_timer.cc\par 
\tab wx_txt.cc\par 
\tab wx_util.cc\par 
\tab wx_win.cc\par 
Mac Helpers\par 
\tab wxBorder.cc\par 
\tab wx_comparestrings.c\par 
\tab wx_mac_utils.cc\par 
\tab wxBorderArea.cc\par 
\tab wxGetTxt.cc\par 
\tab wxLabelArea.cc\par 
\tab wxMacDC.cc\par 
\tab wxMacObj.cc\par 
\tab wxMacPPC.c\par 
\tab wxMargin.cc\par 
\tab wxButtonBorder.cc\par 
\tab wxRectBorder.cc\par 
\tab wxScroll.cc\par 
\tab wxScrollArea.cc\par 
\tab wxScrollData.cc\par 
Unfinished Core\par 
\tab wx_group.cc\par 
\tab wx_mf.cc\par 
Printing\par 
\tab wx_print.cc\par 
\tab wx_dcpr1.cc\par 
\tab wx_dcpr2.cc\par 
\tab wx_dcpr3.cc\par 
wxExtend\par 
\tab exdc.cc\par 
\tab exdde.cc\par 
\tab extbar.cc\par 
\tab exutils.cc\par 
\tab exitems.cc\par 
\tab exmisc.cc\par 
\tab exgdi.cc\par 
\tab exwin.cc\par 
wxImage\par 
\tab wximgfil.cc\par 
\tab wx_image.cc\par 
\tab wx_xbm.cc\par 
\tab wx_bmp.cc\par 
libxpm\par 
\tab crbuffri.c\par 
\tab crdatfri.c\par 
\tab create.c\par 
\tab crifrbuf.c\par 
\tab crifrdat.c\par 
\tab data.c\par 
\tab hashtab.c\par 
\tab misc.c\par 
\tab parse.c\par 
\tab rdftodat.c\par 
\tab rdftoi.c\par 
\tab rgb.c\par 
\tab scan.c\par 
\tab simx.c\par 
\tab wrffrdat.c\par 
\tab wrffri.c\par 
\pard\plain \li360\sa120 \f20 Note: you don't really need the wxExtend unless you want to compile a Mac version of WxPython in which case you should contact me (ccoupe@simplot.com) to get the "latest" wxPython known to work with the Mac (version 3, FYI)
\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 {\f3 D. How the classes really interact (debugging point of view)\par 
}\pard\plain \li360\sa120 \f20 The Macintosh platform derives dialogs from wxFrame class, while the other platforms derive dialogs from wxPanel class (however, the usage for dialogs should be the same). This is no long true since  release 'a4p2'.\par 
\pard\plain \s253\li360\sb120\sa120\keepn \b\f20\fs28 {\f3 E. Mac-specific classes, methods, techniques and constraints\par 
}\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 1. Internally generated Mac Menu Id's start at 129\par 
\pard\plain \li360\sa120 \f20 128 is used for the Apple Menu, and that value is hard coded in some places (wx_menu.cc, wx_app.cc)\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 2. wxApp, CreateApp(), wx_main.cc, and your program. \par 
\pard\plain \li360\sa120 \f20 There is a bug, exhibited in some wxWindows applications, that causes the the wxTheApp global to not get set.  This problem started with Symantec C++(6.x) and {\i shows}
 up in some applications compiled with Code Warrior 6.  There is a work-around (from Bill Hale) that involves changing your application code slightly:\par 
\pard \li360\sa120 You must define a class t
hat is publicly derived from wxApp. You can name this derived class whatever you want. For the following, I will name it "MyApp". In this class, you must declare a public method which will override the pure virtual method "OnInit" that is declared in the  
class wxApp. Then, at the minimum, we will have the following in a header file called "MyApp.h":\par 
\pard\plain \s9\keep\tx880\tx1740\tx2620\tx3480\tx4320\tx5220\tx6060\tx6940\tx7780 \f22\fs20 \tab #include "wx_main.h"   // should really be called "wx_app.h"\par 
\tab class MyApp: public wxApp\par 
\tab \{\par 
\tab \tab public:\par 
\tab \tab \tab wxFrame* OnInit(void);\par 
\tab \};\par 
\pard\plain \li360\sa120 \f20 \tab \par 
\pard \li360\sa120 You must implement the publicly derived class of wxApp that you have just defined. At the minimum, we will have the following in a  source file called "MyApp.cc":\par 
\pard\plain \s9\keep\tx880\tx1740\tx2620\tx3480\tx4320\tx5220\tx6060\tx6940\tx7780 \f22\fs20 \tab #include "MyApp.h"\par 
\tab wxFrame* MyApp::OnInit(void)\par 
\tab \{\par 
\tab \tab ...\par 
\tab \tab ...\par 
\tab \tab ...\par 
\tab \}\par 
\par 
\pard\plain \li360\sa120 \f20 
You must finally declare and define a procedure "CreateApp" which the main program will call to create the object that you have derived from the class wxApp. You must use the name "CreateApp". It should be placed into the source file created in step B) abo
ve. The code that you need is as follows (where you should replace "MyApp" with the name of your derived class):\par 
\pard\plain \s9\keep\tx880\tx1740\tx2620\tx3480\tx4320\tx5220\tx6060\tx6940\tx7780 \f22\fs20 \tab void CreateApp(void);\par 
\tab void CreateApp(void)\par 
\tab \{\par 
\tab \tab new MyApp;\par 
\tab \}\par 
\pard\plain \li360\sa120 \f20 \par 
As distributed, this workaround is not enabled. If you need it, in wx_main.cc, in the main() function is a line\par 
\pard\plain \s9\keep\tx880\tx1740\tx2620\tx3480\tx4320\tx5220\tx6060\tx6940\tx7780 \f22\fs20 \tab // CreateApp();\tab // This procedure initializes the whole application\par 
\pard\plain \li360\sa120 \f20 Simply uncomment this, and apply the work around above to your application.\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 3. How do these "Areas" work? What are Margins?\par 
\pard\plain \li360\sa120 \f20 From: Bill Hale <hale@mailhost.tcs.tulane.edu>\par 
\pard \li360\sa120 The purpose of the wxArea objects is to allow a parent wxWindow object to have different origins for its children wxWindow objects.\par 
\pard \li360\sa120 
A wxWindow object contains wxArea objects. These wxArea objects are nested. Each wxArea object has margin values (left, top, right, and bottom) which specify where the next wxArea object is situated. Each wxArea object contains wxWindow objects. These wxWi
ndow objects are positioned within the wxArea by an offset value (X, Y). The wxArea object is clipped by the inner sibling wxArea objects (not coded yet). The child wxWindow objects are clipped by the parent wxArea object.\par 
\pard \li360\sa120 The width and height of a wxArea object is calculated from the width and height of its parent wxWindow and from the margins of the outer sibling wxAreas.\par 
\pard \li360\sa120 Example:\par 
\pard\plain \s9\keep\tx880\tx1740\tx2620\tx3480\tx4320\tx5220\tx6060\tx6940\tx7780 \f22\fs20                         width 200\par 
    ----------------------------------------------\par 
    |           area A             2              | wxWindow parent\par 
    |  |---------------------------------------|  |\par 
    |  |          area B          20           |  |\par 
    |  |                                       |  |\par 
    |2 |  |--------------------------------|   | 2|\par 
    |  |10|           area C               |16 |  | height 100\par 
    |  |  |                                |   |  |\par 
    |  |  |--------------------------------|   |  |\par 
    |  |                           5           |  |\par 
    |  |---------------------------------------|  |\par 
    |                              2              |\par 
    |---------------------------------------------|\par 
\pard\plain \li360\sa120 \f20 \par 
Suppose the wxWindow parent has width 200 and height 100.\par 
Suppose the area A has (l, t, r, b) = (2, 2, 2, 2).\par 
Suppose the area B has (l, t, r, b) = (10, 20, 16, 5).\par 
Let area C be the automatically generated client area, with (l, t, r, b) = (0, 0, 0, 0).\par 
\pard \li360\sa120 Then, the width and height of area A is 200 and 100. The width and height of area B is 196 and 96. The width and height of area C is 170 and 71.\par 
\pard \li360\sa120 Children wxWindow objects of area A are positioned with respect to area A origin; children wxWindow objects of area B objects are positioned with respect to area B
 origin; and, likewise, for area C. In effect, these children wxWindow objects of the parent wxWindow have different origins within the wxWindow parent.\par 
\pard \li360\sa120 You can look at the code for wxText (best) and wxFrame for examples of creating areas for a wxWindow object in addition to the automatic client area.\par 
So, wxWindows contain areas and pointers to areas. Some Areas contain pointers to wxWindows. Be aware that the order of destructors is somewhat confusing and problematical. \par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 4. The Magic 32k Limit\par 
\pard\plain \s4\fi-280\li900\sa120\tx900 \f20 TextEdit\par 
ListBoxes\par 
MenuID's\par 
Anything that scrolls (?)\par 
\pard\plain \li360\sa120 \f20 Matthew Flatt provided the wxMac changes neccesary to implement wxMedia which handles the scrolling limits at the wxWindows level:\par 
Up until wxMedia, wxCanvas always managed the scrollbars for you. If your drawing extended far enough, the scroll bars kicked in, and scroll bar actions were automatically excuted on the drawing area.\par 
\pard \li360\sa120 Unfortunately, this doesn't work well enough for editing text documents. The first reason is that scroll steps need to be correlated with 
lines of text. The second reaosn is that the size of a text document can easily exceed the short-integer-based drawing areas of many platforms. \par 

SetScrollbars is supposed to configure properties of the scrollbar that are used for automatic scrolling. It is also the way to turn scrollbars on or off. So, we added the extra Bool flag to SetScrollbars to turn the scrollbars on without turning on automa
tic management.\par 
\pard \li360\sa120 The new methods - SetScrollPos, SetScrollRange, etc. - were added to give direct control over the scrollbars. Why wasn't SetScrollbars sufficient? I don't remember.\par 
\pard \li360\sa120 Finally, OnScroll was added to allow manual handling of scrollbar events.\par 
\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 5. The Apple Menu Hack.\par 
\pard\plain \li360\sa120 \f20 In wx_frame.cc, the Mac menubar is cleared and recreated through the wxWindows menu objects. {\b The wxWindows for Macintosh Apple Menu Extension} (AKA Apple Menu hack) is to:\par 
\pard\plain \s4\fi-280\li900\sa120\tx900 \f20 Modify the global gMenuLdCnt to start at 129.\par 
\pard \s4\fi-280\li900\sa120\tx900 When (re)creating a menu bar, see if we have a menu 128. If not, create one with the special characteristics of an Apple menu (ie add 'DRVR' resources).\par 
\pard \s4\fi-280\li900\sa120\tx900 If possible, insert the "About" menu item. (See the "About Menu Hack")\par 
\pard \s4\fi-280\li900\sa120\tx900 
In, wx_app.cc, doMacInMenuBar(), we check to see if Mac MenuID is 128 (i.e. the secret reseverved number that ResEdit defaults to when creating a new resource which is the only reason I chose 128). Anyway, if it's 128, item != 1,  then we call OpenDeskACC(
), and everything is right with the world. Of course, the "incoming" Mac Window--wxWindows Frame, has to have a menubar, otherwise there is no menubar shown (at all, for example the graphics canvas in hello.cc).\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 6. The About Menu Item hack.\par 
\pard\plain \li360\sa120 \f20 This is a{\b  true }hack. It is fragile. It has very specific requirements before it kicks in. If you do something close enought to trigger it,  you must provide the code it calls. \par 
\pard \li360\sa120 
In simple terms, this hack detects that your program creates a "Help" menu with a wxMenuItem of "About" and that you added this menu to the menubar with something like: menubar->Append(help_menu, "Help"); Yes, this is not inter-nationalized, just Engli
sh. \par 
\pard \li360\sa120 
When wxMenuBar::Append sees this, it saves away the wxMenu ptr and the Mac Item Number. These are used in the wxApp::doMacInMenuBar() [wx_app.cc] to trigger whatever callback function you set up to handle Help/About.  I'm actually proud of this, but I know
 that {\b it is weak}. You can disable a couple of lines in wx_app.cc to remove its effects, although the additional memory lingers.\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 7. wxBitmap implementation\par 
\pard\plain \li360\sa120 \f20 The internal Mac object for a wxBitmap is  a Mac GWorld (and pixmap)"Picture". This makes for  e
asy and quick execution during Update events and for handling offscreen bitmaps (wxDCMEM). It is not the clearest of code however. Several people have helped me debug this. I also depend on implementing parts of the wxImage class (to handle GIF, XPM, XBM, 
and BMP). USE_XPM_IN_MAC can be toggled off in wx_setup.h if you do not need some of these formats. Most of the code is in wx_gdi.cc and wxImage.cc.\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 8. Mac Resources.\par 
\pard\plain \li360\sa120 \f20 In each of the sample directories, you should find a resource file to include into the pr
oject. There is an ALRT and DITL which are required for error messages. The 'MENU' resource is no longer used, but it doesn't hurt to keep it. There may be PICT resources which are used for bitmapped buttons. Anything else is left over from other tests and
 maybe deleted.\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 9. Memory Managment and PowerPC oddities\par 
\pard\plain \li360\sa120 \f20 The memory manager on PowerMacs is a little more sensitive to some errors. I compile and link with Code Warriors DebugNew routines because it helps track down some of these errors.  \par 
\pard \li360\sa120 If you really wa
nt to find leaks (and they are there), and if you have access to MPW's canon tool, you can replace calls to 'new' with calls to DebugNew's 'NEW', set the appropropriate #define and recompile. You should do this on a copy of the project, because your doing 
a global search and replace and they can be troublesome to undo. See the CodeWarrior Doc for DebugNew (probably on the CD).\par 
\pard \li360\sa120 There is a library project, wxMac161 PPC (debug) that can be used for leak testing. It uses a different .pch file, 'wxDebugHeaders.p
ch) which builds the library and one of two precompiled headers, either 'wxDebugHeadersPPC' or 'wxDebugHeaders68K'. Then in the project for  the application set preferences/C++ Language/prefix file: to be wxDebugHeadersPPC (or 68K). 12 leaks is normal for 
minimal.cc and 25 leaks for hello.cc To help track drown other leaks I've included a file of patches to make to Metroworks DebugNew. See file DebugNew.patch and Hello.cc which has lots of code that trys force and or find leaks. Ugly but effective.\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 10. SetSize,  OnSize - OnClientAreaDSize.\par 
\pard\plain \li360\sa120 \f20 First off, OnSize() is only defined for wxFrame's and wxbWindow (in regular 16.3 its also defined for wb_item). Since release 'a4p3',  you do not need a OnClientAreaDSize() in your {\b application}
. Myframe::OnSize works fine. You app's OnSize will be called when wxApp::OnInit returns to the system. From then on it will only be called when the window is maximized/minimized, the growicon is dragged or your app calls SetSize() on the app's frame. In f
act you do not want both OnSize() and OnClientAreaDSize() defined for your app's frames (if so they may both be called).\par 
\pard \li360\sa120 
SetSize() for wxWindows and its subclasses is a little mysterious and has significant implications if you want to write or understand the controls (wxButtons, wxListBoxs ...) The only SetSize() you need is in wx_win.cc (for class wxWindow). wxItems (button
s, etc.) should {\b not} define this function!!! Instead a window or item needs to define an OnClientAreaDSize() method. It works like this - When an application like hel
lo.cc calls SetSize(), the method in wxWindow is used (because no one overrides it).  wxWindow::SetSize() ventures off into the wxArea's code and eventually the Window's or Item's OnClientAreaDSize() method is called. This is where the control (ie wxItem) 
needs to modify its position and size according to the semantics of wxMac and OnClientAreaDSize(). \par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 11. OnPaint and Paint - when to use\par 
\pard\plain \li360\sa120 \f20 OnPaint is defined for wxbWindow, wxWindow and wxPreviewCanvas (sort of) and is overridden as needed by your application
s classes for canvas's. OnPaint() is called when wxMac wants your app to redraw the contents (ex.  in repsonse to the Mac's  Update event).\par 
\pard \li360\sa120 
Paint() is a method of many classes. By default (wb_win.h,) Paint() calls OnPaint() so for the application developer, Paint() is just a way to trigger OnPaint().  Starting with the 'a5' release, there should not be any methods named Paint() either inside w
xMac or your app either. Inside wxmac the various wxItems' OnPaint() methods depend upon being able to call wx_win.cc/OnPaint() and they do so with an explicit scope operation.\par 
\pard\plain \s252\li360\sb120\sa120\keepn \b\f20\fs28 12. wxDirectorySelector() - New \par 
\pard\plain \li360\sa120 \f20 This function is called like wxFileSelector, but instead of selecting files it allows the user to select a Directory (not unlike CodeWarriors Preferences->Path dialog). Th
is function is also called from wxFileSelector() is the proper flag values are passed in (by default they are not). If I remember this is in wx_utils.cc. The code is not mine - proper accredidation is in the source code. This f
unction also requires a DLOG and appropriate DITL's resources which had better be there when this is called. See xpmshow for and example of how this is used.\par 
}
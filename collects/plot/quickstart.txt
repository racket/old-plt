
____Plot quickstart guide

1) Making basic Plots

After loading the correct module '(require (lib "plot.scm" "plplot"))' type in the following command
(plot (line (lambda (x) x)) 
Any other function with the contract number -> number can be plotted in a similar fasion.
To plot multiple items, just give more arguments to the "plot" command:
(plot (line (lambda (x) (sin x))) (line (lambda (x) (cos x))))

The appearence of the plot can be changed by passing an assosiative list of parameters to 
the plot command as the first argument.
(plot '((x-min -1) (x-max 1) (title "Sin(x)")) (line (lambda (x) (sin x))))

For a full list of arguments see below.

The appearence of each individual plot item can be altered by passing an assosiative list 
of parameters to the plot item.
(plot (line (lambda (x) x) '((color green) (width 3))))

The plot command generates snips that contain information about the plot. The snips can be superimposed 
on each other :

(define a (plot (line (lambda (x) x))))
(define b (plot (line (lambda (x) (sin x)))))
a
b
(superimpose a b)

Besides plotting lines from functions in 2d, the ploter can also render a veriety of other datums
in several ways:

To plot a 3d function z = f(x,y) on a 2 dimentional surface:

(define 3dfun (lambda (x y) (* (sin x) (sin y))))

; By Contours:
(plot (contour 3dfun))

; By color shading
(plot (shade 3dfun))

; gradient field
(plot (field (gradient 3dfun)))

; all together
(plot '((x-min -1.5) (x-max 1.5) (y-min -1.5) (y-max 1.5) (title "gradient field +shdade + contours of F(x,y) = sin(x) * sin(y)"))     
      (shade 3dfun)
      (contour 3dfun)
      (field (gradient 3dfun) '((samples 25))))

; To plot discreet data points

(plot (points (list (make-posn 1 1) (make-posn 2 2)))

; To plot a 3d surface

(plot3d '((alt 30)) (surface 3dfun '((color green))))


2) Making custom plots.

Defining custom plots is simple : the plot command takes any number of plot items, which are functions
with the contract "number number number number 2dplotview% -> void" and calls them in order
the number args are x-min x-max y-min y-max, used to specify the range of the output window, while the 
2dplotview is the output window itself. Your custom function may then invoke any combination of methods
on the 2dplot view. 2Dplotview has the following methods defined:

 ; set-labels : string string string -> nothing
 ; sets the x, y and title lables

 ; plot-contours: (listof (listof number)), (listof number), (listof number), [number U (listof number)]
 ; plots a 3d function using contours
 ; the first argument is a list of lists containing Z values
 ; the second argument is the list of x values
 ; third is list of y values 
 ; the last arg is either a number specifying the number of levels or
 ; a list specifying the levels to plot
 
 ; plot-shades: (listof (listof number)), (listof number), (listof number), (listof number)
 ; plots a 3d function using shades to represent height
 ; args are same as for contours, except that only number of levels is permited
      
 ; plot-line : (listof posn)
 ; plots a line with the given points, represtented as posn
      
 ; plot-points : listof-posn
 ; plots given points with a . symbol
       
 ; plot-vectors: (listof (listof posn posn)) - > nothing
 ; plots a list of vectors
 ; each vector is specified by two posns, the first representing the tail,
 ; the second representing the head
     
 ; plot-vector : posn posn -> nothing
 ; plots a single vector. The first posn represents the tail, the second represents the head 
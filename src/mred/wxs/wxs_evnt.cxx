/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_evnt.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_stdev.h"





#include "wxscheme.h"
#include "wxs_evnt.h"
#include "wxscomon.h"


#if !defined(wx_mac)
#define NEW_EVENT_IDS 1
#else
#define NEW_EVENT_IDS 0
#endif


// @CREATOR ()

// These are not ready to be used:
// @ H "write-event" : bool WriteEvent(ostream%);
// @ H "read-event" : bool ReadEvent(istream%);


// Don't know where else to put these:


class os_wxEvent : public wxEvent {
 public:

  ~os_wxEvent();
};

Scheme_Object *os_wxEvent_class;

os_wxEvent::~os_wxEvent()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

static Scheme_Object *objscheme_wxEvent_GeteventClass(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  long v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-event-class", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxEvent *)cobj->primdata)->wxEvent::eventClass;
  else
    v = ((wxEvent *)cobj->primdata)->eventClass;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxEvent_SeteventClass(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  long v;

  if (n != 1) scheme_wrong_count("set-event-class", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:event%::event-class");
  ((wxEvent *)cobj->primdata)->eventClass = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxEvent_GeteventType(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  long v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-event-type", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxEvent *)cobj->primdata)->wxEvent::eventType;
  else
    v = ((wxEvent *)cobj->primdata)->eventType;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxEvent_SeteventType(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  long v;

  if (n != 1) scheme_wrong_count("set-event-type", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:event%::event-type");
  ((wxEvent *)cobj->primdata)->eventType = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxEvent_GeteventObject(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxObject* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-event-object", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxEvent *)cobj->primdata)->wxEvent::eventObject;
  else
    v = ((wxEvent *)cobj->primdata)->eventObject;

  return objscheme_bundle_wxObject(v);
}

static Scheme_Object *objscheme_wxEvent_SeteventObject(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  class wxObject* v;

  if (n != 1) scheme_wrong_count("set-event-object", 1, 1, n, p);

  v = objscheme_unbundle_wxObject(p[0], "wx:event%::event-object", 0);
  ((wxEvent *)cobj->primdata)->eventObject = v;

  return scheme_void;
}

static Scheme_Object *objscheme_classname_os_wxEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:event%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:event%");
}

void objscheme_setup_wxEvent(void *env)
{
if (os_wxEvent_class) {
    objscheme_add_global_class(os_wxEvent_class,  "wx:event%", env);
} else {
  os_wxEvent_class = objscheme_def_prim_class(env, "wx:event%", "wx:object%", NULL, 7);

  scheme_add_method_w_arity(os_wxEvent_class,"get-class-name",objscheme_classname_os_wxEvent, 0, 0);


  scheme_add_method_w_arity(os_wxEvent_class,"get-event-class", objscheme_wxEvent_GeteventClass, 0, 0);
  scheme_add_method_w_arity(os_wxEvent_class,"set-event-class", objscheme_wxEvent_SeteventClass, 1, 1);
  scheme_add_method_w_arity(os_wxEvent_class,"get-event-type", objscheme_wxEvent_GeteventType, 0, 0);
  scheme_add_method_w_arity(os_wxEvent_class,"set-event-type", objscheme_wxEvent_SeteventType, 1, 1);
  scheme_add_method_w_arity(os_wxEvent_class,"get-event-object", objscheme_wxEvent_GeteventObject, 0, 0);
  scheme_add_method_w_arity(os_wxEvent_class,"set-event-object", objscheme_wxEvent_SeteventObject, 1, 1);

  scheme_made_class(os_wxEvent_class);


}
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-scroll-top", scheme_make_integer(wxEVENT_TYPE_SCROLL_TOP), env);
#endif
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-scroll-bottom", scheme_make_integer(wxEVENT_TYPE_SCROLL_BOTTOM), env);
#endif
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-scroll-lineup", scheme_make_integer(wxEVENT_TYPE_SCROLL_LINEUP), env);
#endif
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-scroll-linedown", scheme_make_integer(wxEVENT_TYPE_SCROLL_LINEDOWN), env);
#endif
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-scroll-pageup", scheme_make_integer(wxEVENT_TYPE_SCROLL_PAGEUP), env);
#endif
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-scroll-pagedown", scheme_make_integer(wxEVENT_TYPE_SCROLL_PAGEDOWN), env);
#endif
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-scroll-thumbtrack", scheme_make_integer(wxEVENT_TYPE_SCROLL_THUMBTRACK), env);
#endif
  scheme_install_xc_global("wx:const-type-key-event", scheme_make_integer(wxTYPE_KEY_EVENT), env);
  scheme_install_xc_global("wx:const-type-command-event", scheme_make_integer(wxTYPE_COMMAND_EVENT), env);
  scheme_install_xc_global("wx:const-type-mouse-event", scheme_make_integer(wxTYPE_MOUSE_EVENT), env);
}

int objscheme_istype_wxEvent(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxEvent_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:event%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxEvent(class wxEvent *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxEvent_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxEvent *objscheme_unbundle_wxEvent(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxEvent(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxEvent *)o->primdata;
  else
    return (wxEvent *)o->primdata;
}








class os_wxCommandEvent : public wxCommandEvent {
 public:

  os_wxCommandEvent(Scheme_Object * obj, int x0);
  ~os_wxCommandEvent();
};

Scheme_Object *os_wxCommandEvent_class;

os_wxCommandEvent::os_wxCommandEvent(Scheme_Object * o, int x0)
: wxCommandEvent(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxCommandEvent::~os_wxCommandEvent()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxCommandEventIsSelection(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxCommandEvent *)((Scheme_Class_Object *)obj)->primdata)->IsSelection();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxCommandEventChecked(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxCommandEvent *)((Scheme_Class_Object *)obj)->primdata)->Checked();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxCommandEventGetString(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);

  

  
  r = ((wxCommandEvent *)((Scheme_Class_Object *)obj)->primdata)->GetString();

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxCommandEventGetSelection(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxCommandEvent *)((Scheme_Class_Object *)obj)->primdata)->GetSelection();

  
  
  return scheme_make_integer(r);
}

static Scheme_Object *objscheme_wxCommandEvent_GetextraLong(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  long v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-extra-long", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxCommandEvent *)cobj->primdata)->wxCommandEvent::extraLong;
  else
    v = ((wxCommandEvent *)cobj->primdata)->extraLong;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxCommandEvent_SetextraLong(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  long v;

  if (n != 1) scheme_wrong_count("set-extra-long", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:command-event%::extra-long");
  ((wxCommandEvent *)cobj->primdata)->extraLong = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxCommandEvent_GetcommandInt(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-command-int", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxCommandEvent *)cobj->primdata)->wxCommandEvent::commandInt;
  else
    v = ((wxCommandEvent *)cobj->primdata)->commandInt;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxCommandEvent_SetcommandInt(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-command-int", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:command-event%::command-int");
  ((wxCommandEvent *)cobj->primdata)->commandInt = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxCommandEvent_GetcommandString(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  string v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-command-string", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxCommandEvent *)cobj->primdata)->wxCommandEvent::commandString;
  else
    v = ((wxCommandEvent *)cobj->primdata)->commandString;

  return objscheme_bundle_string((char *)v);
}

static Scheme_Object *objscheme_wxCommandEvent_SetcommandString(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  string v;

  if (n != 1) scheme_wrong_count("set-command-string", 1, 1, n, p);

  v = (string)objscheme_unbundle_string(p[0], "wx:command-event%::command-string");
  ((wxCommandEvent *)cobj->primdata)->commandString = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxCommandEvent_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxCommandEvent *realobj;
  int x0;

  
  if (n != 1) 
    scheme_wrong_count("wx:command-event%::initialization", 1, 1, n, p);
  x0 = objscheme_unbundle_integer(p[0], "wx:command-event%::initialization");

  
  realobj = new os_wxCommandEvent(obj, x0);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxCommandEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:command-event%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:command-event%");
}

void objscheme_setup_wxCommandEvent(void *env)
{
if (os_wxCommandEvent_class) {
    objscheme_add_global_class(os_wxCommandEvent_class,  "wx:command-event%", env);
} else {
  os_wxCommandEvent_class = objscheme_def_prim_class(env, "wx:command-event%", "wx:event%", os_wxCommandEvent_ConstructScheme, 11);

  scheme_add_method_w_arity(os_wxCommandEvent_class,"get-class-name",objscheme_classname_os_wxCommandEvent, 0, 0);

 scheme_add_method_w_arity(os_wxCommandEvent_class, "is-selection?", os_wxCommandEventIsSelection, 0, 0);
 scheme_add_method_w_arity(os_wxCommandEvent_class, "checked?", os_wxCommandEventChecked, 0, 0);
 scheme_add_method_w_arity(os_wxCommandEvent_class, "get-string", os_wxCommandEventGetString, 0, 0);
 scheme_add_method_w_arity(os_wxCommandEvent_class, "get-selection", os_wxCommandEventGetSelection, 0, 0);

  scheme_add_method_w_arity(os_wxCommandEvent_class,"get-extra-long", objscheme_wxCommandEvent_GetextraLong, 0, 0);
  scheme_add_method_w_arity(os_wxCommandEvent_class,"set-extra-long", objscheme_wxCommandEvent_SetextraLong, 1, 1);
  scheme_add_method_w_arity(os_wxCommandEvent_class,"get-command-int", objscheme_wxCommandEvent_GetcommandInt, 0, 0);
  scheme_add_method_w_arity(os_wxCommandEvent_class,"set-command-int", objscheme_wxCommandEvent_SetcommandInt, 1, 1);
  scheme_add_method_w_arity(os_wxCommandEvent_class,"get-command-string", objscheme_wxCommandEvent_GetcommandString, 0, 0);
  scheme_add_method_w_arity(os_wxCommandEvent_class,"set-command-string", objscheme_wxCommandEvent_SetcommandString, 1, 1);

  scheme_made_class(os_wxCommandEvent_class);


}
  scheme_install_xc_global("wx:const-event-type-button-command", scheme_make_integer(wxEVENT_TYPE_BUTTON_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-checkbox-command", scheme_make_integer(wxEVENT_TYPE_CHECKBOX_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-choice-command", scheme_make_integer(wxEVENT_TYPE_CHOICE_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-listbox-command", scheme_make_integer(wxEVENT_TYPE_LISTBOX_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-text-command", scheme_make_integer(wxEVENT_TYPE_TEXT_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-multitext-command", scheme_make_integer(wxEVENT_TYPE_MULTITEXT_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-menu-command", scheme_make_integer(wxEVENT_TYPE_MENU_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-slider-command", scheme_make_integer(wxEVENT_TYPE_SLIDER_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-radiobox-command", scheme_make_integer(wxEVENT_TYPE_RADIOBOX_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-text-enter-command", scheme_make_integer(wxEVENT_TYPE_TEXT_ENTER_COMMAND), env);
  scheme_install_xc_global("wx:const-event-type-set-focus", scheme_make_integer(wxEVENT_TYPE_SET_FOCUS), env);
  scheme_install_xc_global("wx:const-event-type-kill-focus", scheme_make_integer(wxEVENT_TYPE_KILL_FOCUS), env);
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-scrollbar-command", scheme_make_integer(wxEVENT_TYPE_SCROLLBAR_COMMAND), env);
#endif
#if  NEW_EVENT_IDS
  scheme_install_xc_global("wx:const-event-type-virt-listbox-command", scheme_make_integer(wxEVENT_TYPE_VIRT_LISTBOX_COMMAND), env);
#endif
}

int objscheme_istype_wxCommandEvent(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxCommandEvent_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:command-event%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxCommandEvent(class wxCommandEvent *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxCommandEvent_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxCommandEvent *objscheme_unbundle_wxCommandEvent(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxCommandEvent(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxCommandEvent *)o->primdata;
  else
    return (wxCommandEvent *)o->primdata;
}





// @ "control-down?" : bool ControlDown();
// @ "shift-down?" : bool ShiftDown();





class os_wxKeyEvent : public wxKeyEvent {
 public:

  os_wxKeyEvent(Scheme_Object * obj, int x0);
  ~os_wxKeyEvent();
};

Scheme_Object *os_wxKeyEvent_class;

os_wxKeyEvent::os_wxKeyEvent(Scheme_Object * o, int x0)
: wxKeyEvent(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxKeyEvent::~os_wxKeyEvent()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxKeyEventKeyCode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);

  

  
  r = ((wxKeyEvent *)((Scheme_Class_Object *)obj)->primdata)->KeyCode();

  
  
  return scheme_make_integer(r);
}

static Scheme_Object *objscheme_wxKeyEvent_GetkeyCode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  long v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-key-code", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxKeyEvent *)cobj->primdata)->wxKeyEvent::keyCode;
  else
    v = ((wxKeyEvent *)cobj->primdata)->keyCode;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxKeyEvent_SetkeyCode(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  long v;

  if (n != 1) scheme_wrong_count("set-key-code", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:key-event%::key-code");
  ((wxKeyEvent *)cobj->primdata)->keyCode = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxKeyEvent_GetshiftDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-shift-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxKeyEvent *)cobj->primdata)->wxKeyEvent::shiftDown;
  else
    v = ((wxKeyEvent *)cobj->primdata)->shiftDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxKeyEvent_SetshiftDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-shift-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:key-event%::shift-down");
  ((wxKeyEvent *)cobj->primdata)->shiftDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxKeyEvent_GetcontrolDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-control-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxKeyEvent *)cobj->primdata)->wxKeyEvent::controlDown;
  else
    v = ((wxKeyEvent *)cobj->primdata)->controlDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxKeyEvent_SetcontrolDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-control-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:key-event%::control-down");
  ((wxKeyEvent *)cobj->primdata)->controlDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxKeyEvent_GetmetaDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-meta-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxKeyEvent *)cobj->primdata)->wxKeyEvent::metaDown;
  else
    v = ((wxKeyEvent *)cobj->primdata)->metaDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxKeyEvent_SetmetaDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-meta-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:key-event%::meta-down");
  ((wxKeyEvent *)cobj->primdata)->metaDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxKeyEvent_GetaltDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-alt-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxKeyEvent *)cobj->primdata)->wxKeyEvent::altDown;
  else
    v = ((wxKeyEvent *)cobj->primdata)->altDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxKeyEvent_SetaltDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-alt-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:key-event%::alt-down");
  ((wxKeyEvent *)cobj->primdata)->altDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxKeyEvent_GettimeStamp(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  long v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-time-stamp", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxKeyEvent *)cobj->primdata)->wxKeyEvent::timeStamp;
  else
    v = ((wxKeyEvent *)cobj->primdata)->timeStamp;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxKeyEvent_SettimeStamp(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  long v;

  if (n != 1) scheme_wrong_count("set-time-stamp", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:key-event%::time-stamp");
  ((wxKeyEvent *)cobj->primdata)->timeStamp = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxKeyEvent_Getx(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-x", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxKeyEvent *)cobj->primdata)->wxKeyEvent::x;
  else
    v = ((wxKeyEvent *)cobj->primdata)->x;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxKeyEvent_Setx(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-x", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:key-event%::x");
  ((wxKeyEvent *)cobj->primdata)->x = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxKeyEvent_Gety(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-y", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxKeyEvent *)cobj->primdata)->wxKeyEvent::y;
  else
    v = ((wxKeyEvent *)cobj->primdata)->y;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxKeyEvent_Sety(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-y", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:key-event%::y");
  ((wxKeyEvent *)cobj->primdata)->y = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxKeyEvent_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxKeyEvent *realobj;
  int x0;

  
  if (n != 1) 
    scheme_wrong_count("wx:key-event%::initialization", 1, 1, n, p);
  x0 = objscheme_unbundle_integer(p[0], "wx:key-event%::initialization");

  
  realobj = new os_wxKeyEvent(obj, x0);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxKeyEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:key-event%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:key-event%");
}

void objscheme_setup_wxKeyEvent(void *env)
{
if (os_wxKeyEvent_class) {
    objscheme_add_global_class(os_wxKeyEvent_class,  "wx:key-event%", env);
} else {
  os_wxKeyEvent_class = objscheme_def_prim_class(env, "wx:key-event%", "wx:event%", os_wxKeyEvent_ConstructScheme, 18);

  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-class-name",objscheme_classname_os_wxKeyEvent, 0, 0);

 scheme_add_method_w_arity(os_wxKeyEvent_class, "key-code", os_wxKeyEventKeyCode, 0, 0);

  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-key-code", objscheme_wxKeyEvent_GetkeyCode, 0, 0);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"set-key-code", objscheme_wxKeyEvent_SetkeyCode, 1, 1);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-shift-down", objscheme_wxKeyEvent_GetshiftDown, 0, 0);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"set-shift-down", objscheme_wxKeyEvent_SetshiftDown, 1, 1);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-control-down", objscheme_wxKeyEvent_GetcontrolDown, 0, 0);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"set-control-down", objscheme_wxKeyEvent_SetcontrolDown, 1, 1);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-meta-down", objscheme_wxKeyEvent_GetmetaDown, 0, 0);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"set-meta-down", objscheme_wxKeyEvent_SetmetaDown, 1, 1);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-alt-down", objscheme_wxKeyEvent_GetaltDown, 0, 0);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"set-alt-down", objscheme_wxKeyEvent_SetaltDown, 1, 1);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-time-stamp", objscheme_wxKeyEvent_GettimeStamp, 0, 0);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"set-time-stamp", objscheme_wxKeyEvent_SettimeStamp, 1, 1);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-x", objscheme_wxKeyEvent_Getx, 0, 0);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"set-x", objscheme_wxKeyEvent_Setx, 1, 1);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"get-y", objscheme_wxKeyEvent_Gety, 0, 0);
  scheme_add_method_w_arity(os_wxKeyEvent_class,"set-y", objscheme_wxKeyEvent_Sety, 1, 1);

  scheme_made_class(os_wxKeyEvent_class);


}
  scheme_install_xc_global("wx:const-event-type-char", scheme_make_integer(wxEVENT_TYPE_CHAR), env);
  scheme_install_xc_global("wx:const-k-back", scheme_make_integer(WXK_BACK), env);
  scheme_install_xc_global("wx:const-k-tab", scheme_make_integer(WXK_TAB), env);
  scheme_install_xc_global("wx:const-k-return", scheme_make_integer(WXK_RETURN), env);
  scheme_install_xc_global("wx:const-k-escape", scheme_make_integer(WXK_ESCAPE), env);
  scheme_install_xc_global("wx:const-k-space", scheme_make_integer(WXK_SPACE), env);
  scheme_install_xc_global("wx:const-k-delete", scheme_make_integer(WXK_DELETE), env);
  scheme_install_xc_global("wx:const-k-start", scheme_make_integer(WXK_START), env);
  scheme_install_xc_global("wx:const-k-lbutton", scheme_make_integer(WXK_LBUTTON), env);
  scheme_install_xc_global("wx:const-k-rbutton", scheme_make_integer(WXK_RBUTTON), env);
  scheme_install_xc_global("wx:const-k-cancel", scheme_make_integer(WXK_CANCEL), env);
  scheme_install_xc_global("wx:const-k-mbutton", scheme_make_integer(WXK_MBUTTON), env);
  scheme_install_xc_global("wx:const-k-clear", scheme_make_integer(WXK_CLEAR), env);
  scheme_install_xc_global("wx:const-k-shift", scheme_make_integer(WXK_SHIFT), env);
  scheme_install_xc_global("wx:const-k-control", scheme_make_integer(WXK_CONTROL), env);
  scheme_install_xc_global("wx:const-k-menu", scheme_make_integer(WXK_MENU), env);
  scheme_install_xc_global("wx:const-k-pause", scheme_make_integer(WXK_PAUSE), env);
  scheme_install_xc_global("wx:const-k-capital", scheme_make_integer(WXK_CAPITAL), env);
  scheme_install_xc_global("wx:const-k-prior", scheme_make_integer(WXK_PRIOR), env);
  scheme_install_xc_global("wx:const-k-next", scheme_make_integer(WXK_NEXT), env);
  scheme_install_xc_global("wx:const-k-end", scheme_make_integer(WXK_END), env);
  scheme_install_xc_global("wx:const-k-home", scheme_make_integer(WXK_HOME), env);
  scheme_install_xc_global("wx:const-k-left", scheme_make_integer(WXK_LEFT), env);
  scheme_install_xc_global("wx:const-k-up", scheme_make_integer(WXK_UP), env);
  scheme_install_xc_global("wx:const-k-right", scheme_make_integer(WXK_RIGHT), env);
  scheme_install_xc_global("wx:const-k-down", scheme_make_integer(WXK_DOWN), env);
  scheme_install_xc_global("wx:const-k-select", scheme_make_integer(WXK_SELECT), env);
  scheme_install_xc_global("wx:const-k-print", scheme_make_integer(WXK_PRINT), env);
  scheme_install_xc_global("wx:const-k-execute", scheme_make_integer(WXK_EXECUTE), env);
  scheme_install_xc_global("wx:const-k-snapshot", scheme_make_integer(WXK_SNAPSHOT), env);
  scheme_install_xc_global("wx:const-k-insert", scheme_make_integer(WXK_INSERT), env);
  scheme_install_xc_global("wx:const-k-help", scheme_make_integer(WXK_HELP), env);
  scheme_install_xc_global("wx:const-k-numpad0", scheme_make_integer(WXK_NUMPAD0), env);
  scheme_install_xc_global("wx:const-k-numpad1", scheme_make_integer(WXK_NUMPAD1), env);
  scheme_install_xc_global("wx:const-k-numpad2", scheme_make_integer(WXK_NUMPAD2), env);
  scheme_install_xc_global("wx:const-k-numpad3", scheme_make_integer(WXK_NUMPAD3), env);
  scheme_install_xc_global("wx:const-k-numpad4", scheme_make_integer(WXK_NUMPAD4), env);
  scheme_install_xc_global("wx:const-k-numpad5", scheme_make_integer(WXK_NUMPAD5), env);
  scheme_install_xc_global("wx:const-k-numpad6", scheme_make_integer(WXK_NUMPAD6), env);
  scheme_install_xc_global("wx:const-k-numpad7", scheme_make_integer(WXK_NUMPAD7), env);
  scheme_install_xc_global("wx:const-k-numpad8", scheme_make_integer(WXK_NUMPAD8), env);
  scheme_install_xc_global("wx:const-k-numpad9", scheme_make_integer(WXK_NUMPAD9), env);
  scheme_install_xc_global("wx:const-k-multiply", scheme_make_integer(WXK_MULTIPLY), env);
  scheme_install_xc_global("wx:const-k-add", scheme_make_integer(WXK_ADD), env);
  scheme_install_xc_global("wx:const-k-separator", scheme_make_integer(WXK_SEPARATOR), env);
  scheme_install_xc_global("wx:const-k-subtract", scheme_make_integer(WXK_SUBTRACT), env);
  scheme_install_xc_global("wx:const-k-decimal", scheme_make_integer(WXK_DECIMAL), env);
  scheme_install_xc_global("wx:const-k-divide", scheme_make_integer(WXK_DIVIDE), env);
  scheme_install_xc_global("wx:const-k-f1", scheme_make_integer(WXK_F1), env);
  scheme_install_xc_global("wx:const-k-f2", scheme_make_integer(WXK_F2), env);
  scheme_install_xc_global("wx:const-k-f3", scheme_make_integer(WXK_F3), env);
  scheme_install_xc_global("wx:const-k-f4", scheme_make_integer(WXK_F4), env);
  scheme_install_xc_global("wx:const-k-f5", scheme_make_integer(WXK_F5), env);
  scheme_install_xc_global("wx:const-k-f6", scheme_make_integer(WXK_F6), env);
  scheme_install_xc_global("wx:const-k-f7", scheme_make_integer(WXK_F7), env);
  scheme_install_xc_global("wx:const-k-f8", scheme_make_integer(WXK_F8), env);
  scheme_install_xc_global("wx:const-k-f9", scheme_make_integer(WXK_F9), env);
  scheme_install_xc_global("wx:const-k-f10", scheme_make_integer(WXK_F10), env);
  scheme_install_xc_global("wx:const-k-f11", scheme_make_integer(WXK_F11), env);
  scheme_install_xc_global("wx:const-k-f12", scheme_make_integer(WXK_F12), env);
  scheme_install_xc_global("wx:const-k-f13", scheme_make_integer(WXK_F13), env);
  scheme_install_xc_global("wx:const-k-f14", scheme_make_integer(WXK_F14), env);
  scheme_install_xc_global("wx:const-k-f15", scheme_make_integer(WXK_F15), env);
  scheme_install_xc_global("wx:const-k-f16", scheme_make_integer(WXK_F16), env);
  scheme_install_xc_global("wx:const-k-f17", scheme_make_integer(WXK_F17), env);
  scheme_install_xc_global("wx:const-k-f18", scheme_make_integer(WXK_F18), env);
  scheme_install_xc_global("wx:const-k-f19", scheme_make_integer(WXK_F19), env);
  scheme_install_xc_global("wx:const-k-f20", scheme_make_integer(WXK_F20), env);
  scheme_install_xc_global("wx:const-k-f21", scheme_make_integer(WXK_F21), env);
  scheme_install_xc_global("wx:const-k-f22", scheme_make_integer(WXK_F22), env);
  scheme_install_xc_global("wx:const-k-f23", scheme_make_integer(WXK_F23), env);
  scheme_install_xc_global("wx:const-k-f24", scheme_make_integer(WXK_F24), env);
  scheme_install_xc_global("wx:const-k-numlock", scheme_make_integer(WXK_NUMLOCK), env);
  scheme_install_xc_global("wx:const-k-scroll", scheme_make_integer(WXK_SCROLL), env);
}

int objscheme_istype_wxKeyEvent(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxKeyEvent_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:key-event%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxKeyEvent(class wxKeyEvent *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxKeyEvent_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxKeyEvent *objscheme_unbundle_wxKeyEvent(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxKeyEvent(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxKeyEvent *)o->primdata;
  else
    return (wxKeyEvent *)o->primdata;
}




// @ "control-down?" : bool ControlDown();
// @ "shift-down?" : bool ShiftDown();
// @ "left-down?" : bool LeftDown();
// @ "left-is-down?" : bool LeftIsDown();
// @ "left-up?" : bool LeftUp();
// @ "middle-down?" : bool MiddleDown();
// @ "middle-is-down?" : bool MiddleIsDown();
// @ "middle-up?" : bool MiddleUp();
// @ "right-down?" : bool RightDown();
// @ "right-is-down?" : bool RightIsDown();
// @ "right-up?" : bool RightUp();
// @ "position" : void Position(float*,float*);



class os_wxMouseEvent : public wxMouseEvent {
 public:

  os_wxMouseEvent(Scheme_Object * obj, int x0);
  ~os_wxMouseEvent();
};

Scheme_Object *os_wxMouseEvent_class;

os_wxMouseEvent::os_wxMouseEvent(Scheme_Object * o, int x0)
: wxMouseEvent(x0)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxMouseEvent::~os_wxMouseEvent()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventMoving(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->Moving();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventIsButton(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->IsButton();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventLeaving(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->Leaving();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventEntering(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->Entering();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventDragging(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->Dragging();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventButtonUp(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  int x0;

  
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:mouse-event%::button-up?");
  } else
    x0 = -1;

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->ButtonUp(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventButtonDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  int x0;

  
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:mouse-event%::button-down?");
  } else
    x0 = -1;

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->ButtonDown(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventButtonDClick(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  int x0;

  
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:mouse-event%::button-d-click?");
  } else
    x0 = -1;

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->ButtonDClick(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxMouseEventButton(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  int x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:mouse-event%::button?");

  
  r = ((wxMouseEvent *)((Scheme_Class_Object *)obj)->primdata)->Button(x0);

  
  
  return (r ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxMouseEvent_GetleftDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-left-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::leftDown;
  else
    v = ((wxMouseEvent *)cobj->primdata)->leftDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxMouseEvent_SetleftDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-left-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:mouse-event%::left-down");
  ((wxMouseEvent *)cobj->primdata)->leftDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_GetmiddleDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-middle-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::middleDown;
  else
    v = ((wxMouseEvent *)cobj->primdata)->middleDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxMouseEvent_SetmiddleDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-middle-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:mouse-event%::middle-down");
  ((wxMouseEvent *)cobj->primdata)->middleDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_GetrightDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-right-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::rightDown;
  else
    v = ((wxMouseEvent *)cobj->primdata)->rightDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxMouseEvent_SetrightDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-right-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:mouse-event%::right-down");
  ((wxMouseEvent *)cobj->primdata)->rightDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_GetshiftDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-shift-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::shiftDown;
  else
    v = ((wxMouseEvent *)cobj->primdata)->shiftDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxMouseEvent_SetshiftDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-shift-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:mouse-event%::shift-down");
  ((wxMouseEvent *)cobj->primdata)->shiftDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_GetcontrolDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-control-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::controlDown;
  else
    v = ((wxMouseEvent *)cobj->primdata)->controlDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxMouseEvent_SetcontrolDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-control-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:mouse-event%::control-down");
  ((wxMouseEvent *)cobj->primdata)->controlDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_GetmetaDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-meta-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::metaDown;
  else
    v = ((wxMouseEvent *)cobj->primdata)->metaDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxMouseEvent_SetmetaDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-meta-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:mouse-event%::meta-down");
  ((wxMouseEvent *)cobj->primdata)->metaDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_GetaltDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-alt-down", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::altDown;
  else
    v = ((wxMouseEvent *)cobj->primdata)->altDown;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxMouseEvent_SetaltDown(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-alt-down", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "wx:mouse-event%::alt-down");
  ((wxMouseEvent *)cobj->primdata)->altDown = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_Getx(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-x", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::x;
  else
    v = ((wxMouseEvent *)cobj->primdata)->x;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxMouseEvent_Setx(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-x", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:mouse-event%::x");
  ((wxMouseEvent *)cobj->primdata)->x = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_Gety(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-y", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::y;
  else
    v = ((wxMouseEvent *)cobj->primdata)->y;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxMouseEvent_Sety(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-y", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "wx:mouse-event%::y");
  ((wxMouseEvent *)cobj->primdata)->y = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMouseEvent_GettimeStamp(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  long v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-time-stamp", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMouseEvent *)cobj->primdata)->wxMouseEvent::timeStamp;
  else
    v = ((wxMouseEvent *)cobj->primdata)->timeStamp;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxMouseEvent_SettimeStamp(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  long v;

  if (n != 1) scheme_wrong_count("set-time-stamp", 1, 1, n, p);

  v = objscheme_unbundle_integer(p[0], "wx:mouse-event%::time-stamp");
  ((wxMouseEvent *)cobj->primdata)->timeStamp = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMouseEvent_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxMouseEvent *realobj;
  int x0;

  
  if (n != 1) 
    scheme_wrong_count("wx:mouse-event%::initialization", 1, 1, n, p);
  x0 = objscheme_unbundle_integer(p[0], "wx:mouse-event%::initialization");

  
  realobj = new os_wxMouseEvent(obj, x0);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxMouseEvent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:mouse-event%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:mouse-event%");
}

void objscheme_setup_wxMouseEvent(void *env)
{
if (os_wxMouseEvent_class) {
    objscheme_add_global_class(os_wxMouseEvent_class,  "wx:mouse-event%", env);
} else {
  os_wxMouseEvent_class = objscheme_def_prim_class(env, "wx:mouse-event%", "wx:event%", os_wxMouseEvent_ConstructScheme, 30);

  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-class-name",objscheme_classname_os_wxMouseEvent, 0, 0);

 scheme_add_method_w_arity(os_wxMouseEvent_class, "moving?", os_wxMouseEventMoving, 0, 0);
 scheme_add_method_w_arity(os_wxMouseEvent_class, "is-button?", os_wxMouseEventIsButton, 0, 0);
 scheme_add_method_w_arity(os_wxMouseEvent_class, "leaving?", os_wxMouseEventLeaving, 0, 0);
 scheme_add_method_w_arity(os_wxMouseEvent_class, "entering?", os_wxMouseEventEntering, 0, 0);
 scheme_add_method_w_arity(os_wxMouseEvent_class, "dragging?", os_wxMouseEventDragging, 0, 0);
 scheme_add_method_w_arity(os_wxMouseEvent_class, "button-up?", os_wxMouseEventButtonUp, 0, 1);
 scheme_add_method_w_arity(os_wxMouseEvent_class, "button-down?", os_wxMouseEventButtonDown, 0, 1);
 scheme_add_method_w_arity(os_wxMouseEvent_class, "button-d-click?", os_wxMouseEventButtonDClick, 0, 1);
 scheme_add_method_w_arity(os_wxMouseEvent_class, "button?", os_wxMouseEventButton, 1, 1);

  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-left-down", objscheme_wxMouseEvent_GetleftDown, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-left-down", objscheme_wxMouseEvent_SetleftDown, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-middle-down", objscheme_wxMouseEvent_GetmiddleDown, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-middle-down", objscheme_wxMouseEvent_SetmiddleDown, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-right-down", objscheme_wxMouseEvent_GetrightDown, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-right-down", objscheme_wxMouseEvent_SetrightDown, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-shift-down", objscheme_wxMouseEvent_GetshiftDown, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-shift-down", objscheme_wxMouseEvent_SetshiftDown, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-control-down", objscheme_wxMouseEvent_GetcontrolDown, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-control-down", objscheme_wxMouseEvent_SetcontrolDown, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-meta-down", objscheme_wxMouseEvent_GetmetaDown, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-meta-down", objscheme_wxMouseEvent_SetmetaDown, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-alt-down", objscheme_wxMouseEvent_GetaltDown, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-alt-down", objscheme_wxMouseEvent_SetaltDown, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-x", objscheme_wxMouseEvent_Getx, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-x", objscheme_wxMouseEvent_Setx, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-y", objscheme_wxMouseEvent_Gety, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-y", objscheme_wxMouseEvent_Sety, 1, 1);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"get-time-stamp", objscheme_wxMouseEvent_GettimeStamp, 0, 0);
  scheme_add_method_w_arity(os_wxMouseEvent_class,"set-time-stamp", objscheme_wxMouseEvent_SettimeStamp, 1, 1);

  scheme_made_class(os_wxMouseEvent_class);


}
  scheme_install_xc_global("wx:const-event-type-left-down", scheme_make_integer(wxEVENT_TYPE_LEFT_DOWN), env);
  scheme_install_xc_global("wx:const-event-type-left-up", scheme_make_integer(wxEVENT_TYPE_LEFT_UP), env);
  scheme_install_xc_global("wx:const-event-type-middle-down", scheme_make_integer(wxEVENT_TYPE_MIDDLE_DOWN), env);
  scheme_install_xc_global("wx:const-event-type-middle-up", scheme_make_integer(wxEVENT_TYPE_MIDDLE_UP), env);
  scheme_install_xc_global("wx:const-event-type-right-down", scheme_make_integer(wxEVENT_TYPE_RIGHT_DOWN), env);
  scheme_install_xc_global("wx:const-event-type-right-up", scheme_make_integer(wxEVENT_TYPE_RIGHT_UP), env);
  scheme_install_xc_global("wx:const-event-type-motion", scheme_make_integer(wxEVENT_TYPE_MOTION), env);
  scheme_install_xc_global("wx:const-event-type-enter-window", scheme_make_integer(wxEVENT_TYPE_ENTER_WINDOW), env);
  scheme_install_xc_global("wx:const-event-type-leave-window", scheme_make_integer(wxEVENT_TYPE_LEAVE_WINDOW), env);
  scheme_install_xc_global("wx:const-event-type-left-dclick", scheme_make_integer(wxEVENT_TYPE_LEFT_DCLICK), env);
  scheme_install_xc_global("wx:const-event-type-middle-dclick", scheme_make_integer(wxEVENT_TYPE_MIDDLE_DCLICK), env);
  scheme_install_xc_global("wx:const-event-type-right-dclick", scheme_make_integer(wxEVENT_TYPE_RIGHT_DCLICK), env);
}

int objscheme_istype_wxMouseEvent(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMouseEvent_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:mouse-event%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMouseEvent(class wxMouseEvent *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMouseEvent_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMouseEvent *objscheme_unbundle_wxMouseEvent(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMouseEvent(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMouseEvent *)o->primdata;
  else
    return (wxMouseEvent *)o->primdata;
}


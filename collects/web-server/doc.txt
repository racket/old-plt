_Web-server_ Collection
=======================

Launchers
=========

The _Web_ _server_ collection provides two launchers.  The "web-server" launcher
starts the Web server.  The "web-server-monitor" launcher monitors a Web
server by periodically sending it requests.  Both launchers support the
-h or --help flags which describe other available options.

The command line 
  web-server [-p <port>] [-f <configuration-table-file>]
starts the server on port 80 or <port> and uses the configuration options
from the "configuration-table" file of the web-server collection or from
the specified configuration file.

The command line
  web-server-monitor [-p <port>]
                     [-f <frequency>]
                     [-t <timeout>]
		     <alert-email> <host-name>
polls any Web server running on host <host-name> at port <port> (or port 80)
every <frequency> seconds (or 1 hour).  If the server does not respond to
a HEAD HTTP request for the homepage within <timeout> (or 75) seconds or
sends an error response, the monitor will notify <alert-email> of the problem.

Another Start
=============

To use the Web server without a launcher, require web-server.ss:
  (require (lib "web-server.ss" "web-server"))

This provides one main function:
> serve : configuration [nat] -> (-> void)
  (define (serve configuration port) ...)
  
  The serve function starts the Web server, just like the launcher does,
  but the configuration argument supplies the server's settings.  The
  optional port argument overrides the port supplied by the configuration.
  The result of invoking serve is a function of no arguments that shuts down
  the server.

A later section describes the remaining semi-internal functions.

Serving Content
===============

By default, the Web server serves files out of the directory
(build-path (collection-path "web-server") "default-web-root" "htdocs"),
uless the function serve was called with a virtual-hosts argument or
the configuration tool modified the location.

Instead of serving files from a special directory verbatim, the Web server
executes the contained Scheme code and serves the output. By default, the
special directory  is named "servlets" within the "default-web-root" of the
"web-server" collection directory.  Each file in that directory must evaluate
to a servlet.  A servlet is a unit/sig that imports the servlet^
signature and exports nothing.  (Search in help-desk for more information on
unit/sig and on signatures.)  To construct a unit/sig with the appropriate
imports, the servlet must require the two modules providing unit/sigs and the
servlet^ signature:

(require (lib "unitsig.ss")
         (lib "servlet-sig.ss" "web-server"))
(unit/sig ()
  (import servlet^)
  ...insert servlet code here...)

The last value in the unit/sig must be a response to an HTTP request.
A Response is one of the following:

 - an X-expression representing HTML
   (Search for XML in help-desk.)

 - a (listof string) where
   - The first string is the mime type
     (often "text/html", but see RFC 2822 for other options).
   - The rest of the strings provide the document's content.

 > (make-response/full code message seconds mime extras body) where
   - code is a natural number indicating the HTTP response code
   - message is a string describing the code to a human
   - seconds is a natural number indicating the time the resource was created.
                Use (current-seconds) for dynamically created responses.
   - mime is a string indicating the response type.
   - extras is an environment containing extra headers for
               redirects, authentication, or cookies.
   - body is a (listof string)

an environment is a (listof (cons symbol string))

Evaluating (require (lib "servlet-sig.ss" "web-server")) loads
the servlet^ signature consisting of the following imports:
  - initial-request : request, where a request is
    (make-request method uri headers bindings host-ip client-ip), where
    - method : (Union 'get 'post)
    - uri : URL see the net collection in help-desk for details
    - headers : environment
		optional HTTP headers for this request
    - bindings : environment
		 name value pairs from the form submitted or the query part
               of the URL.

The path part of the URL supplies the file path to the servlet relative to the
"servlets" directory.  However, paths may also contain extra path components
that servlets may use as additional input.  For example all of the following
URLs refer to the same servlet:

  http://www.plt-scheme.org/servlets/my-servlet
  http://www.plt-scheme.org/servlets/my-servlet/extra
  http://www.plt-scheme.org/servlets/my-servlet/extra/directories

The above imports support handling a single input from a Web form. To ease the
development of more interactive servlets, the servlet^ signature also provides
the following functions:

> send/suspend : (str -> response) -> request

  The argument, a function that consumes a string, is given a URL that can be
  used in the document.  The argument function must produce a response
  corresponding to the document's body.  Requests to the given URL resume the
  computation at the point send/suspend was invoked.  Thus, the argument
  function normally produces an HTML form with the "action" attribute set to
  the provided URL.  The result of send/suspend represents the next request.

> send/finish : response -> void

  This provides a convenient way to report an error or otherwise produce
  a final response.  Once called, all URLs generated by send/suspend
  become invalid and the servlet terminates.  Calling send/finish allows the
  system to reclaim resources consumed by the servlet.

> adjust-timeout! : nat -> void

  The server will shutdown each instance of a servlet after an unspecified
  default amount of time since the last time the servlet handled a request.
  Calling adjust-timeout! allows the programmer to choose this number of
  seconds.  Larger numbers consume more resources while smaller numbers force
  the user to restart computations more often.

The servlet-helpers module, required with
  (require (lib "servlet-helpers.ss" "web-server"))
provides a few additional functions helpful for constructing servlets:

> extract-binding/single : sym environment -> str
  This extracts a single value associated with sym in the form bindings.
  If multiple or zero values are associated with the name, it raises an
  exception.

> extract-bindings : sym environment -> (listof str)
  returns a list of values associated with the name sym.

> extract-user-pass : environment -> (U #f (cons str str))
  (define (extract-user-pass headers) ...)
  Servlets may easily implement password based authentication by extracting
  password information from the HTTP headers.  The return value is either a
  pair consisting of the username and password from the headers or #f if no
  password was provided.


For small example servlets, look in the "examples" directory in
the "servlets" directory in the "default-web-root" of the web-server
collection.

Special URLs
============

The Web server caches passwords and servlets for performance reasons.
Requesting the URL
  http://my-host/conf/refresh-passwords
reloads the password file.  After updating a servlet, loading the URL
  http://my-host/conf/refresh-servlets
causes the server to reload each servlet on the next invocation.
This loses any per-servlet state (not per servlet instance state) computed
before the unit invocation.    

Semi-Internal Functions
=======================

The following functions expose more of the Web server for use by the
development environment.  They are not intended for general use.
They may change at anytime or disappear entirely.

> server-loop : custodian tcp-listener config initial-timeout -> void
  where custodian is the parent custodian for servlets.
	tcp-listener is where requests arrive.
	config encapsulates most of the state of the server.
        initial-timeout is the number of seconds before timing out connections

> make-config : host-table script-table instance-table access-table -> config
  where
    config = (make-config host-table script-table instance-table access-table)
    host-table = str -> host
		 maps host names to hosts
    script-table = (hash-table-of sym script)
		 maps servlet names to servlet units
    script = (unit servlet^ -> response)
	     represents a servlet that is invoked on each request
    instance-table = (hash-table-of sym servlet-instance)
		     maps the path part of a URL to the running servlet
    access-table = (hash-table-of sym (str sym str -> (U #f str)))
		   maps host names to functions that accept a protection
		   domain, a user name, and a password and either 
		   return #f if access is not denied (i.e. is accessible)
		   or a string prompting for a particular password
		   (i.e. "Course Grades").
    servlet-instance =
      (make-servlet-instance
        nat channel (hash-table-of sym (continuation request)))
      The natural number counts the continuations suspended by this servlet.  
      The channel communicates HTTP requests from the connection thread to
      the suspended servlet.  The hash-table maps parameter parts of URLs
      to suspended continuations.

> add-new-instance : sym instance-table -> void
  This creates a new servlet-instance and installs it in the instance-table
  under the name specified by sym.

> gen-send/suspend : url sym instance-table (response -> void) (-> void)
                     (channel -> void)
                  -> (str -> response)
                  -> request
  (define (gen-send/suspend uri invoke-id instances output-page
                            update-time! update-channel!)
    ...)

  This produces a function like send/suspend : ((str -> response) -> request),
  customized for a particular instance of a servlet.  The uri must 
  refer to the servlet, which instances must map invoke-id to.  The
  output-page function is called to send responses to the Web browser
  (remotely via HTTP in the normal server, locally via some other means
   in the development environment).  gen-send/suspend calls update-time! 
  (to reset timeouts) upon each Web request.  update-channel! receives the
  channel used to send responses to the connection thread.


_Slideshow_ Quick Start
=======================

In DrScheme:

 1. Open "tutorial-show.ss", which is in the "slideshow" collection.
    
    The path depends on your PLT install directory:
       <plt install dir>/collects/slideshow/tutorial-show.ss

 2. Set DrScheme's language to "(module ...)".
 
    Use the "Choose Language" menu item in the "Language" menu.

 3. Click DrScheme's "Execute" button.


Slideshow Overview
====================

Slideshow is a library for creating presentation slides. Unlike
Powerpoint, Slideshow provides no WYSIWYG interface for constructing
slides. Instead, like SliTeX, a presentation is generated by a
program.

For constructing slide images, Slideshow builds on the "texpict"
collection's utilities for constructing images. More specifically,
all of the functions provided by `(lib "mrpict.ss" "texpict")'
are available for creating images.

In addition to the "mrpict.ss" functions, Slideshow provides functions
for constructing paragraphs and bulleted lists, staging parts of a
slide, managing fonts, viewing the slides, and scaling slides for a
particular display.

For boring text slides, the functions listed in this document are
sufficient to construct slides. More interesting slides --- with
images and diagrams --- require the more general picture-construction
functions in "texpict".

Slideshow Modules
=================

The _run.ss_ module acts as a language (an extension of MzScheme) for
defining a slide presentation. Roughly, "show startup dialog" is
implicitly inserted before the body of a module in the _run.ss_
language, and "show presentation window" is implicitly added to the
end of the body.

The _slideshow.ss_ module is like _run.ss_, except that it can be used
by utility modules (i.e., other than the main module of a
presentation) to get access to all of the Slideshow functions without
the implicit start-up actions.

  [The "slideshow.ss" module also checks the MzScheme paramater
   `current-command-line-arguments'. If the command line is non-empty,
   "slideshow.ss" loads the indicated modules and then shows the
   presentation window. That's why "slideshow.ss" is the main module
   for the "Slideshow" executable.]

The rest of this section repeats much of the information that is in
"tutorial-show.ss" (see "Quick Start" at the top of this
documentation).

The main Slideshow function is `slide/title', which adds a slide to
the presentation with a given title and content. For example, the
Hello World presentation can be defined by the following module:

 (module hello-world (lib "run.ss" "slideshow")
   (slide/title
    "How to Say Hello"
    (t "Hello World!")))
 
The `t' function creates a pict containing the given text in the
default font and style.

Executing the above module pops up a slide-presentation window. Type
Alt-q (or Meta-q) to end the slides. More controls:

    Alt-q or Meta-q               :  end slide show
    Right arrow, Space, f, or n   :  next slide
    Left arrow or b               :  previous slide
    g                             :  last slide
    1                             :  first slide
    Alt-g or Meta-g               :  select a slide
    Alt-c or Meta-c               :  show/hide commentary

In general, each element after the title string for `slide/title' is a
pict that will be centered on the slide. The picts are stacked
verically and top-aligned, with `gap-size' separation between each
pict.

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (slide/title
    "How to Say Hello"
    (t "Hello World!")
    (t "Goodbye Dlrow!")))

The `slide/title/center' form centers the stacked picts vertically
instead of putting them at the top of the slide:

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (slide/title/center
    "How to Say Hello"
    (t "Hello World!")
    (t "Goodbye Dlrow!")))

Various functions format paragraphs and generate bullted items for
lists. For example, `item/page' creates a bulleted paragraph that
spaces the width of the slide:

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (slide/title
    "How to Say Hello"
    (page-item "If you want to create an example, you"
               "can always do something with" (bt "Hello World!"))
    (page-item "It's a bit silly, but a follow-up example"
               "could be" (bt "Goodbye Dlrow!"))))

In this example, `bt' is like `t', except that it makes the text bold.
The `page-item' function accepts a mixture of strings and picts, and
it formats them as a paragraph.

Staging Slides
==============

The `slide/title' function creates a slide as a side-effect. It can be
put inside a function to abstract over a slide:

 (module hello-world (lib "slideshow-run.ss" "texpict")
   (define (make-slide-n n)
     (slide/title
      "How to Generalize Slides"
      (page-item "This is slide number" (number->string n))))

   (make-slide-n 1)
   (make-slide-n 2)
   (make-slide-n 3))

The `slide/title' function also has built-in support for some common
multi-slide patterns. Each element argument to `slide/title' after the
title is usually a pict, but there are a few other possibilities:

  * If an element is 'next, then a slide is generated containing only
    the preceeding elements, and then the <elems> are re-processed
    without the 'next. Multiple 'next elements generate multiple slides.

  * If an element is 'alts, then the next element must be a list of
    element lists. Each list up to the last one is appended to the
    elements before 'alts and the resulting list of elements is
    processed. The last lists is appended to the preceeding elements
    along with the remaining elements (after the list of lists) and the
    result is re-processed.

  * A 'nothing element is ignored (useful as a result of a branching
    expression).

  * 'next! is like 'next, except that it is preserved when consensing
    (see below on the --condense flag).

  * 'alts~ is like 'alts, except that it is *not* preserved when
    consensing (see below on the --condense flag).

  * A comment produced by `comment' is ignored, except when commentary
    is displayed.

Here's an example to illustrate how 'next and 'alts work:

 (module multi-step (lib "slideshow-run.ss" "texpict")
  (slide/title
   "Example"
   (page-item "First step")
   'NEXT
   (page-item "Second step")
   'NEXT
   'ALTS
   (list (list (page-item "Tentative third step")
               'NEXT
               (page-item "This isn't working... back up"))
         (list (page-item "Third step that works")))
   'NEXT
   (page-item "Fourth step")))

[The code above is case-insensitive; 'NEXT and 'ALTS are capitalized
 merely to stand out.]

Display Size and Fonts
======================

Slideshow is configured for generating slides in 1024x768 pixel
format. When the current display has a different size as Slideshow is
started, the Slideshow display still occupies the entire screen, and
pictures are scaled just before they are displayed. Thus, one picture
unit reliably corresponds to a "pixel" that occupies 1/1024 x 1/768 of
the screen.

The `text' form for generating text pictures takes into account any
expected scaling for the display when measuring text. (All Slideshow
text functions, such as `t' and `page-para', are built on `text'.) In
particular, scaling the picture causes a different font size to be
used for drawing the slide (rather than bitmap-scaling the original
font), and changing the font size by a factor of K does not
necessarily scale all text dimensions equally by a factor of
K. Nevertheless, using the `current-expected-text-scale' parameter,
Slideshow is usually able to produce good results when the slide is
scaled.

More generally, different font sets on different platforms can change
the way a slide is rendered. For example, the `tt' font on one
platform might be slightly wider than on another, causing different
line breaks, etc. Beware.

Beware also of using bitmaps in slides when the presentation screen
will not be 1024x768. In that case, consider using `size-in-pixels'
(with the caveat that the resulting picture will have a different size
on different displays).

Transition Animations
=====================

Any number of transition actions can be nstalled after a slide is
created and before the next slide is created. The first animation
applies to the most recently created slide, and during presentation
time, it starts when the next slide is requested; after all animations
complete, the next slide appears immediately.

If the presenter requests the next slide before an animation sequence
completes, Slideshow breaks all animations and continues immediately
to the next slide. Animations are not execute when jumping to a slide
or moving backward through the slide set.

Command-line Options
====================

The "slideshow.ss" module can be invoked directly, in which case a
module file name should be provided on the command line (implemented
either with "slideshow.ss" or "slideshow-run.ss") to provide the slide
content. Setup PLT creates a "Slideshow" executable that runs
"slideshow.ss".

Thus, if the above example is in multi-step.ss, then

   slideshow multi-step.ss

runs the slides.

The "Slideshow" executable accepts a number of command-line flags.
Use the --help flag to obtain a list of other flags.

Procedure Reference
===================

> (slide/title title-string element ...) - Creates a titled slide. See
  the overview for information about `element's.

> (slide/title/tall title-string element ...) - Like `slide/title',
  except that less extra space is inserted between the title and the
  slide content.

> (slide/title/center title-string element ...) - Like `slide/title',
  except that the slide content is centered vertically. If the content
  has steps an alternatives, each individual slide's content is
  center-top aligned with the largest individual slide's bounding box.

> (slide element ...) - Like `slide/title', but without the title.

> (slide/center element ...) - Like `slide/title/center', but without
  the title.

> (slide/title/inset title-string slide-inset element ...)
> (slide/title/tall/inset title-string slide-inset element ...)
> (slide/title/center/inset title-string slide-inset element ...)
> (slide/inset slide-inset element ...)
> (slide/center/inset slide-inset element ...)
  Like `slide/title', etc., except that an inset is supplied. A slide
  inset is created with `make-slide-inset'.

> (slide/name title-string element ...)
> (slide/name/tall title-string element ...)
> (slide/name/center title-string element ...)
> (slide/name/inset title-string slide-inset element ...)
> (slide/name/tall/inset title-string slide-inset element ...)
> (slide/name/center/inset title-string slide-inset element ...)
  Like `slide/title', etc., except that the title string is used only
  for naming the slide, as in the Alt-g dialog, and does not appear at
  the top of the slide. The content area is therefore the same size as
  `client-page'.

> (make-slide-inset left-inset top-inset right-inset bottom-inset) -
  Creates a slide inset, which describes a number of pixels to inset
  a slide on each side. Each inset must be an exact, non-negative
  integer.

> (t string) - Same as (text string (current-main-font) (current-font-size))
> (it string) - Same as (text string `(italic . ,(current-main-font)) (current-font-size))
> (bt string) - Same as (text string `(bold . ,(current-main-font)) (current-font-size))
> (bit string) - Same as (text string `(bold italic . ,(current-main-font)) (current-font-size))
> (tt string) - Same as (text string `(bold . modern) (current-font-size))
> (rt string) - Same as (text string `roman (current-font-size))
> (titlet string) - Like `t', but using the slide-title font and color.

> (para width-n ielement ...) - Generates a paragraph picture of width
  `width-n'. Each ielement is either a string or a pict; strings are
  split at spaces for word-wrapping to fit the page, and space is
  added between elements. However, if a string element starts with a
  punctuation mark (e.g., a comma), no space is added before the
  element.

> (para* width-n ielement ...) - Like `para, except that the
  paragraph is only as wide as necessary, which may be less than
  `width-n'.

> (page-para ielement ...) - Like `para, except that the width
   is `client-w' (see below).

> (page-para* ielement ...) - Like `para*', except that the width
   is `client-w' (see below).

> (item width-n ielement ...)
> (item* width-n ielement ...)
> (page-item ielement ...)
> (page-item* ielement ...)
  Like `para, etc., except that a bullet is placed in front of the
  paragraph, and the paragraph is indented on the left.

> (item/bullet bullet-pict width-n ielement ...)
> (item*/bullet bullet-pict width-n ielement ...)
> (page-item/bullet bullet-pict ielement ...)
> (page-item*/bullet bullet-pict ielement ...)
  Like `item', etc., but with a given bullet pict.

> (subitem width-n ielement ...)
> (subitem* width-n ielement ...)
> (page-subitem ielement ...)
> (page-subitem* ielement ...)
  Like `item', etc., except that a hollow bullet is used, and the
  width for the `page-' versions is inset from `client-w'.


> (para/c width-n ielement ...)
> (para*/c width-n ielement ...)
> (page-para/c ielement ...)
> (page-para*/c ielement ...)
  Like `para, etc., except that text is centered within the paragraph.

> (para/r width-n ielement ...)
> (para*/r width-n ielement ...)
> (page-para/r ielement ...)
> (page-para*/r ielement ...)
  Like `para, etc., except that text is right-aligned within the
  paragraph.

> (clickback pict thunk)
  Creates a pict that embeds the given one, and is the same size as
  the given pict, but that when clicked during a presentation calls
  `thunk'.

> (most-recent-slide) - Returns a slide structure that be supplied to
  `re-slide' to make a copy of the slide. Transition animations before
  or after the slide (if any) are not included in the resulting slide.

> (retract-most-recent-slide) - Cancels the most recently created
  slide, and also returns a slide structure that be supplied to
  `re-slide' to restore the slide (usually in a later position).
  Transition animations after the slide (if any) are lost, while
  transitions before the slide remain in place (but are not part of
  the returned slide).

> (re-slide slide [pict]) - [Re-]inserts a slide, optionally
  `lt-superimpose'ing the given additional pict.

> (scroll-transition x y w h dx dy [secs steps-k]) - inserts a scroll
  animation that shifts the screen rectangle (x, y, x+w, y+h) by `dx'
  and `dy', taking `secs' time and animating with `steps-k' steps.
  See also "Transition Animations", above.

> (pause-transition secs) - inserts a delay "animation" with no
  drawing effect.   See also "Transition Animations", above.

> (comment string ...) - Concatenated the strings, to be used as a
  slide element for (usually hidden) commentary.

> (make-outline { symbol/s string-or-pict subitems } ...)  - Returns a
  function that takes a symbol and generates an outline slide. Each
  trio of arguments defines a section for the outline:

   - The symbol/s names the section, either with a single symbol or a
     list of symbols. When the outline function is called later to
     make an outline, the given symbol is compared to the section's
     symbol(s), and the section is marked as current if the symbol
     matches.

   - The string-or-pict is used as the displayed name of the
     section.

   - The subitems are displayed when the section is active. It can be
     #f or null (for historical reasons) if no subitems are to be
     displayed. Otherwise, it should be a procedure that takes a symbol
     (the same one passed to the outline maker) and produces a pict.

> (size-in-pixels p) - Scales p so that p is displayed on the screen
  as (pict-width p) wide and (pict-height p) tall. The result is just
  p for a 1024x768 display.


> font-size - The default font size, 32. This size is in pixels for a
  1024x768 screen; see also the "Display Size and Fonts" section, above.
> gap-size - (* 3/4 font-size)

> current-font-size - Parameter for the font size used by `t', etc.,
  initialized to `font-size'.
> line-sep - Amount of seperating between paragraph lines.
> title-size - Font size used for slide titles, derived from `font-size'.
> main-font - Font specification used for `t' by default
> current-main-font - Parameter for the font specification used for `t'
> current-title-color - Parameter for the color used by titles/`titlet'

> (with-font f thunk) - Calls `thunk' with `current-main-font' set to `f'.

> red - a color name like "red", possibiliy selected by the user.
> green - a color name like "green"
> blue - ...
> purple - ...
> orange - ...

> bullet - a bullet pict
> o-bullet - a hollow bullet pict

> client-w - useable width of a slide
> client-h - useable height of a slide

> margin - client margin within the full slide

> full-page - an empty pict that is the same size as the client area
> titleless-page - an empty pict that is the same size as the client
  ares minus the title area

> printing? - #t if the slides are begin durected to PostScript output
> condense? - #t if slides are being condensed (see overview)
> (skip-slides n) - increment the slide counter by `n' without adding
  any slides.

> (start-making-slides)
> (done-making-slides)
  Called implicitly by "slideshow-run.ss", and not to be called
  directly.

> (set-use-background-frame! on?) - enables or disables the creation
  of a background frame, which is typically useful only when insets
  are active. The last enable/disable during slide creation takes
  effect once and for all.

------------------------------------------------------------
_code.ss_
------------------------------------------------------------

The "code.ss" module provides functions and syntax for typesetting
Scheme code a la SlaTeX.

This module is still evolving. Watch this space for details.

------------------------------------------------------------
_step.ss_
------------------------------------------------------------

The "step.ss" module provides syntax for breaking a complex slide into
steps (that are more complex than can be handled with 'next and 'alts
in a `slide' sequence).

This module is still evolving. Watch this space for details.

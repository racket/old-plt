===================================
MAKING PACKAGES AVAILABLE ON PLANET
===================================

To put a package on PLaneT, or release an upgrade to an
already-existing package:

1. Prepare a directory

Make sure that all source files, documentation, etc. that you want to
be a part of the package are in a single directory and its
subdirectories. Furthermore make sure that nothing else, e.g. unneeded
backup files, is in that directory (with the exception that the
subdirectories and files CVS creates are allowed).

For instance, in the following directory tree, my-app/ is set up
appropriately:

home/
  ...
  jacob/
  ...
    my-app/
      my-app.ss
      graphic-for-my-app.png
      private/
         implementation.ss

If you put an info.ss file into the root directory, the PLaneT system
will recognize and use it when users download your package (see the PLT mzc:
MzScheme Compiler Manual, chapter 7 for information on info.ss
files). In particular, if your package has an info.ss file with a
`name' field, PLaneT will compile .zo files for it upon installation
onto a client's machine; otherwise it will not.

2. BUILD A .PLT FILE

Run the function make-planet-archive from the util.ss module in the 
planet collection with the name of the directory you've prepared as
its argument: 

> (make-planet-archive "/home/jacob/my-app/")

This function will build a packaged version of your directory and
return the path to that package. The path will always be a file named
X.plt, where X is the name of the directory you gave to
make-planet-archive, located in that same directory.

Alternately, you can build your own .plt file using any method that
produces them (see the documentation for the Setup PLT collection for
details). The PLT file you create must be set to install in
user-specified directory rather than in the collects directory or the
user add-ons directory.

3. SUBMIT THE PACKAGE

E-mail the .plt file you built to jacobm+planet@plt-scheme.org
along with a a short (1 to 3 sentence) description of the package. If
the package is an upgrade to a prior package, then tell me so and tell
me whether or not this package is backwards-compatible with the
package it's upgrading. There's no particular format for this message;
the system isn't automated yet so I'll just be reading these and
processing them by hand.

Once I've added your package to the repository, I'll e-mail you
back and tell you the require-line users will need to type in to get
it.

WARNING: 

It's very important that packages you say are backwards-compatible
with the prior version, at a minimum contain all the same modules and
provide all the same names the prior version did. If you do not,
programs that use your package will break on some systems.
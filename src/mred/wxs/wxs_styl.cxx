/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_styl.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_style.h"
#include "wx_mtype.h"




#ifdef wx_x
# define BM_SELECTED(map) ((map)->selectedTo)
#endif
#if defined(wx_mac) || defined(wx_msw)
# define BM_SELECTED(map) ((map)->selectedInto)
#endif
# define BM_IN_USE(map) ((map)->selectedIntoDC)





#include "wxscheme.h"
#include "wxs_styl.h"
#include "wxscomon.h"





class os_wxMultColour : public wxMultColour {
 public:

  ~os_wxMultColour();
};

Scheme_Object *os_wxMultColour_class;

Scheme_Object *os_wxMultColour_interface;

os_wxMultColour::~os_wxMultColour()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxMultColourSet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float x0;
  float x1;
  float x2;

  
  x0 = objscheme_unbundle_float(p[0], "set in mult-color<%>");
  x1 = objscheme_unbundle_float(p[1], "set in mult-color<%>");
  x2 = objscheme_unbundle_float(p[2], "set in mult-color<%>");

  
  ((wxMultColour *)((Scheme_Class_Object *)obj)->primdata)->Set(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxMultColourGet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  float _x0;
  float* x0 = &_x0;
  float _x1;
  float* x1 = &_x1;
  float _x2;
  float* x2 = &_x2;

  
      *x0 = objscheme_unbundle_float(objscheme_unbox(p[0], "get in mult-color<%>"), "get in mult-color<%>"", extracting boxed argument");
      *x1 = objscheme_unbundle_float(objscheme_unbox(p[1], "get in mult-color<%>"), "get in mult-color<%>"", extracting boxed argument");
      *x2 = objscheme_unbundle_float(objscheme_unbox(p[2], "get in mult-color<%>"), "get in mult-color<%>"", extracting boxed argument");

  
  ((wxMultColour *)((Scheme_Class_Object *)obj)->primdata)->Get(x0, x1, x2);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_double(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_double(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_double(_x2));
  
  return scheme_void;
}

static Scheme_Object *objscheme_wxMultColour_Getr(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-r in mult-color%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMultColour *)cobj->primdata)->wxMultColour::r;
  else
    v = ((wxMultColour *)cobj->primdata)->r;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxMultColour_Setr(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-r in mult-color%", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "set-r in mult-color%");
  ((wxMultColour *)cobj->primdata)->r = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMultColour_Getg(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-g in mult-color%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMultColour *)cobj->primdata)->wxMultColour::g;
  else
    v = ((wxMultColour *)cobj->primdata)->g;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxMultColour_Setg(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-g in mult-color%", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "set-g in mult-color%");
  ((wxMultColour *)cobj->primdata)->g = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxMultColour_Getb(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-b in mult-color%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxMultColour *)cobj->primdata)->wxMultColour::b;
  else
    v = ((wxMultColour *)cobj->primdata)->b;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxMultColour_Setb(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-b in mult-color%", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "set-b in mult-color%");
  ((wxMultColour *)cobj->primdata)->b = v;

  return scheme_void;
}

void objscheme_setup_wxMultColour(void *env)
{
if (os_wxMultColour_class) {
    objscheme_add_global_class(os_wxMultColour_class, "mult-color%", env);
    objscheme_add_global_interface(os_wxMultColour_interface, "mult-color" "<%>", env);
} else {
  os_wxMultColour_class = objscheme_def_prim_class(env, "mult-color%", "object%", NULL, 8);

 scheme_add_method_w_arity(os_wxMultColour_class, "set", os_wxMultColourSet, 3, 3);
 scheme_add_method_w_arity(os_wxMultColour_class, "get", os_wxMultColourGet, 3, 3);

  scheme_add_method_w_arity(os_wxMultColour_class,"get-r", objscheme_wxMultColour_Getr, 0, 0);
  scheme_add_method_w_arity(os_wxMultColour_class,"set-r", objscheme_wxMultColour_Setr, 1, 1);
  scheme_add_method_w_arity(os_wxMultColour_class,"get-g", objscheme_wxMultColour_Getg, 0, 0);
  scheme_add_method_w_arity(os_wxMultColour_class,"set-g", objscheme_wxMultColour_Setg, 1, 1);
  scheme_add_method_w_arity(os_wxMultColour_class,"get-b", objscheme_wxMultColour_Getb, 0, 0);
  scheme_add_method_w_arity(os_wxMultColour_class,"set-b", objscheme_wxMultColour_Setb, 1, 1);

  scheme_made_class(os_wxMultColour_class);

  os_wxMultColour_interface = scheme_class_to_interface(os_wxMultColour_class, "mult-color" "<%>");

  objscheme_add_global_interface(os_wxMultColour_interface, "mult-color" "<%>", env);

}
}

int objscheme_istype_wxMultColour(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxMultColour_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "mult-color% object or " XC_NULL_STR: "mult-color% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxMultColour(class wxMultColour *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxMultColour_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxMultColour *objscheme_unbundle_wxMultColour(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxMultColour(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxMultColour *)o->primdata;
  else
    return (wxMultColour *)o->primdata;
}




// short* should really be rshort[-1000|1000]*:

class os_wxAddColour : public wxAddColour {
 public:

  ~os_wxAddColour();
};

Scheme_Object *os_wxAddColour_class;

Scheme_Object *os_wxAddColour_interface;

os_wxAddColour::~os_wxAddColour()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxAddColourSet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  int x0;
  int x1;
  int x2;

  
  x0 = objscheme_unbundle_integer_in(p[0], -1000, 1000, "set in add-color<%>");
  x1 = objscheme_unbundle_integer_in(p[1], -1000, 1000, "set in add-color<%>");
  x2 = objscheme_unbundle_integer_in(p[2], -1000, 1000, "set in add-color<%>");

  
  ((wxAddColour *)((Scheme_Class_Object *)obj)->primdata)->Set(x0, x1, x2);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxAddColourGet(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  short _x0;
  short* x0 = &_x0;
  short _x1;
  short* x1 = &_x1;
  short _x2;
  short* x2 = &_x2;

  
      *x0 = objscheme_unbundle_integer(objscheme_unbox(p[0], "get in add-color<%>"), "get in add-color<%>"", extracting boxed argument");
      *x1 = objscheme_unbundle_integer(objscheme_unbox(p[1], "get in add-color<%>"), "get in add-color<%>"", extracting boxed argument");
      *x2 = objscheme_unbundle_integer(objscheme_unbox(p[2], "get in add-color<%>"), "get in add-color<%>"", extracting boxed argument");

  
  ((wxAddColour *)((Scheme_Class_Object *)obj)->primdata)->Get(x0, x1, x2);

  
  if (n > 0)
    objscheme_set_box(p[0], scheme_make_integer(_x0));
  if (n > 1)
    objscheme_set_box(p[1], scheme_make_integer(_x1));
  if (n > 2)
    objscheme_set_box(p[2], scheme_make_integer(_x2));
  
  return scheme_void;
}

static Scheme_Object *objscheme_wxAddColour_Getr(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-r in add-color%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxAddColour *)cobj->primdata)->wxAddColour::r;
  else
    v = ((wxAddColour *)cobj->primdata)->r;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxAddColour_Setr(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-r in add-color%", 1, 1, n, p);

  v = objscheme_unbundle_integer_in(p[0], -1000, 1000, "set-r in add-color%");
  ((wxAddColour *)cobj->primdata)->r = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxAddColour_Getg(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-g in add-color%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxAddColour *)cobj->primdata)->wxAddColour::g;
  else
    v = ((wxAddColour *)cobj->primdata)->g;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxAddColour_Setg(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-g in add-color%", 1, 1, n, p);

  v = objscheme_unbundle_integer_in(p[0], -1000, 1000, "set-g in add-color%");
  ((wxAddColour *)cobj->primdata)->g = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxAddColour_Getb(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-b in add-color%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxAddColour *)cobj->primdata)->wxAddColour::b;
  else
    v = ((wxAddColour *)cobj->primdata)->b;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxAddColour_Setb(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-b in add-color%", 1, 1, n, p);

  v = objscheme_unbundle_integer_in(p[0], -1000, 1000, "set-b in add-color%");
  ((wxAddColour *)cobj->primdata)->b = v;

  return scheme_void;
}

void objscheme_setup_wxAddColour(void *env)
{
if (os_wxAddColour_class) {
    objscheme_add_global_class(os_wxAddColour_class, "add-color%", env);
    objscheme_add_global_interface(os_wxAddColour_interface, "add-color" "<%>", env);
} else {
  os_wxAddColour_class = objscheme_def_prim_class(env, "add-color%", "object%", NULL, 8);

 scheme_add_method_w_arity(os_wxAddColour_class, "set", os_wxAddColourSet, 3, 3);
 scheme_add_method_w_arity(os_wxAddColour_class, "get", os_wxAddColourGet, 3, 3);

  scheme_add_method_w_arity(os_wxAddColour_class,"get-r", objscheme_wxAddColour_Getr, 0, 0);
  scheme_add_method_w_arity(os_wxAddColour_class,"set-r", objscheme_wxAddColour_Setr, 1, 1);
  scheme_add_method_w_arity(os_wxAddColour_class,"get-g", objscheme_wxAddColour_Getg, 0, 0);
  scheme_add_method_w_arity(os_wxAddColour_class,"set-g", objscheme_wxAddColour_Setg, 1, 1);
  scheme_add_method_w_arity(os_wxAddColour_class,"get-b", objscheme_wxAddColour_Getb, 0, 0);
  scheme_add_method_w_arity(os_wxAddColour_class,"set-b", objscheme_wxAddColour_Setb, 1, 1);

  scheme_made_class(os_wxAddColour_class);

  os_wxAddColour_interface = scheme_class_to_interface(os_wxAddColour_class, "add-color" "<%>");

  objscheme_add_global_interface(os_wxAddColour_interface, "add-color" "<%>", env);

}
}

int objscheme_istype_wxAddColour(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxAddColour_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "add-color% object or " XC_NULL_STR: "add-color% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxAddColour(class wxAddColour *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxAddColour_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxAddColour *objscheme_unbundle_wxAddColour(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxAddColour(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxAddColour *)o->primdata;
  else
    return (wxAddColour *)o->primdata;
}


static Scheme_Object *family_wxBASE_sym = NULL;
static Scheme_Object *family_wxDEFAULT_sym = NULL;
static Scheme_Object *family_wxDECORATIVE_sym = NULL;
static Scheme_Object *family_wxROMAN_sym = NULL;
static Scheme_Object *family_wxSCRIPT_sym = NULL;
static Scheme_Object *family_wxSWISS_sym = NULL;
static Scheme_Object *family_wxMODERN_sym = NULL;
static Scheme_Object *family_wxTELETYPE_sym = NULL;
static Scheme_Object *family_wxSYSTEM_sym = NULL;

static void init_symset_family(void) {
  family_wxBASE_sym = scheme_intern_symbol("base");
  family_wxDEFAULT_sym = scheme_intern_symbol("default");
  family_wxDECORATIVE_sym = scheme_intern_symbol("decorative");
  family_wxROMAN_sym = scheme_intern_symbol("roman");
  family_wxSCRIPT_sym = scheme_intern_symbol("script");
  family_wxSWISS_sym = scheme_intern_symbol("swiss");
  family_wxMODERN_sym = scheme_intern_symbol("modern");
  family_wxTELETYPE_sym = scheme_intern_symbol("teletype");
  family_wxSYSTEM_sym = scheme_intern_symbol("system");
}

static int unbundle_symset_family(Scheme_Object *v, const char *where) {
  if (!family_wxSYSTEM_sym) init_symset_family();
  if (0) { }
  else if (v == family_wxBASE_sym) { return wxBASE; }
  else if (v == family_wxDEFAULT_sym) { return wxDEFAULT; }
  else if (v == family_wxDECORATIVE_sym) { return wxDECORATIVE; }
  else if (v == family_wxROMAN_sym) { return wxROMAN; }
  else if (v == family_wxSCRIPT_sym) { return wxSCRIPT; }
  else if (v == family_wxSWISS_sym) { return wxSWISS; }
  else if (v == family_wxMODERN_sym) { return wxMODERN; }
  else if (v == family_wxTELETYPE_sym) { return wxTELETYPE; }
  else if (v == family_wxSYSTEM_sym) { return wxSYSTEM; }
  if (where) scheme_wrong_type(where, "family symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_family(Scheme_Object *v, const char *where) {
  if (!family_wxSYSTEM_sym) init_symset_family();
  if (0) { }
  else if (v == family_wxBASE_sym) { return 1; }
  else if (v == family_wxDEFAULT_sym) { return 1; }
  else if (v == family_wxDECORATIVE_sym) { return 1; }
  else if (v == family_wxROMAN_sym) { return 1; }
  else if (v == family_wxSCRIPT_sym) { return 1; }
  else if (v == family_wxSWISS_sym) { return 1; }
  else if (v == family_wxMODERN_sym) { return 1; }
  else if (v == family_wxTELETYPE_sym) { return 1; }
  else if (v == family_wxSYSTEM_sym) { return 1; }
  if (where) scheme_wrong_type(where, "family symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_family(int v) {
  if (!family_wxSYSTEM_sym) init_symset_family();
  switch (v) {
  case wxBASE: return family_wxBASE_sym;
  case wxDEFAULT: return family_wxDEFAULT_sym;
  case wxDECORATIVE: return family_wxDECORATIVE_sym;
  case wxROMAN: return family_wxROMAN_sym;
  case wxSCRIPT: return family_wxSCRIPT_sym;
  case wxSWISS: return family_wxSWISS_sym;
  case wxMODERN: return family_wxMODERN_sym;
  case wxTELETYPE: return family_wxTELETYPE_sym;
  case wxSYSTEM: return family_wxSYSTEM_sym;
  default: return NULL;
  }
}


static Scheme_Object *weight_wxBASE_sym = NULL;
static Scheme_Object *weight_wxNORMAL_sym = NULL;
static Scheme_Object *weight_wxLIGHT_sym = NULL;
static Scheme_Object *weight_wxBOLD_sym = NULL;

static void init_symset_weight(void) {
  weight_wxBASE_sym = scheme_intern_symbol("base");
  weight_wxNORMAL_sym = scheme_intern_symbol("normal");
  weight_wxLIGHT_sym = scheme_intern_symbol("light");
  weight_wxBOLD_sym = scheme_intern_symbol("bold");
}

static int unbundle_symset_weight(Scheme_Object *v, const char *where) {
  if (!weight_wxBOLD_sym) init_symset_weight();
  if (0) { }
  else if (v == weight_wxBASE_sym) { return wxBASE; }
  else if (v == weight_wxNORMAL_sym) { return wxNORMAL; }
  else if (v == weight_wxLIGHT_sym) { return wxLIGHT; }
  else if (v == weight_wxBOLD_sym) { return wxBOLD; }
  if (where) scheme_wrong_type(where, "weight symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_weight(Scheme_Object *v, const char *where) {
  if (!weight_wxBOLD_sym) init_symset_weight();
  if (0) { }
  else if (v == weight_wxBASE_sym) { return 1; }
  else if (v == weight_wxNORMAL_sym) { return 1; }
  else if (v == weight_wxLIGHT_sym) { return 1; }
  else if (v == weight_wxBOLD_sym) { return 1; }
  if (where) scheme_wrong_type(where, "weight symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_weight(int v) {
  if (!weight_wxBOLD_sym) init_symset_weight();
  switch (v) {
  case wxBASE: return weight_wxBASE_sym;
  case wxNORMAL: return weight_wxNORMAL_sym;
  case wxLIGHT: return weight_wxLIGHT_sym;
  case wxBOLD: return weight_wxBOLD_sym;
  default: return NULL;
  }
}


static Scheme_Object *style_wxBASE_sym = NULL;
static Scheme_Object *style_wxNORMAL_sym = NULL;
static Scheme_Object *style_wxITALIC_sym = NULL;
static Scheme_Object *style_wxSLANT_sym = NULL;

static void init_symset_style(void) {
  style_wxBASE_sym = scheme_intern_symbol("base");
  style_wxNORMAL_sym = scheme_intern_symbol("normal");
  style_wxITALIC_sym = scheme_intern_symbol("italic");
  style_wxSLANT_sym = scheme_intern_symbol("slant");
}

static int unbundle_symset_style(Scheme_Object *v, const char *where) {
  if (!style_wxSLANT_sym) init_symset_style();
  if (0) { }
  else if (v == style_wxBASE_sym) { return wxBASE; }
  else if (v == style_wxNORMAL_sym) { return wxNORMAL; }
  else if (v == style_wxITALIC_sym) { return wxITALIC; }
  else if (v == style_wxSLANT_sym) { return wxSLANT; }
  if (where) scheme_wrong_type(where, "style symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_style(Scheme_Object *v, const char *where) {
  if (!style_wxSLANT_sym) init_symset_style();
  if (0) { }
  else if (v == style_wxBASE_sym) { return 1; }
  else if (v == style_wxNORMAL_sym) { return 1; }
  else if (v == style_wxITALIC_sym) { return 1; }
  else if (v == style_wxSLANT_sym) { return 1; }
  if (where) scheme_wrong_type(where, "style symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_style(int v) {
  if (!style_wxSLANT_sym) init_symset_style();
  switch (v) {
  case wxBASE: return style_wxBASE_sym;
  case wxNORMAL: return style_wxNORMAL_sym;
  case wxITALIC: return style_wxITALIC_sym;
  case wxSLANT: return style_wxSLANT_sym;
  default: return NULL;
  }
}


static Scheme_Object *align_wxBASE_sym = NULL;
static Scheme_Object *align_wxALIGN_TOP_sym = NULL;
static Scheme_Object *align_wxALIGN_BOTTOM_sym = NULL;
static Scheme_Object *align_wxALIGN_CENTER_sym = NULL;

static void init_symset_align(void) {
  align_wxBASE_sym = scheme_intern_symbol("base");
  align_wxALIGN_TOP_sym = scheme_intern_symbol("top");
  align_wxALIGN_BOTTOM_sym = scheme_intern_symbol("bottom");
  align_wxALIGN_CENTER_sym = scheme_intern_symbol("center");
}

static int unbundle_symset_align(Scheme_Object *v, const char *where) {
  if (!align_wxALIGN_CENTER_sym) init_symset_align();
  if (0) { }
  else if (v == align_wxBASE_sym) { return wxBASE; }
  else if (v == align_wxALIGN_TOP_sym) { return wxALIGN_TOP; }
  else if (v == align_wxALIGN_BOTTOM_sym) { return wxALIGN_BOTTOM; }
  else if (v == align_wxALIGN_CENTER_sym) { return wxALIGN_CENTER; }
  if (where) scheme_wrong_type(where, "align symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_align(Scheme_Object *v, const char *where) {
  if (!align_wxALIGN_CENTER_sym) init_symset_align();
  if (0) { }
  else if (v == align_wxBASE_sym) { return 1; }
  else if (v == align_wxALIGN_TOP_sym) { return 1; }
  else if (v == align_wxALIGN_BOTTOM_sym) { return 1; }
  else if (v == align_wxALIGN_CENTER_sym) { return 1; }
  if (where) scheme_wrong_type(where, "align symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_align(int v) {
  if (!align_wxALIGN_CENTER_sym) init_symset_align();
  switch (v) {
  case wxBASE: return align_wxBASE_sym;
  case wxALIGN_TOP: return align_wxALIGN_TOP_sym;
  case wxALIGN_BOTTOM: return align_wxALIGN_BOTTOM_sym;
  case wxALIGN_CENTER: return align_wxALIGN_CENTER_sym;
  default: return NULL;
  }
}


static Scheme_Object *changeNoArg_wxCHANGE_NOTHING_sym = NULL;
static Scheme_Object *changeNoArg_wxCHANGE_NORMAL_sym = NULL;
static Scheme_Object *changeNoArg_wxCHANGE_BOLD_sym = NULL;
static Scheme_Object *changeNoArg_wxCHANGE_ITALIC_sym = NULL;
static Scheme_Object *changeNoArg_wxCHANGE_TOGGLE_UNDERLINE_sym = NULL;
static Scheme_Object *changeNoArg_wxCHANGE_NORMAL_COLOUR_sym = NULL;

static void init_symset_changeNoArg(void) {
  changeNoArg_wxCHANGE_NOTHING_sym = scheme_intern_symbol("change-nothing");
  changeNoArg_wxCHANGE_NORMAL_sym = scheme_intern_symbol("change-normal");
  changeNoArg_wxCHANGE_BOLD_sym = scheme_intern_symbol("change-bold");
  changeNoArg_wxCHANGE_ITALIC_sym = scheme_intern_symbol("change-italic");
  changeNoArg_wxCHANGE_TOGGLE_UNDERLINE_sym = scheme_intern_symbol("change-toggle-underline");
  changeNoArg_wxCHANGE_NORMAL_COLOUR_sym = scheme_intern_symbol("change-normal-color");
}

static int unbundle_symset_changeNoArg(Scheme_Object *v, const char *where) {
  if (!changeNoArg_wxCHANGE_NORMAL_COLOUR_sym) init_symset_changeNoArg();
  if (0) { }
  else if (v == changeNoArg_wxCHANGE_NOTHING_sym) { return wxCHANGE_NOTHING; }
  else if (v == changeNoArg_wxCHANGE_NORMAL_sym) { return wxCHANGE_NORMAL; }
  else if (v == changeNoArg_wxCHANGE_BOLD_sym) { return wxCHANGE_BOLD; }
  else if (v == changeNoArg_wxCHANGE_ITALIC_sym) { return wxCHANGE_ITALIC; }
  else if (v == changeNoArg_wxCHANGE_TOGGLE_UNDERLINE_sym) { return wxCHANGE_TOGGLE_UNDERLINE; }
  else if (v == changeNoArg_wxCHANGE_NORMAL_COLOUR_sym) { return wxCHANGE_NORMAL_COLOUR; }
  if (where) scheme_wrong_type(where, "changeNoArg symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_changeNoArg(Scheme_Object *v, const char *where) {
  if (!changeNoArg_wxCHANGE_NORMAL_COLOUR_sym) init_symset_changeNoArg();
  if (0) { }
  else if (v == changeNoArg_wxCHANGE_NOTHING_sym) { return 1; }
  else if (v == changeNoArg_wxCHANGE_NORMAL_sym) { return 1; }
  else if (v == changeNoArg_wxCHANGE_BOLD_sym) { return 1; }
  else if (v == changeNoArg_wxCHANGE_ITALIC_sym) { return 1; }
  else if (v == changeNoArg_wxCHANGE_TOGGLE_UNDERLINE_sym) { return 1; }
  else if (v == changeNoArg_wxCHANGE_NORMAL_COLOUR_sym) { return 1; }
  if (where) scheme_wrong_type(where, "changeNoArg symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_changeNoArg(int v) {
  if (!changeNoArg_wxCHANGE_NORMAL_COLOUR_sym) init_symset_changeNoArg();
  switch (v) {
  case wxCHANGE_NOTHING: return changeNoArg_wxCHANGE_NOTHING_sym;
  case wxCHANGE_NORMAL: return changeNoArg_wxCHANGE_NORMAL_sym;
  case wxCHANGE_BOLD: return changeNoArg_wxCHANGE_BOLD_sym;
  case wxCHANGE_ITALIC: return changeNoArg_wxCHANGE_ITALIC_sym;
  case wxCHANGE_TOGGLE_UNDERLINE: return changeNoArg_wxCHANGE_TOGGLE_UNDERLINE_sym;
  case wxCHANGE_NORMAL_COLOUR: return changeNoArg_wxCHANGE_NORMAL_COLOUR_sym;
  default: return NULL;
  }
}

static Scheme_Object *changeFam_wxCHANGE_FAMILY_sym = NULL;

static void init_symset_changeFam(void) {
  changeFam_wxCHANGE_FAMILY_sym = scheme_intern_symbol("change-family");
}

static int unbundle_symset_changeFam(Scheme_Object *v, const char *where) {
  if (!changeFam_wxCHANGE_FAMILY_sym) init_symset_changeFam();
  if (0) { }
  else if (v == changeFam_wxCHANGE_FAMILY_sym) { return wxCHANGE_FAMILY; }
  if (where) scheme_wrong_type(where, "changeFam symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_changeFam(Scheme_Object *v, const char *where) {
  if (!changeFam_wxCHANGE_FAMILY_sym) init_symset_changeFam();
  if (0) { }
  else if (v == changeFam_wxCHANGE_FAMILY_sym) { return 1; }
  if (where) scheme_wrong_type(where, "changeFam symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_changeFam(int v) {
  if (!changeFam_wxCHANGE_FAMILY_sym) init_symset_changeFam();
  switch (v) {
  case wxCHANGE_FAMILY: return changeFam_wxCHANGE_FAMILY_sym;
  default: return NULL;
  }
}

static Scheme_Object *changeStyle_wxCHANGE_STYLE_sym = NULL;
static Scheme_Object *changeStyle_wxCHANGE_TOGGLE_STYLE_sym = NULL;

static void init_symset_changeStyle(void) {
  changeStyle_wxCHANGE_STYLE_sym = scheme_intern_symbol("change-style");
  changeStyle_wxCHANGE_TOGGLE_STYLE_sym = scheme_intern_symbol("change-toggle-style");
}

static int unbundle_symset_changeStyle(Scheme_Object *v, const char *where) {
  if (!changeStyle_wxCHANGE_TOGGLE_STYLE_sym) init_symset_changeStyle();
  if (0) { }
  else if (v == changeStyle_wxCHANGE_STYLE_sym) { return wxCHANGE_STYLE; }
  else if (v == changeStyle_wxCHANGE_TOGGLE_STYLE_sym) { return wxCHANGE_TOGGLE_STYLE; }
  if (where) scheme_wrong_type(where, "changeStyle symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_changeStyle(Scheme_Object *v, const char *where) {
  if (!changeStyle_wxCHANGE_TOGGLE_STYLE_sym) init_symset_changeStyle();
  if (0) { }
  else if (v == changeStyle_wxCHANGE_STYLE_sym) { return 1; }
  else if (v == changeStyle_wxCHANGE_TOGGLE_STYLE_sym) { return 1; }
  if (where) scheme_wrong_type(where, "changeStyle symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_changeStyle(int v) {
  if (!changeStyle_wxCHANGE_TOGGLE_STYLE_sym) init_symset_changeStyle();
  switch (v) {
  case wxCHANGE_STYLE: return changeStyle_wxCHANGE_STYLE_sym;
  case wxCHANGE_TOGGLE_STYLE: return changeStyle_wxCHANGE_TOGGLE_STYLE_sym;
  default: return NULL;
  }
}

static Scheme_Object *changeWeight_wxCHANGE_WEIGHT_sym = NULL;
static Scheme_Object *changeWeight_wxCHANGE_TOGGLE_WEIGHT_sym = NULL;

static void init_symset_changeWeight(void) {
  changeWeight_wxCHANGE_WEIGHT_sym = scheme_intern_symbol("change-weight");
  changeWeight_wxCHANGE_TOGGLE_WEIGHT_sym = scheme_intern_symbol("change-toggle-weight");
}

static int unbundle_symset_changeWeight(Scheme_Object *v, const char *where) {
  if (!changeWeight_wxCHANGE_TOGGLE_WEIGHT_sym) init_symset_changeWeight();
  if (0) { }
  else if (v == changeWeight_wxCHANGE_WEIGHT_sym) { return wxCHANGE_WEIGHT; }
  else if (v == changeWeight_wxCHANGE_TOGGLE_WEIGHT_sym) { return wxCHANGE_TOGGLE_WEIGHT; }
  if (where) scheme_wrong_type(where, "changeWeight symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_changeWeight(Scheme_Object *v, const char *where) {
  if (!changeWeight_wxCHANGE_TOGGLE_WEIGHT_sym) init_symset_changeWeight();
  if (0) { }
  else if (v == changeWeight_wxCHANGE_WEIGHT_sym) { return 1; }
  else if (v == changeWeight_wxCHANGE_TOGGLE_WEIGHT_sym) { return 1; }
  if (where) scheme_wrong_type(where, "changeWeight symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_changeWeight(int v) {
  if (!changeWeight_wxCHANGE_TOGGLE_WEIGHT_sym) init_symset_changeWeight();
  switch (v) {
  case wxCHANGE_WEIGHT: return changeWeight_wxCHANGE_WEIGHT_sym;
  case wxCHANGE_TOGGLE_WEIGHT: return changeWeight_wxCHANGE_TOGGLE_WEIGHT_sym;
  default: return NULL;
  }
}

static Scheme_Object *changeUnderline_wxCHANGE_UNDERLINE_sym = NULL;

static void init_symset_changeUnderline(void) {
  changeUnderline_wxCHANGE_UNDERLINE_sym = scheme_intern_symbol("change-underline");
}

static int unbundle_symset_changeUnderline(Scheme_Object *v, const char *where) {
  if (!changeUnderline_wxCHANGE_UNDERLINE_sym) init_symset_changeUnderline();
  if (0) { }
  else if (v == changeUnderline_wxCHANGE_UNDERLINE_sym) { return wxCHANGE_UNDERLINE; }
  if (where) scheme_wrong_type(where, "changeUnderline symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_changeUnderline(Scheme_Object *v, const char *where) {
  if (!changeUnderline_wxCHANGE_UNDERLINE_sym) init_symset_changeUnderline();
  if (0) { }
  else if (v == changeUnderline_wxCHANGE_UNDERLINE_sym) { return 1; }
  if (where) scheme_wrong_type(where, "changeUnderline symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_changeUnderline(int v) {
  if (!changeUnderline_wxCHANGE_UNDERLINE_sym) init_symset_changeUnderline();
  switch (v) {
  case wxCHANGE_UNDERLINE: return changeUnderline_wxCHANGE_UNDERLINE_sym;
  default: return NULL;
  }
}

static Scheme_Object *changeSize_wxCHANGE_SIZE_sym = NULL;
static Scheme_Object *changeSize_wxCHANGE_BIGGER_sym = NULL;
static Scheme_Object *changeSize_wxCHANGE_SMALLER_sym = NULL;

static void init_symset_changeSize(void) {
  changeSize_wxCHANGE_SIZE_sym = scheme_intern_symbol("change-size");
  changeSize_wxCHANGE_BIGGER_sym = scheme_intern_symbol("change-bigger");
  changeSize_wxCHANGE_SMALLER_sym = scheme_intern_symbol("change-smaller");
}

static int unbundle_symset_changeSize(Scheme_Object *v, const char *where) {
  if (!changeSize_wxCHANGE_SMALLER_sym) init_symset_changeSize();
  if (0) { }
  else if (v == changeSize_wxCHANGE_SIZE_sym) { return wxCHANGE_SIZE; }
  else if (v == changeSize_wxCHANGE_BIGGER_sym) { return wxCHANGE_BIGGER; }
  else if (v == changeSize_wxCHANGE_SMALLER_sym) { return wxCHANGE_SMALLER; }
  if (where) scheme_wrong_type(where, "changeSize symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_changeSize(Scheme_Object *v, const char *where) {
  if (!changeSize_wxCHANGE_SMALLER_sym) init_symset_changeSize();
  if (0) { }
  else if (v == changeSize_wxCHANGE_SIZE_sym) { return 1; }
  else if (v == changeSize_wxCHANGE_BIGGER_sym) { return 1; }
  else if (v == changeSize_wxCHANGE_SMALLER_sym) { return 1; }
  if (where) scheme_wrong_type(where, "changeSize symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_changeSize(int v) {
  if (!changeSize_wxCHANGE_SMALLER_sym) init_symset_changeSize();
  switch (v) {
  case wxCHANGE_SIZE: return changeSize_wxCHANGE_SIZE_sym;
  case wxCHANGE_BIGGER: return changeSize_wxCHANGE_BIGGER_sym;
  case wxCHANGE_SMALLER: return changeSize_wxCHANGE_SMALLER_sym;
  default: return NULL;
  }
}

static Scheme_Object *changeAlign_wxCHANGE_ALIGNMENT_sym = NULL;

static void init_symset_changeAlign(void) {
  changeAlign_wxCHANGE_ALIGNMENT_sym = scheme_intern_symbol("change-alignment");
}

static int unbundle_symset_changeAlign(Scheme_Object *v, const char *where) {
  if (!changeAlign_wxCHANGE_ALIGNMENT_sym) init_symset_changeAlign();
  if (0) { }
  else if (v == changeAlign_wxCHANGE_ALIGNMENT_sym) { return wxCHANGE_ALIGNMENT; }
  if (where) scheme_wrong_type(where, "changeAlign symbol", -1, 0, &v);
  return 0;
}

static int istype_symset_changeAlign(Scheme_Object *v, const char *where) {
  if (!changeAlign_wxCHANGE_ALIGNMENT_sym) init_symset_changeAlign();
  if (0) { }
  else if (v == changeAlign_wxCHANGE_ALIGNMENT_sym) { return 1; }
  if (where) scheme_wrong_type(where, "changeAlign symbol", -1, 0, &v);
  return 0;
}

static Scheme_Object *bundle_symset_changeAlign(int v) {
  if (!changeAlign_wxCHANGE_ALIGNMENT_sym) init_symset_changeAlign();
  switch (v) {
  case wxCHANGE_ALIGNMENT: return changeAlign_wxCHANGE_ALIGNMENT_sym;
  default: return NULL;
  }
}



  





class os_wxStyleDelta : public wxStyleDelta {
 public:

  os_wxStyleDelta(Scheme_Object * obj, int x0 = wxCHANGE_NOTHING, int x1 = 0);
  ~os_wxStyleDelta();
};

Scheme_Object *os_wxStyleDelta_class;

os_wxStyleDelta::os_wxStyleDelta(Scheme_Object * o, int x0, int x1)
: wxStyleDelta(x0, x1)
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxStyleDelta::~os_wxStyleDelta()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaCopy(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "copy in style-delta%", 0);

  
  ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->Copy(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaCollapse(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "collapse in style-delta%", 0);

  
  r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->Collapse(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaEqual(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "equal? in style-delta%", 0);

  
  r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->Equal(*x0);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaSetDeltaForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleDelta* r;
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;

    
    if (n != 1) 
      scheme_wrong_count("set-delta-foreground in style-delta% (color name case)", 1, 1, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "set-delta-foreground in style-delta% (color name case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaForeground(x0);

    
    
  } else  {
    class wxColour* x0;

    
    if (n != 1) 
      scheme_wrong_count("set-delta-foreground in style-delta% (colour% case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "set-delta-foreground in style-delta% (colour% case)", 0);

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaForeground(*x0);

    
    
  }

  return objscheme_bundle_wxStyleDelta(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaSetDeltaBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleDelta* r;
  objscheme_check_valid(obj);
  if ((n >= 1) && objscheme_istype_string(p[0], NULL)) {
    string x0;

    
    if (n != 1) 
      scheme_wrong_count("set-delta-background in style-delta% (color name case)", 1, 1, n, p);
    x0 = (string)objscheme_unbundle_string(p[0], "set-delta-background in style-delta% (color name case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaBackground(x0);

    
    
  } else  {
    class wxColour* x0;

    
    if (n != 1) 
      scheme_wrong_count("set-delta-background in style-delta% (colour% case)", 1, 1, n, p);
    x0 = objscheme_unbundle_wxColour(p[0], "set-delta-background in style-delta% (colour% case)", 0);

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaBackground(*x0);

    
    
  }

  return objscheme_bundle_wxStyleDelta(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaSetDeltaFace(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleDelta* r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "set-delta-face in style-delta%");

  
  r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDeltaFace(x0);

  
  
  return objscheme_bundle_wxStyleDelta(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleDeltaSetDelta(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyleDelta* r;
  objscheme_check_valid(obj);
  if ((n >= 1) && istype_symset_changeFam(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("set-delta in style-delta% (family case)", 2, 2, n, p);
    x0 = unbundle_symset_changeFam(p[0], "set-delta in style-delta% (family case)");
    x1 = unbundle_symset_family(p[1], "set-delta in style-delta% (family case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(x0, x1);

    
    
  } else if ((n >= 1) && istype_symset_changeStyle(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("set-delta in style-delta% (style case)", 2, 2, n, p);
    x0 = unbundle_symset_changeStyle(p[0], "set-delta in style-delta% (style case)");
    x1 = unbundle_symset_style(p[1], "set-delta in style-delta% (style case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(x0, x1);

    
    
  } else if ((n >= 1) && istype_symset_changeWeight(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("set-delta in style-delta% (weight case)", 2, 2, n, p);
    x0 = unbundle_symset_changeWeight(p[0], "set-delta in style-delta% (weight case)");
    x1 = unbundle_symset_weight(p[1], "set-delta in style-delta% (weight case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(x0, x1);

    
    
  } else if ((n >= 1) && istype_symset_changeUnderline(p[0], NULL)) {
    int x0;
    Bool x1;

    
    if (n != 2) 
      scheme_wrong_count("set-delta in style-delta% (underline case)", 2, 2, n, p);
    x0 = unbundle_symset_changeUnderline(p[0], "set-delta in style-delta% (underline case)");
    x1 = objscheme_unbundle_bool(p[1], "set-delta in style-delta% (underline case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(x0, x1);

    
    
  } else if ((n >= 1) && istype_symset_changeSize(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("set-delta in style-delta% (size case)", 2, 2, n, p);
    x0 = unbundle_symset_changeSize(p[0], "set-delta in style-delta% (size case)");
    x1 = objscheme_unbundle_integer_in(p[1], 0, 255, "set-delta in style-delta% (size case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(x0, x1);

    
    
  } else if ((n >= 1) && istype_symset_changeAlign(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("set-delta in style-delta% (size case)", 2, 2, n, p);
    x0 = unbundle_symset_changeAlign(p[0], "set-delta in style-delta% (size case)");
    x1 = unbundle_symset_align(p[1], "set-delta in style-delta% (size case)");

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(x0, x1);

    
    
  } else  {
    int x0;
    int x1;

    
    if ((n > 1)) 
      scheme_wrong_count("set-delta in style-delta% (no change argument case)", 0, 1, n, p);
    if (n > 0) {
      x0 = unbundle_symset_changeNoArg(p[0], "set-delta in style-delta% (no change argument case)");
    } else
      x0 = wxCHANGE_NOTHING;

    
    r = ((wxStyleDelta *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(x0, x1);

    
    
  }

  return objscheme_bundle_wxStyleDelta(r);
}

static Scheme_Object *objscheme_wxStyleDelta_Getfamily(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-family in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::family;
  else
    v = ((wxStyleDelta *)cobj->primdata)->family;

  return bundle_symset_family(v);
}

static Scheme_Object *objscheme_wxStyleDelta_Setfamily(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-family in style-delta%", 1, 1, n, p);

  v = unbundle_symset_family(p[0], "set-family in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->family = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_Getface(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  nstring v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-face in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::face;
  else
    v = ((wxStyleDelta *)cobj->primdata)->face;

  return objscheme_bundle_string((char *)v);
}

static Scheme_Object *objscheme_wxStyleDelta_Setface(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  nstring v;

  if (n != 1) scheme_wrong_count("set-face in style-delta%", 1, 1, n, p);

  v = (nstring)objscheme_unbundle_nullable_string(p[0], "set-face in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->face = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetsizeMult(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  float v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-size-mult in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::sizeMult;
  else
    v = ((wxStyleDelta *)cobj->primdata)->sizeMult;

  return scheme_make_double(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetsizeMult(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  float v;

  if (n != 1) scheme_wrong_count("set-size-mult in style-delta%", 1, 1, n, p);

  v = objscheme_unbundle_float(p[0], "set-size-mult in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->sizeMult = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetsizeAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-size-add in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::sizeAdd;
  else
    v = ((wxStyleDelta *)cobj->primdata)->sizeAdd;

  return scheme_make_integer(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetsizeAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-size-add in style-delta%", 1, 1, n, p);

  v = objscheme_unbundle_integer_in(p[0], 0, 255, "set-size-add in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->sizeAdd = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetweightOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-weight-on in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::weightOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->weightOn;

  return bundle_symset_weight(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetweightOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-weight-on in style-delta%", 1, 1, n, p);

  v = unbundle_symset_weight(p[0], "set-weight-on in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->weightOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetweightOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-weight-off in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::weightOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->weightOff;

  return bundle_symset_weight(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetweightOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-weight-off in style-delta%", 1, 1, n, p);

  v = unbundle_symset_weight(p[0], "set-weight-off in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->weightOff = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetstyleOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-style-on in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::styleOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->styleOn;

  return bundle_symset_style(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetstyleOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-style-on in style-delta%", 1, 1, n, p);

  v = unbundle_symset_style(p[0], "set-style-on in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->styleOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetstyleOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-style-off in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::styleOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->styleOff;

  return bundle_symset_style(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetstyleOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-style-off in style-delta%", 1, 1, n, p);

  v = unbundle_symset_style(p[0], "set-style-off in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->styleOff = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetunderlinedOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-underlined-on in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::underlinedOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->underlinedOn;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxStyleDelta_SetunderlinedOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-underlined-on in style-delta%", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "set-underlined-on in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->underlinedOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetunderlinedOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-underlined-off in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::underlinedOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->underlinedOff;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxStyleDelta_SetunderlinedOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-underlined-off in style-delta%", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "set-underlined-off in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->underlinedOff = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GettransparentTextBackingOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-transparent-text-backing-on in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::transparentTextBackingOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->transparentTextBackingOn;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxStyleDelta_SettransparentTextBackingOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-transparent-text-backing-on in style-delta%", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "set-transparent-text-backing-on in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->transparentTextBackingOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GettransparentTextBackingOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  Bool v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-transparent-text-backing-off in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::transparentTextBackingOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->transparentTextBackingOff;

  return (v ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_wxStyleDelta_SettransparentTextBackingOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  Bool v;

  if (n != 1) scheme_wrong_count("set-transparent-text-backing-off in style-delta%", 1, 1, n, p);

  v = objscheme_unbundle_bool(p[0], "set-transparent-text-backing-off in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->transparentTextBackingOff = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetforegroundMult(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxMultColour* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-foreground-mult in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::foregroundMult;
  else
    v = ((wxStyleDelta *)cobj->primdata)->foregroundMult;

  return objscheme_bundle_wxMultColour(v);
}

static Scheme_Object *objscheme_wxStyleDelta_GetbackgroundMult(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxMultColour* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-background-mult in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::backgroundMult;
  else
    v = ((wxStyleDelta *)cobj->primdata)->backgroundMult;

  return objscheme_bundle_wxMultColour(v);
}

static Scheme_Object *objscheme_wxStyleDelta_GetforegroundAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxAddColour* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-foreground-add in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::foregroundAdd;
  else
    v = ((wxStyleDelta *)cobj->primdata)->foregroundAdd;

  return objscheme_bundle_wxAddColour(v);
}

static Scheme_Object *objscheme_wxStyleDelta_GetbackgroundAdd(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  class wxAddColour* v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-background-add in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::backgroundAdd;
  else
    v = ((wxStyleDelta *)cobj->primdata)->backgroundAdd;

  return objscheme_bundle_wxAddColour(v);
}

static Scheme_Object *objscheme_wxStyleDelta_GetalignmentOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-alignment-on in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::alignmentOn;
  else
    v = ((wxStyleDelta *)cobj->primdata)->alignmentOn;

  return bundle_symset_align(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetalignmentOn(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-alignment-on in style-delta%", 1, 1, n, p);

  v = unbundle_symset_align(p[0], "set-alignment-on in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->alignmentOn = v;

  return scheme_void;
}

static Scheme_Object *objscheme_wxStyleDelta_GetalignmentOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  Scheme_Class_Object *cobj;
  int v;

  objscheme_check_valid(obj);
  if (n) scheme_wrong_count("get-alignment-off in style-delta%", 0, 0, n, p);
  cobj = (Scheme_Class_Object *)obj;
  if (cobj->primflag)
    v = ((os_wxStyleDelta *)cobj->primdata)->wxStyleDelta::alignmentOff;
  else
    v = ((wxStyleDelta *)cobj->primdata)->alignmentOff;

  return bundle_symset_align(v);
}

static Scheme_Object *objscheme_wxStyleDelta_SetalignmentOff(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  objscheme_check_valid(obj);
  Scheme_Class_Object *cobj=(Scheme_Class_Object *)obj;
  int v;

  if (n != 1) scheme_wrong_count("set-alignment-off in style-delta%", 1, 1, n, p);

  v = unbundle_symset_align(p[0], "set-alignment-off in style-delta%");
  ((wxStyleDelta *)cobj->primdata)->alignmentOff = v;

  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleDelta_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxStyleDelta *realobj;
  if ((n >= 1) && istype_symset_changeAlign(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("initialization in style-delta% (size case)", 2, 2, n, p);
    x0 = unbundle_symset_changeAlign(p[0], "initialization in style-delta% (size case)");
    x1 = unbundle_symset_align(p[1], "initialization in style-delta% (size case)");

    
    realobj = new os_wxStyleDelta(obj, x0, x1);
    
    
  } else if ((n >= 1) && istype_symset_changeSize(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("initialization in style-delta% (size case)", 2, 2, n, p);
    x0 = unbundle_symset_changeSize(p[0], "initialization in style-delta% (size case)");
    x1 = objscheme_unbundle_integer_in(p[1], 0, 255, "initialization in style-delta% (size case)");

    
    realobj = new os_wxStyleDelta(obj, x0, x1);
    
    
  } else if ((n >= 1) && istype_symset_changeUnderline(p[0], NULL)) {
    int x0;
    Bool x1;

    
    if (n != 2) 
      scheme_wrong_count("initialization in style-delta% (underline case)", 2, 2, n, p);
    x0 = unbundle_symset_changeUnderline(p[0], "initialization in style-delta% (underline case)");
    x1 = objscheme_unbundle_bool(p[1], "initialization in style-delta% (underline case)");

    
    realobj = new os_wxStyleDelta(obj, x0, x1);
    
    
  } else if ((n >= 1) && istype_symset_changeWeight(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("initialization in style-delta% (weight case)", 2, 2, n, p);
    x0 = unbundle_symset_changeWeight(p[0], "initialization in style-delta% (weight case)");
    x1 = unbundle_symset_weight(p[1], "initialization in style-delta% (weight case)");

    
    realobj = new os_wxStyleDelta(obj, x0, x1);
    
    
  } else if ((n >= 1) && istype_symset_changeStyle(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("initialization in style-delta% (style case)", 2, 2, n, p);
    x0 = unbundle_symset_changeStyle(p[0], "initialization in style-delta% (style case)");
    x1 = unbundle_symset_style(p[1], "initialization in style-delta% (style case)");

    
    realobj = new os_wxStyleDelta(obj, x0, x1);
    
    
  } else if ((n >= 1) && istype_symset_changeFam(p[0], NULL)) {
    int x0;
    int x1;

    
    if (n != 2) 
      scheme_wrong_count("initialization in style-delta% (family case)", 2, 2, n, p);
    x0 = unbundle_symset_changeFam(p[0], "initialization in style-delta% (family case)");
    x1 = unbundle_symset_family(p[1], "initialization in style-delta% (family case)");

    
    realobj = new os_wxStyleDelta(obj, x0, x1);
    
    
  } else  {
    int x0;
    int x1;

    
    if ((n > 1)) 
      scheme_wrong_count("initialization in style-delta% (no change argument case)", 0, 1, n, p);
    if (n > 0) {
      x0 = unbundle_symset_changeNoArg(p[0], "initialization in style-delta% (no change argument case)");
    } else
      x0 = wxCHANGE_NOTHING;

    
    realobj = new os_wxStyleDelta(obj, x0, x1);
    
    
  }

  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

void objscheme_setup_wxStyleDelta(void *env)
{
if (os_wxStyleDelta_class) {
    objscheme_add_global_class(os_wxStyleDelta_class, "style-delta%", env);
} else {
  os_wxStyleDelta_class = objscheme_def_prim_class(env, "style-delta%", "object%", os_wxStyleDelta_ConstructScheme, 39);

 scheme_add_method_w_arity(os_wxStyleDelta_class, "copy", os_wxStyleDeltaCopy, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "collapse", os_wxStyleDeltaCollapse, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "equal?", os_wxStyleDeltaEqual, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "set-delta-foreground", os_wxStyleDeltaSetDeltaForeground, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "set-delta-background", os_wxStyleDeltaSetDeltaBackground, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "set-delta-face", os_wxStyleDeltaSetDeltaFace, 1, 1);
 scheme_add_method_w_arity(os_wxStyleDelta_class, "set-delta", os_wxStyleDeltaSetDelta, 0, 2);

  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-family", objscheme_wxStyleDelta_Getfamily, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-family", objscheme_wxStyleDelta_Setfamily, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-face", objscheme_wxStyleDelta_Getface, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-face", objscheme_wxStyleDelta_Setface, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-size-mult", objscheme_wxStyleDelta_GetsizeMult, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-size-mult", objscheme_wxStyleDelta_SetsizeMult, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-size-add", objscheme_wxStyleDelta_GetsizeAdd, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-size-add", objscheme_wxStyleDelta_SetsizeAdd, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-weight-on", objscheme_wxStyleDelta_GetweightOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-weight-on", objscheme_wxStyleDelta_SetweightOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-weight-off", objscheme_wxStyleDelta_GetweightOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-weight-off", objscheme_wxStyleDelta_SetweightOff, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-style-on", objscheme_wxStyleDelta_GetstyleOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-style-on", objscheme_wxStyleDelta_SetstyleOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-style-off", objscheme_wxStyleDelta_GetstyleOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-style-off", objscheme_wxStyleDelta_SetstyleOff, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-underlined-on", objscheme_wxStyleDelta_GetunderlinedOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-underlined-on", objscheme_wxStyleDelta_SetunderlinedOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-underlined-off", objscheme_wxStyleDelta_GetunderlinedOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-underlined-off", objscheme_wxStyleDelta_SetunderlinedOff, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-transparent-text-backing-on", objscheme_wxStyleDelta_GettransparentTextBackingOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-transparent-text-backing-on", objscheme_wxStyleDelta_SettransparentTextBackingOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-transparent-text-backing-off", objscheme_wxStyleDelta_GettransparentTextBackingOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-transparent-text-backing-off", objscheme_wxStyleDelta_SettransparentTextBackingOff, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-foreground-mult", objscheme_wxStyleDelta_GetforegroundMult, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-background-mult", objscheme_wxStyleDelta_GetbackgroundMult, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-foreground-add", objscheme_wxStyleDelta_GetforegroundAdd, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-background-add", objscheme_wxStyleDelta_GetbackgroundAdd, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-alignment-on", objscheme_wxStyleDelta_GetalignmentOn, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-alignment-on", objscheme_wxStyleDelta_SetalignmentOn, 1, 1);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"get-alignment-off", objscheme_wxStyleDelta_GetalignmentOff, 0, 0);
  scheme_add_method_w_arity(os_wxStyleDelta_class,"set-alignment-off", objscheme_wxStyleDelta_SetalignmentOff, 1, 1);

  scheme_made_class(os_wxStyleDelta_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxStyleDelta, wxTYPE_STYLE_DELTA);

}
}

int objscheme_istype_wxStyleDelta(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxStyleDelta_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "style-delta% object or " XC_NULL_STR: "style-delta% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxStyleDelta(class wxStyleDelta *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_STYLE_DELTA) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxStyleDelta_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxStyleDelta *objscheme_unbundle_wxStyleDelta(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxStyleDelta(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxStyleDelta *)o->primdata;
  else
    return (wxStyleDelta *)o->primdata;
}












class os_wxStyle : public wxStyle {
 public:

  ~os_wxStyle();
};

Scheme_Object *os_wxStyle_class;

Scheme_Object *os_wxStyle_interface;

os_wxStyle::~os_wxStyle()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxStyleSwitchTo(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;
  class wxStyle* x1;

  
  x0 = objscheme_unbundle_wxDC(p[0], "switch-to in style<%>", 0);
  x1 = objscheme_unbundle_wxStyle(p[1], "switch-to in style<%>", 1);

  if (x0 && !x0->Ok()) scheme_arg_mismatch(METHODNAME("style%","switch-to"), "bad device context: ", p[0]);
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->SwitchTo(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleSetShiftStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "set-shift-style in style<%>", 0);

  
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->SetShiftStyle(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleGetShiftStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetShiftStyle();

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleIsJoin(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->IsJoin();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleSetDelta(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "set-delta in style<%>", 0);

  
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->SetDelta(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleGetDelta(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyleDelta* x0;

  
  x0 = objscheme_unbundle_wxStyleDelta(p[0], "get-delta in style<%>", 0);

  
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetDelta(*x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleSetBaseStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "set-base-style in style<%>", 0);

  
  ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->SetBaseStyle(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleGetBaseStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetBaseStyle();

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTextWidth(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "get-text-width in style<%>", 0);

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTextWidth(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTextSpace(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "get-text-space in style<%>", 0);

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTextSpace(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTextDescent(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "get-text-descent in style<%>", 0);

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTextDescent(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTextHeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  float r;
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "get-text-height in style<%>", 0);

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTextHeight(x0);

  
  
  return scheme_make_double(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetTransparentTextBacking(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetTransparentTextBacking();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetAlignment(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetAlignment();

  
  
  return bundle_symset_align(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetBackground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = &((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetBackground();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetForeground(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxColour* r;
  objscheme_check_valid(obj);

  

  
  r = &((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetForeground();

  
  
  return objscheme_bundle_wxColour(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetFont(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxFont* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetFont();

  
  
  return objscheme_bundle_wxFont(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetUnderlined(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetUnderlined();

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetStyle();

  
  
  return bundle_symset_style(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetWeight(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetWeight();

  
  
  return bundle_symset_weight(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetSize(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetSize();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetFace(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetFace();

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetFamily(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetFamily();

  
  
  return bundle_symset_family(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleGetName(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  string r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyle *)((Scheme_Class_Object *)obj)->primdata)->GetName();

  
  
  return objscheme_bundle_string((char *)r);
}

void objscheme_setup_wxStyle(void *env)
{
if (os_wxStyle_class) {
    objscheme_add_global_class(os_wxStyle_class, "style%", env);
    objscheme_add_global_interface(os_wxStyle_interface, "style" "<%>", env);
} else {
  os_wxStyle_class = objscheme_def_prim_class(env, "style%", "object%", NULL, 24);

 scheme_add_method_w_arity(os_wxStyle_class, "switch-to", os_wxStyleSwitchTo, 2, 2);
 scheme_add_method_w_arity(os_wxStyle_class, "set-shift-style", os_wxStyleSetShiftStyle, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-shift-style", os_wxStyleGetShiftStyle, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "is-join?", os_wxStyleIsJoin, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "set-delta", os_wxStyleSetDelta, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-delta", os_wxStyleGetDelta, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "set-base-style", os_wxStyleSetBaseStyle, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-base-style", os_wxStyleGetBaseStyle, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-text-width", os_wxStyleGetTextWidth, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-text-space", os_wxStyleGetTextSpace, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-text-descent", os_wxStyleGetTextDescent, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-text-height", os_wxStyleGetTextHeight, 1, 1);
 scheme_add_method_w_arity(os_wxStyle_class, "get-transparent-text-backing", os_wxStyleGetTransparentTextBacking, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-alignment", os_wxStyleGetAlignment, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-background", os_wxStyleGetBackground, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-foreground", os_wxStyleGetForeground, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-font", os_wxStyleGetFont, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-underlined", os_wxStyleGetUnderlined, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-style", os_wxStyleGetStyle, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-weight", os_wxStyleGetWeight, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-size", os_wxStyleGetSize, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-face", os_wxStyleGetFace, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-family", os_wxStyleGetFamily, 0, 0);
 scheme_add_method_w_arity(os_wxStyle_class, "get-name", os_wxStyleGetName, 0, 0);


  scheme_made_class(os_wxStyle_class);

  os_wxStyle_interface = scheme_class_to_interface(os_wxStyle_class, "style" "<%>");

  objscheme_add_global_interface(os_wxStyle_interface, "style" "<%>", env);
  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxStyle, wxTYPE_STYLE);

}
}

int objscheme_istype_wxStyle(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxStyle_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "style% object or " XC_NULL_STR: "style% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxStyle(class wxStyle *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_STYLE) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxStyle_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxStyle *objscheme_unbundle_wxStyle(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxStyle(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxStyle *)o->primdata;
  else
    return (wxStyle *)o->primdata;
}






// @ "clear" : void Clear();
// @ "copy" : void Copy(wxStyleList!);








static void NotifyCallbackToScheme(wxStyle *, Scheme_Object *f);




class os_wxStyleList : public wxStyleList {
 public:

  os_wxStyleList(Scheme_Object * obj);
  ~os_wxStyleList();
};

Scheme_Object *os_wxStyleList_class;

os_wxStyleList::os_wxStyleList(Scheme_Object * o)
: wxStyleList()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxStyleList::~os_wxStyleList()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxStyleListForgetNotification(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  long x0;

  
  x0 = ((long)p[0]);

  
  ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->ForgetNotification(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxStyleListNotifyOnChange(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  long r;
  objscheme_check_valid(obj);
  wxStyleNotifyFunc x0;
  void* x1;

  
  x0 = (wxStyleNotifyFunc)NotifyCallbackToScheme;
  x1 = (scheme_check_proc_arity(METHODNAME("style-list%","notify-on-change"), 1, 0, 0, p), p[0]);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->NotifyOnChange(x0, x1);

  
  
  return ((Scheme_Object *)r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListStyleToIndex(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "style-to-index in style-list%", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->StyleToIndex(x0);

  
  
  return ((r < 0) ? scheme_false : scheme_make_integer(r));
}

#pragma argsused
static Scheme_Object *os_wxStyleListIndexToStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  nnint x0;

  
  x0 = objscheme_unbundle_nonnegative_integer(p[0], "index-to-style in style-list%");

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->IndexToStyle(x0);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListConvert(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  class wxStyle* x0;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "convert in style-list%", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->Convert(x0);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListReplaceNamedStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  string x0;
  class wxStyle* x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "replace-named-style in style-list%");
  x1 = objscheme_unbundle_wxStyle(p[1], "replace-named-style in style-list%", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->ReplaceNamedStyle(x0, x1);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListNewNamedStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  string x0;
  class wxStyle* x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "new-named-style in style-list%");
  x1 = objscheme_unbundle_wxStyle(p[1], "new-named-style in style-list%", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->NewNamedStyle(x0, x1);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListFindNamedStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "find-named-style in style-list%");

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->FindNamedStyle(x0);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListFindOrCreateJoinStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  class wxStyle* x0;
  class wxStyle* x1;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "find-or-create-join-style in style-list%", 1);
  x1 = objscheme_unbundle_wxStyle(p[1], "find-or-create-join-style in style-list%", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateJoinStyle(x0, x1);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListFindOrCreateStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);
  class wxStyle* x0;
  class wxStyleDelta* x1;

  
  x0 = objscheme_unbundle_wxStyle(p[0], "find-or-create-style in style-list%", 1);
  x1 = objscheme_unbundle_wxStyleDelta(p[1], "find-or-create-style in style-list%", 0);

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->FindOrCreateStyle(x0, x1);

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListNumber(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->Number();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleListBasicStyle(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxStyle* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxStyleList *)((Scheme_Class_Object *)obj)->primdata)->BasicStyle();

  
  
  return objscheme_bundle_wxStyle(r);
}

#pragma argsused
static Scheme_Object *os_wxStyleList_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxStyleList *realobj;

  
  if (n != 0) 
    scheme_wrong_count("initialization in style-list%", 0, 0, n, p);

  
  realobj = new os_wxStyleList(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

void objscheme_setup_wxStyleList(void *env)
{
if (os_wxStyleList_class) {
    objscheme_add_global_class(os_wxStyleList_class, "style-list%", env);
} else {
  os_wxStyleList_class = objscheme_def_prim_class(env, "style-list%", "object%", os_wxStyleList_ConstructScheme, 12);

 scheme_add_method_w_arity(os_wxStyleList_class, "forget-notification", os_wxStyleListForgetNotification, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "notify-on-change", os_wxStyleListNotifyOnChange, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "style-to-index", os_wxStyleListStyleToIndex, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "index-to-style", os_wxStyleListIndexToStyle, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "convert", os_wxStyleListConvert, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "replace-named-style", os_wxStyleListReplaceNamedStyle, 2, 2);
 scheme_add_method_w_arity(os_wxStyleList_class, "new-named-style", os_wxStyleListNewNamedStyle, 2, 2);
 scheme_add_method_w_arity(os_wxStyleList_class, "find-named-style", os_wxStyleListFindNamedStyle, 1, 1);
 scheme_add_method_w_arity(os_wxStyleList_class, "find-or-create-join-style", os_wxStyleListFindOrCreateJoinStyle, 2, 2);
 scheme_add_method_w_arity(os_wxStyleList_class, "find-or-create-style", os_wxStyleListFindOrCreateStyle, 2, 2);
 scheme_add_method_w_arity(os_wxStyleList_class, "number", os_wxStyleListNumber, 0, 0);
 scheme_add_method_w_arity(os_wxStyleList_class, "basic-style", os_wxStyleListBasicStyle, 0, 0);


  scheme_made_class(os_wxStyleList_class);

  objscheme_install_bundler((Objscheme_Bundler)objscheme_bundle_wxStyleList, wxTYPE_STYLE_LIST);

}
  scheme_install_xc_global("the-style-list", objscheme_bundle_wxStyleList(wxTheStyleList), env);
}

int objscheme_istype_wxStyleList(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxStyleList_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, nullOK ? "style-list% object or " XC_NULL_STR: "style-list% object", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxStyleList(class wxStyleList *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return XC_SCHEME_NULL;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((realobj->__type != wxTYPE_STYLE_LIST) && (sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxStyleList_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxStyleList *objscheme_unbundle_wxStyleList(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && XC_SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxStyleList(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxStyleList *)o->primdata;
  else
    return (wxStyleList *)o->primdata;
}


static void NotifyCallbackToScheme(wxStyle *s, Scheme_Object *f)
{
  Scheme_Object *p[1];

  p[0] = s ? objscheme_bundle_wxStyle(s) : scheme_false;

  scheme_apply_multi(f, 1, p);
}


/* DO NOT EDIT THIS FILE. */
/* This file was generated by xctocc from "wxs_misc.xc". */


#if defined(_MSC_VER)
# include "wx.h"
#endif

#include "wx_obj.h"
#include "wx_win.h"
#include "wx_timer.h"
#include "wx_types.h"
#include "wx_stdev.h"
#include "wx_dc.h"
#include "wx_clipb.h"





#include "wxscheme.h"
#include "wxs_misc.h"
#include "wxscomon.h"


#if !defined(wx_mac)
#define NEWEST_TYPES 1
#else
#define NEWEST_TYPES 0
#endif

#ifdef wx_msw

#include "wx_mf.h"

class baseMetaFile : public wxMetaFile
{
};

#else

class baseMetaFile : public wxObject
{
public:
  Bool Ok() { return FALSE; }
  void Play(wxDC*) { }
  Bool SetClipboard(int, int) { return FALSE; }

};

#endif


// @CREATOR (string=NULL);


class os_baseMetaFile : public baseMetaFile {
 public:

  ~os_baseMetaFile();
};

Scheme_Object *os_baseMetaFile_class;

os_baseMetaFile::~os_baseMetaFile()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_baseMetaFileSetClipboard(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  int x0;
  int x1;

  
  if (n > 0) {
    x0 = objscheme_unbundle_integer(p[0], "wx:meta-file%::set-clipboard");
  } else
    x0 = 0;
  if (n > 1) {
    x1 = objscheme_unbundle_integer(p[1], "wx:meta-file%::set-clipboard");
  } else
    x1 = 0;

  
  r = ((baseMetaFile *)((Scheme_Class_Object *)obj)->primdata)->SetClipboard(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_baseMetaFilePlay(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxDC* x0;

  
  x0 = objscheme_unbundle_wxDC(p[0], "wx:meta-file%::play", 0);

  
  ((baseMetaFile *)((Scheme_Class_Object *)obj)->primdata)->Play(x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_baseMetaFileOk(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);

  

  
  r = ((baseMetaFile *)((Scheme_Class_Object *)obj)->primdata)->Ok();

  
  
  return (r ? scheme_true : scheme_false);
}

static Scheme_Object *objscheme_classname_os_baseMetaFile(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:meta-file%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:meta-file%");
}

void objscheme_setup_baseMetaFile(void *env)
{
if (os_baseMetaFile_class) {
    objscheme_add_global_class(os_baseMetaFile_class,  "wx:meta-file%", env);
} else {
  os_baseMetaFile_class = objscheme_def_prim_class(env, "wx:meta-file%", "wx:object%", NULL, 4);

  scheme_add_method_w_arity(os_baseMetaFile_class,"get-class-name",objscheme_classname_os_baseMetaFile, 0, 0);

 scheme_add_method_w_arity(os_baseMetaFile_class, "set-clipboard", os_baseMetaFileSetClipboard, 0, 2);
 scheme_add_method_w_arity(os_baseMetaFile_class, "play", os_baseMetaFilePlay, 1, 1);
 scheme_add_method_w_arity(os_baseMetaFile_class, "ok?", os_baseMetaFileOk, 0, 0);


  scheme_made_class(os_baseMetaFile_class);


}
}

int objscheme_istype_baseMetaFile(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_baseMetaFile_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:meta-file%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_baseMetaFile(class baseMetaFile *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_baseMetaFile_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class baseMetaFile *objscheme_unbundle_baseMetaFile(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_baseMetaFile(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_baseMetaFile *)o->primdata;
  else
    return (baseMetaFile *)o->primdata;
}






class os_wxTimer : public wxTimer {
 public:

  os_wxTimer(Scheme_Object * obj);
  ~os_wxTimer();
  void Notify();
};

Scheme_Object *os_wxTimer_class;

os_wxTimer::os_wxTimer(Scheme_Object * o)
: wxTimer()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxTimer::~os_wxTimer()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

void os_wxTimer::Notify()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxTimer_class, "notify", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    wxTimer::Notify();
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxTimerStop(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  ((wxTimer *)((Scheme_Class_Object *)obj)->primdata)->Stop();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTimerStart(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Bool r;
  objscheme_check_valid(obj);
  int x0;
  Bool x1;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:timer%::start");
  if (n > 1) {
    x1 = objscheme_unbundle_bool(p[1], "wx:timer%::start");
  } else
    x1 = FALSE;

  
  r = ((wxTimer *)((Scheme_Class_Object *)obj)->primdata)->Start(x0, x1);

  
  
  return (r ? scheme_true : scheme_false);
}

#pragma argsused
static Scheme_Object *os_wxTimerNotify(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxTimer *)((Scheme_Class_Object *)obj)->primdata)->wxTimer::Notify();
  else
    ((wxTimer *)((Scheme_Class_Object *)obj)->primdata)->Notify();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxTimerInterval(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  int r;
  objscheme_check_valid(obj);

  

  
  r = ((wxTimer *)((Scheme_Class_Object *)obj)->primdata)->Interval();

  
  
  return scheme_make_integer(r);
}

#pragma argsused
static Scheme_Object *os_wxTimer_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxTimer *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:timer%::initialization", 0, 0, n, p);

  
  realobj = new os_wxTimer(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxTimer(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:timer%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:timer%");
}

void objscheme_setup_wxTimer(void *env)
{
if (os_wxTimer_class) {
    objscheme_add_global_class(os_wxTimer_class,  "wx:timer%", env);
} else {
  os_wxTimer_class = objscheme_def_prim_class(env, "wx:timer%", "wx:object%", os_wxTimer_ConstructScheme, 5);

  scheme_add_method_w_arity(os_wxTimer_class,"get-class-name",objscheme_classname_os_wxTimer, 0, 0);

 scheme_add_method_w_arity(os_wxTimer_class, "stop", os_wxTimerStop, 0, 0);
 scheme_add_method_w_arity(os_wxTimer_class, "start", os_wxTimerStart, 1, 2);
 scheme_add_method_w_arity(os_wxTimer_class, "notify", os_wxTimerNotify, 0, 0);
 scheme_add_method_w_arity(os_wxTimer_class, "interval", os_wxTimerInterval, 0, 0);


  scheme_made_class(os_wxTimer_class);


}
}

int objscheme_istype_wxTimer(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxTimer_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:timer%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxTimer(class wxTimer *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxTimer_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxTimer *objscheme_unbundle_wxTimer(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxTimer(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxTimer *)o->primdata;
  else
    return (wxTimer *)o->primdata;
}



void AddType(wxClipboardClient *c, char *s) 
{ 
  c->formats.Add(s); 
}

Scheme_Object *GetTypes(wxClipboardClient *c)
{
  wxNode *n = c->formats.First();
  Scheme_Object *first = scheme_null, *last = NULL;
  for (; n; n = n->Next()) {
    Scheme_Object *p;
    
    p = scheme_make_pair(scheme_make_string((char *)n->Data()), scheme_null);
    if (last)
      SCHEME_CDR(last) = p;
    else
      first = p;
    last = p;
  }
  
  return first;
}





class os_wxClipboard : public wxClipboard {
 public:

  ~os_wxClipboard();
};

Scheme_Object *os_wxClipboard_class;

os_wxClipboard::~os_wxClipboard()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

#pragma argsused
static Scheme_Object *os_wxClipboardGetClipboardData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  string x0;
  long _x1;
  long* x1 = &_x1;
  long x2;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:clipboard%::get-clipboard-data");
  x2 = objscheme_unbundle_integer(p[1], "wx:clipboard%::get-clipboard-data");

  
  r = ((wxClipboard *)((Scheme_Class_Object *)obj)->primdata)->GetClipboardData(x0, x1, x2);

  
  
  return (r ? scheme_make_sized_string(r, _x1, 1) : scheme_null);
}

#pragma argsused
static Scheme_Object *os_wxClipboardGetClipboardString(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  long x0;

  
  x0 = objscheme_unbundle_integer(p[0], "wx:clipboard%::get-clipboard-string");

  
  r = ((wxClipboard *)((Scheme_Class_Object *)obj)->primdata)->GetClipboardString(x0);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxClipboardGetClipboardClient(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  class wxClipboardClient* r;
  objscheme_check_valid(obj);

  

  
  r = ((wxClipboard *)((Scheme_Class_Object *)obj)->primdata)->GetClipboardClient();

  
  
  return objscheme_bundle_wxClipboardClient(r);
}

#pragma argsused
static Scheme_Object *os_wxClipboardSetClipboardString(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;
  long x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:clipboard%::set-clipboard-string");
  x1 = objscheme_unbundle_integer(p[1], "wx:clipboard%::set-clipboard-string");

  
  ((wxClipboard *)((Scheme_Class_Object *)obj)->primdata)->SetClipboardString(x0, x1);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxClipboardSetClipboardClient(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  class wxClipboardClient* x0;
  long x1;

  
  x0 = objscheme_unbundle_wxClipboardClient(p[0], "wx:clipboard%::set-clipboard-client", 0);
  x1 = objscheme_unbundle_integer(p[1], "wx:clipboard%::set-clipboard-client");

  
  ((wxClipboard *)((Scheme_Class_Object *)obj)->primdata)->SetClipboardClient(x0, x1);

  
  
  return scheme_void;
}

static Scheme_Object *objscheme_classname_os_wxClipboard(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:clipboard%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:clipboard%");
}

void objscheme_setup_wxClipboard(void *env)
{
if (os_wxClipboard_class) {
    objscheme_add_global_class(os_wxClipboard_class,  "wx:clipboard%", env);
} else {
  os_wxClipboard_class = objscheme_def_prim_class(env, "wx:clipboard%", "wx:object%", NULL, 6);

  scheme_add_method_w_arity(os_wxClipboard_class,"get-class-name",objscheme_classname_os_wxClipboard, 0, 0);

 scheme_add_method_w_arity(os_wxClipboard_class, "get-clipboard-data", os_wxClipboardGetClipboardData, 2, 2);
 scheme_add_method_w_arity(os_wxClipboard_class, "get-clipboard-string", os_wxClipboardGetClipboardString, 1, 1);
 scheme_add_method_w_arity(os_wxClipboard_class, "get-clipboard-client", os_wxClipboardGetClipboardClient, 0, 0);
 scheme_add_method_w_arity(os_wxClipboard_class, "set-clipboard-string", os_wxClipboardSetClipboardString, 2, 2);
 scheme_add_method_w_arity(os_wxClipboard_class, "set-clipboard-client", os_wxClipboardSetClipboardClient, 2, 2);


  scheme_made_class(os_wxClipboard_class);


}
  scheme_install_xc_global("wx:the-clipboard", objscheme_bundle_wxClipboard(wxTheClipboard), env);
}

int objscheme_istype_wxClipboard(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxClipboard_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:clipboard%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxClipboard(class wxClipboard *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxClipboard_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxClipboard *objscheme_unbundle_wxClipboard(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxClipboard(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxClipboard *)o->primdata;
  else
    return (wxClipboard *)o->primdata;
}









class os_wxClipboardClient : public wxClipboardClient {
 public:

  os_wxClipboardClient(Scheme_Object * obj);
  ~os_wxClipboardClient();
  nstring GetData(string x0, long* x1);
  void BeingReplaced();
};

Scheme_Object *os_wxClipboardClient_class;

os_wxClipboardClient::os_wxClipboardClient(Scheme_Object * o)
: wxClipboardClient()
{
  __gc_external = (void *)o;
  objscheme_backpointer(&__gc_external);
  objscheme_note_creation(o);
}

os_wxClipboardClient::~os_wxClipboardClient()
{
    objscheme_destroy(this, (Scheme_Object *)__gc_external);
}

nstring os_wxClipboardClient::GetData(string x0, long* x1)
{
  Scheme_Object *p[1];
  Scheme_Object *v;
  jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxClipboardClient_class, "get-data", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return NULL;
  } else {
  
  p[0] = objscheme_bundle_string((char *)x0);
  

  v = scheme_apply(method, 1, p);
  if (SCHEME_STRINGP(v)) (*x1) = SCHEME_STRTAG_VAL(v);
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  return (nstring)objscheme_unbundle_nullable_string(v, "wx:clipboard-client%::get-data"", extracting return value");
  }
}

void os_wxClipboardClient::BeingReplaced()
{
  Scheme_Object **p = NULL;
  Scheme_Object *v;
  jmp_buf savebuf;
  Scheme_Object *method;
  int sj;
  static void *mcache = 0;

  method = objscheme_find_method((Scheme_Object *)__gc_external, os_wxClipboardClient_class, "being-replaced", &mcache);
  if (method && !OBJSCHEME_PRIM_METHOD(method)) {
    COPY_JMPBUF(savebuf, scheme_error_buf);
    sj = scheme_setjmp(scheme_error_buf);
  } else sj = 1;
  if (sj) {
    if (method && !OBJSCHEME_PRIM_METHOD(method))
      COPY_JMPBUF(scheme_error_buf, savebuf);
    return;
  } else {
  
  

  v = scheme_apply(method, 0, p);
  
  
  COPY_JMPBUF(scheme_error_buf, savebuf);

  }
}

#pragma argsused
static Scheme_Object *os_wxClipboardClientGetTypes(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  Scheme_Object* r;
  objscheme_check_valid(obj);

  

  
  r = GetTypes(((wxClipboardClient *)((Scheme_Class_Object *)obj)->primdata));

  
  
  return r;
}

#pragma argsused
static Scheme_Object *os_wxClipboardClientAddType(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);
  string x0;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:clipboard-client%::add-type");

  
  AddType(((wxClipboardClient *)((Scheme_Class_Object *)obj)->primdata), x0);

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxClipboardClientGetData(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  nstring r;
  objscheme_check_valid(obj);
  string x0;
  long _x1;
  long* x1 = &_x1;

  
  x0 = (string)objscheme_unbundle_string(p[0], "wx:clipboard-client%::get-data");

  
  if (((Scheme_Class_Object *)obj)->primflag)
    r = ((os_wxClipboardClient *)((Scheme_Class_Object *)obj)->primdata)->GetData(x0, x1);
  else
    r = ((wxClipboardClient *)((Scheme_Class_Object *)obj)->primdata)->GetData(x0, x1);

  
  
  return objscheme_bundle_string((char *)r);
}

#pragma argsused
static Scheme_Object *os_wxClipboardClientBeingReplaced(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(n) WXS_USE_ARGUMENT(p)
  objscheme_check_valid(obj);

  

  
  if (((Scheme_Class_Object *)obj)->primflag)
    ((os_wxClipboardClient *)((Scheme_Class_Object *)obj)->primdata)->BeingReplaced();
  else
    ((wxClipboardClient *)((Scheme_Class_Object *)obj)->primdata)->BeingReplaced();

  
  
  return scheme_void;
}

#pragma argsused
static Scheme_Object *os_wxClipboardClient_ConstructScheme(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
  os_wxClipboardClient *realobj;

  
  if (n != 0) 
    scheme_wrong_count("wx:clipboard-client%::initialization", 0, 0, n, p);

  
  realobj = new os_wxClipboardClient(obj);
  
  
  ((Scheme_Class_Object *)obj)->primdata = realobj;
  objscheme_register_primpointer(&((Scheme_Class_Object *)obj)->primdata);
  ((Scheme_Class_Object *)obj)->primflag = 1;
  return obj;
}

static Scheme_Object *objscheme_classname_os_wxClipboardClient(Scheme_Object *obj, int n,  Scheme_Object *p[])
{
 WXS_USE_ARGUMENT(obj);
  if (n) scheme_wrong_count("wx:clipboard-client%" "::get-class-name", 0, 0, n, p);
  return scheme_intern_symbol("wx:clipboard-client%");
}

void objscheme_setup_wxClipboardClient(void *env)
{
if (os_wxClipboardClient_class) {
    objscheme_add_global_class(os_wxClipboardClient_class,  "wx:clipboard-client%", env);
} else {
  os_wxClipboardClient_class = objscheme_def_prim_class(env, "wx:clipboard-client%", "wx:object%", os_wxClipboardClient_ConstructScheme, 5);

  scheme_add_method_w_arity(os_wxClipboardClient_class,"get-class-name",objscheme_classname_os_wxClipboardClient, 0, 0);

 scheme_add_method_w_arity(os_wxClipboardClient_class, "get-types", os_wxClipboardClientGetTypes, 0, 0);
 scheme_add_method_w_arity(os_wxClipboardClient_class, "add-type", os_wxClipboardClientAddType, 1, 1);
 scheme_add_method_w_arity(os_wxClipboardClient_class, "get-data", os_wxClipboardClientGetData, 1, 1);
 scheme_add_method_w_arity(os_wxClipboardClient_class, "being-replaced", os_wxClipboardClientBeingReplaced, 0, 0);


  scheme_made_class(os_wxClipboardClient_class);


}
}

int objscheme_istype_wxClipboardClient(Scheme_Object *obj, const char *stop, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return 1;
  if (SAME_TYPE(SCHEME_TYPE(obj), scheme_object_type)
      && scheme_is_subclass(((Scheme_Class_Object *)obj)->sclass,          os_wxClipboardClient_class))
    return 1;
  else {
    if (!stop)
       return 0;
    scheme_wrong_type(stop, "wx:clipboard-client%", -1, 0, &obj);
    return 0;
  }
}

Scheme_Object *objscheme_bundle_wxClipboardClient(class wxClipboardClient *realobj)
{
  Scheme_Class_Object *obj;
  Scheme_Object *sobj;

  if (!realobj) return scheme_null;

  if (realobj->__gc_external)
    return (Scheme_Object *)realobj->__gc_external;
  if ((sobj = objscheme_bundle_by_type(realobj, realobj->__type)))
    return sobj;
  obj = (Scheme_Class_Object *)scheme_make_uninited_object(os_wxClipboardClient_class);

  obj->primdata = realobj;
  objscheme_register_primpointer(&obj->primdata);
  obj->primflag = 0;

  realobj->__gc_external = (void *)obj;
  objscheme_backpointer(&realobj->__gc_external);
  return (Scheme_Object *)obj;
}

class wxClipboardClient *objscheme_unbundle_wxClipboardClient(Scheme_Object *obj, const char *where, int nullOK)
{
  if (nullOK && SCHEME_NULLP(obj)) return NULL;

  (void)objscheme_istype_wxClipboardClient(obj, where, nullOK);
  Scheme_Class_Object *o = (Scheme_Class_Object *)obj;
  objscheme_check_valid(obj);
  if (o->primflag)
    return (os_wxClipboardClient *)o->primdata;
  else
    return (wxClipboardClient *)o->primdata;
}




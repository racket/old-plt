#!/bin/sh
#|
exec mzpp -s "---begin" -o `echo "$0" | sed 's/ssc$/c/'` "$0"
|#
---begin
<<{:<<>>:}>>
/********************************************
 ** Do not edit this file!
 ** This file is generated from {:current-file:},
 ** to make changes, edit that file and
 ** run it to generate an updated version
 ** of this file.
 ********************************************/

{:(load "ssc-utils.ss"):}

#include "schpriv.h"
#include <lightning.h>
#include <sys/mman.h>

/*****************************************************************************/
/* Main code */

#define MAX_INSTR_SIZE 10

inline Scheme_Object *assq(Scheme_Object *x, Scheme_Object *l)
{
  Scheme_Object *args[2];
  args[0] = x;
  args[1] = l;
  return _scheme_apply(scheme_builtin_value("assq"), 2, args);
}

#define JIT_KIND_R (1<<16)
#define JIT_KIND_I (2<<16)

#define JIT_TYPE_C    1
#define JIT_TYPE_UC   2
#define JIT_TYPE_S    3
#define JIT_TYPE_US   4
#define JIT_TYPE_I    5
#define JIT_TYPE_UI   6
#define JIT_TYPE_L    7
#define JIT_TYPE_UL   8
#define JIT_TYPE_P    9
#define JIT_TYPE_F  256
#define JIT_TYPE_D  257

{:;; register symbols
  (define type-syms '(c uc s us i ui l ul p f d))
  (add-symbols type-syms):}

inline int mzjit_get_type(const Scheme_Object *sym)
{
  {:(let ([fst? #t])
      (map (lambda (t)
             (list (begin0 (if fst? "if     " "else if") (set! fst? #f))
                   " (SAME_OBJ(sym,"t"_sym)) return JIT_TYPE_"(upcase t)";"\\))
           type-syms)):}
  scheme_signal_error("jit-proc: got a bad type spec %V", sym);
  return -1; /* shush the compiler */
}

{:;; register symbols
  (define reg-specs
    '(r v fpr))
  (add-symbols reg-specs)
  (define reg-syms
    '(r0 r1 r2 v0 v1 v2 fpr0 fpr1 fpr2 fpr3 fpr4 fpr5 sp fp ret))
  (add-symbols reg-syms):}

char *errorstr_bad_register_spec="jit-proc: got a bad register spec `%V' (%s)";

inline void mzjit_check_register(const Scheme_Object *sym, int floatp)
{
  char *s = SCHEME_SYM_VAL(sym);
  if (floatp) {
    if (s[0] == 'r' || s[0] == 'v')
      scheme_signal_error(errorstr_bad_register_spec, sym,
                          "expecting a floating point (`fpr') register");
  } else {
    if (!strncmp(s, "fpr", 3))
      scheme_signal_error(errorstr_bad_register_spec, sym,
                          "expecting an integer (`r' or `v') register");
  }
}

inline int mzjit_get_register(const Scheme_Object *reg, int floatp)
{
  if (SCHEME_PAIRP(reg)) {
    int r;
    Scheme_Object *rname;
    if (!SCHEME_PAIRP(SCHEME_CDR(reg))   ||
        !SCHEME_NULLP(SCHEME_CDDR(reg))  ||
        !SCHEME_SYMBOLP(SCHEME_CAR(reg)) ||
        !SCHEME_INTP(SCHEME_CADR(reg)))
      scheme_signal_error(errorstr_bad_register_spec, reg, "bad value");
    r = SCHEME_INT_VAL(SCHEME_CADR(reg));
    rname = SCHEME_CAR(reg);
    mzjit_check_register(rname,floatp);
    if (SAME_OBJ(rname,r_sym) && r < JIT_R_NUM) return JIT_R(r);
    else if (SAME_OBJ(rname,v_sym) && r < JIT_V_NUM) return JIT_V(r);
    else if (SAME_OBJ(rname,fpr_sym) && r < JIT_FPR_NUM) return JIT_FPR(r);
    else scheme_signal_error(errorstr_bad_register_spec, reg,
                             "unknown register, or too few registers");
  } else {
    mzjit_check_register(reg,floatp);
    {:(let ([fst? #t])
        (map (lambda (r)
               (list (if (begin0 fst? (set! fst? #f)) "if     " "else if")
                     " (SAME_OBJ(reg,"r"_sym)) return JIT_"(upcase r)";"\\))
             reg-syms)) :}
    else scheme_signal_error(errorstr_bad_register_spec, reg,
                             "unknown register");
  }
  return -1; /* shush the compiler */
}

inline void mzjit_set_label(Scheme_Object *sym,
                            Scheme_Object **bwdsp, Scheme_Object **fwdsp)
{
  Scheme_Object *a;
  jit_insn *r;
  a = assq(sym,*bwdsp);
  if (!SCHEME_FALSEP(a))
    scheme_signal_error("jit-proc: label already set: %V", sym);
  r = jit_get_label();
  *bwdsp = scheme_make_pair(scheme_make_pair(sym,scheme_make_cptr(r,NULL)),
                            *bwdsp);
  a = assq(sym,*fwdsp);
  if (!SCHEME_FALSEP(a)) {
    /* found fwd entries, patch them */
    SCHEME_CAR(a) = scheme_false;
    while ( !SCHEME_NULLP(a = SCHEME_CDR(a)) ) {
      r = SCHEME_CPTR_VAL(SCHEME_CAR(a));
      jit_patch(r);
    }
  }
}

void mzjit_set_fwd_label(Scheme_Object *sym, Scheme_Object **fwdsp,
                         jit_insn *fwd)
{
  Scheme_Object *a, *p;
  a = assq(sym,*fwdsp);
  p = scheme_make_pair(scheme_make_cptr(fwd,NULL),scheme_null);
  if (!SCHEME_FALSEP(a)) {
    SCHEME_CDR(p) = SCHEME_CDR(a);
    SCHEME_CDR(a) = p;
  } else {
    *fwdsp = scheme_make_pair(scheme_make_pair(sym,p), *fwdsp);
  }
}

inline jit_insn *mzjit_get_label(Scheme_Object *sym, Scheme_Object *bwds)
{
  Scheme_Object *a = assq(sym,bwds);
  if (!SCHEME_FALSEP(a)) return SCHEME_CPTR_VAL(SCHEME_CDR(a));
  else return NULL; /* return NULL if no label found */
}

inline long mzjit_get_imm(Scheme_Object *o)
{
  long i;
  if ( !scheme_get_int_val(o,&i) )
    scheme_signal_error("jit-proc: got a bad immediate %V", o);
  return i;
}

/* !!! */
#define jit_finishi(sub) jit_finish(sub)

{:

(define operators
  '(;; ========================================
    ("Binary ALU operations" (t r r r/i)
     (add    :r           i ui l ul p f d) ; O1 = O2 + O3
     (add    :i           i ui l ul p    ) ; O1 = O2 + O3
     (addx   :r           i ui l ul      ) ; O1 = O2 + (O3 + carry)
     (addx   :i           i ui l ul      ) ; O1 = O2 + (O3 + carry)
     (addc   :r           i ui l ul      ) ; O1 = O2 + O3, set carry
     (addc   :i           i ui l ul      ) ; O1 = O2 + O3, set carry
     (sub    :r           i ui l ul p f d) ; O1 = O2 - O3
     (sub    :i           i ui l ul p    ) ; O1 = O2 - O3
     (subx   :r           i ui l ul      ) ; O1 = O2 - (O3 + carry)
     (subx   :i           i ui l ul      ) ; O1 = O2 - (O3 + carry)
     (subc   :r           i ui l ul      ) ; O1 = O2 - O3, set carry
     (subc   :i           i ui l ul      ) ; O1 = O2 - O3, set carry
     (rsb    :r           i ui l ul p f d) ; O1 = O3 - O2
     (rsb    :i           i ui l ul p    ) ; O1 = O3 - O2
     (mul    :r           i ui l ul   f d) ; O1 = O2 * O3
     (mul    :i           i ui l ul      ) ; O1 = O2 * O3
     (hmul   :r           i ui l ul      ) ; O1 = high bits of O2 * O3
     (hmul   :i           i ui l ul      ) ; O1 = high bits of O2 * O3
     (div    :r           i ui l ul   f d) ; O1 = O2 / O3
     (div    :i           i ui l ul      ) ; O1 = O2 / O3
     (mod    :r           i ui l ul      ) ; O1 = O2 % O3
     (mod    :i           i ui l ul      ) ; O1 = O2 % O3
     (and    :r           i ui l ul      ) ; O1 = O2 & O3
     (and    :i           i ui l ul      ) ; O1 = O2 & O3
     (or     :r           i ui l ul      ) ; O1 = O2 | O3
     (or     :i           i ui l ul      ) ; O1 = O2 | O3
     (xor    :r           i ui l ul      ) ; O1 = O2 ^ O3
     (xor    :i           i ui l ul      ) ; O1 = O2 ^ O3
     (lsh    :r           i ui l ul      ) ; O1 = O2 << O3
     (lsh    :i           i ui l ul      ) ; O1 = O2 << O3
     (rsh    :r           i ui l ul      ) ; O1 = O2 >> O3(1)
     (rsh    :i           i ui l ul      ) ; O1 = O2 >> O3(2)
     )
    ;; ========================================
    ("Unary ALU operations" (t r r)
     (neg    :r           i    l      f d) ; O1 = -O2
     (not    :r           i ui l ul      ) ; O1 = ~O2
     )
    ;; ========================================
    ("Compare instructions" (t r r r/i)
     (lt     :r           i ui l ul p f d) ; O1 = (O2 <  O3)
     (lt     :i           i ui l ul p    ) ; O1 = (O2 <  O3)
     (le     :r           i ui l ul p f d) ; O1 = (O2 <= O3)
     (le     :i           i ui l ul p    ) ; O1 = (O2 <= O3)
     (gt     :r           i ui l ul p f d) ; O1 = (O2 >  O3)
     (gt     :i           i ui l ul p    ) ; O1 = (O2 >  O3)
     (ge     :r           i ui l ul p f d) ; O1 = (O2 >= O3)
     (ge     :i           i ui l ul p    ) ; O1 = (O2 >= O3)
     (eq     :r           i ui l ul p f d) ; O1 = (O2 == O3)
     (eq     :i           i ui l ul p    ) ; O1 = (O2 == O3)
     (ne     :r           i ui l ul p f d) ; O1 = (O2 != O3)
     (ne     :i           i ui l ul p    ) ; O1 = (O2 != O3)
     (unlt   :r                       f d) ; O1 = !(O2 >= O3)
     (unle   :r                       f d) ; O1 = !(O2 >  O3)
     (ungt   :r                       f d) ; O1 = !(O2 <= O3)
     (unge   :r                       f d) ; O1 = !(O2 <  O3)
     (uneq   :r                       f d) ; O1 = !(O2 <  O3) && !(O2 >  O3)
     (ltgt   :r                       f d) ; O1 = !(O2 >= O3) || !(O2 <= O3)
     (ord    :r                       f d) ; O1 =  (O2 == O2) &&  (O3 == O3)
     (unord  :r                       f d) ; O1 =  (O2 != O2) ||  (O3 != O3)
     )
    ;; ========================================
    ("Transfer operations 1" (t r r/i)
     (mov    :r           i ui l ul p f d) ; O1 = O2
     (mov    :i           i ui l ul p f d) ; O1 = O2 (p* means a label) !!!
     )
    ("Transfer operations 2" (t t r r)
     (ext    :r 2types                     ; O1 = O2
             ((c uc) (s us i ui l ul))
             ((s us) (i ui l ul))
             ((i ui) (l ul))
             ((i) (f d)))
     (round  :r 2types ((f d) (i)))        ; O1 = round(O2)
     (trunc  :r 2types ((f d) (i)))        ; O1 = trunc(O2)
     (floor  :r 2types ((f d) (i)))        ; O1 = floor(O2)
     (ceil   :r 2types ((f d) (i)))        ; O1 = ceil(O2)
     )
    ;; ========================================
    ("Network extensions" (t r r)
     (hton            us   ui           ) ; Host-to-network (big endian) order
     (ntoh            us   ui           ) ; Network-to-host order
     )
    ;; ========================================
    ("Load operations 1" (t r r/i)
     (ld     :r c uc s us i ui l ul p f d) ; O1 = *O2
     (ld     :i c uc s us i ui l ul p f d) ; O1 = *O2
     )
    ("Load operations 2" (t r r r/i)
     (ldx    :r c uc s us i ui l ul p f d) ; O1 = *(O2+O3)
     (ldx    :i c uc s us i ui l ul p f d) ; O1 = *(O2+O3)
     )
    ;; ========================================
    ("Store operations 1" (t r/i r)
     (st     :r c uc s us i ui l ul p f d) ; *O1 = O2
     (st     :i c uc s us i ui l ul p f d) ; *O1 = O2
     )
    ("Store operations 2" (t r/i r r)
     (stx    :r c uc s us i ui l ul p f d) ; *(O1+O2) = O3
     (stx    :i c uc s us i ui l ul p f d) ; *(O1+O2) = O3
     )
    ;; ========================================
    ("Stack management" (t r)
     (push   :r           i ui l ul p    ) ; push O1 on the stack
     (pop    :r           i ui l ul p    ) ; pop O1 off the stack
     )
    ;; ========================================
    ("Argument management" (t i)
     (prepare             i           f d)
     )
    ("Argument management 2" (t r)
     (pusharg   c uc s us i ui l ul p f d) ; push O1 on the `call stack'
     (getarg    c uc s us i ui l ul p f d) ; pop O1 off the `call stack'
     ;; `getarg' is hacked below to use `arg'
     )
    ;; ========================================
    ("Branch instructions" (t l r r/i)
     (blt    :r           i ui l ul p #|f d|#) ; if (O2 <  O3) =>O1
     (blt    :i           i ui l ul p    ) ; if (O2 <  O3) =>O1
     (ble    :r           i ui l ul p #|f d|#) ; if (O2 <= O3) =>O1
     (ble    :i           i ui l ul p    ) ; if (O2 <= O3) =>O1
     (bgt    :r           i ui l ul p #|f d|#) ; if (O2 >  O3) =>O1
     (bgt    :i           i ui l ul p    ) ; if (O2 >  O3) =>O1
     (bge    :r           i ui l ul p #|f d|#) ; if (O2 >= O3) =>O1
     (bge    :i           i ui l ul p    ) ; if (O2 >= O3) =>O1
     (beq    :r           i ui l ul p #|f d|#) ; if (O2 == O3) =>O1
     (beq    :i           i ui l ul p    ) ; if (O2 == O3) =>O1
     (bne    :r           i ui l ul p #|f d|#) ; if (O2 != O3) =>O1
     (bne    :i           i ui l ul p    ) ; if (O2 != O3) =>O1
     ;(bunlt  :r                       f d) ; if !(O2 >= O3) =>O1
     ;(bunle  :r                       f d) ; if !(O2 >  O3) =>O1
     ;(bungt  :r                       f d) ; if !(O2 <= O3) =>O1
     ;(bunge  :r                       f d) ; if !(O2 <  O3) =>O1
     ;(buneq  :r                       f d) ; if !(O2 <  O3) && !(O2 >  O3) =>O1
     ;(bltgt  :r                       f d) ; if !(O2 >= O3) || !(O2 <= O3) =>O1
     ;(bord   :r                       f d) ; if  (O2 == O2) &&  (O3 == O3) =>O1
     ;(bunord :r                       f d) ; if !(O2 != O2) ||  (O3 != O3) =>O1
     (bms    :r           i ui l ul      ) ; if O2 &  O3 =>O1
     (bms    :i           i ui l ul      ) ; if O2 &  O3 =>O1
     (bmc    :r           i ui l ul      ) ; if !(O2 & O3) =>O1
     (bmc    :i           i ui l ul      ) ; if !(O2 & O3) =>O1(4)
     (boadd  :r           i #|ui|# l #|ul|#      ) ; O2 += O3, =>O1 on overflow
     (boadd  :i           i #|ui|# l #|ul|#      ) ; O2 += O3, =>O1 on overflow
     (bosub  :r           i #|ui|# l #|ul|#      ) ; O2 -= O3, =>O1 on overflow
     (bosub  :i           i #|ui|# l #|ul|#      ) ; O2 -= O3, =>O1 on overflow
     )
    ;; ======================================== !!!!
    ("Jump and return operations 1" (r/i)
     (call   :i 0types                   ) ; function call to O1
     (call   :r 0types                   ) ; function call to a register
     (finish :i 0types                   ) ; function call to O1
     (finish :r 0types                   ) ; function call to a register
     (jmp    :r 0types                   ) ; unconditional jump to O1
     )
    ("Jump and return operations 2" (l)
     ;; use a different name for this, otherwise there will be different cases
     ;; for `jmp'.
     (jmpi      0types                   ) ; unconditional jump to O1 !!!!
     )
    ("Jump and return operations 3" (i)
     (prolog    0types                   ) ; function prolog for O1 args
     (leaf      0types                   ) ; the same for leaf functions
     )
    ("Jump and return operations 4" ()
     (ret       0types                   ) ; return from subroutine
     )
    ("Jump and return operations 5" (t r)
     (retval    c uc s us i ui l ul p f d) ; move return value to register
     )
    ))

;; implementation
(define op-syms
  (let loop ([ops (map car (apply append (map cddr operators)))] [r '()])
    (if (null? ops)
      (reverse! r)
      (loop (cdr ops)
            (if (assq (car ops) r)
              r
              (let ([name (format "JIT_OP_~a" (car ops))])
                (~ "#define "name" (scheme_make_integer("(length r)"))")
                (cons (list (car ops) name) r)))))))

(show "char *errorstr_wrong_args_num = \""
      "jit-proc: wrong number of arguments to `%V' expecting %d, got %V\";"\\
      "char *errorstr_bad_command_format = \""
      "jit-proc: bad format for `%V' in %V\";")

(define (cross-product l1 l2)
  (apply append (map (lambda (x1) (map (lambda (x2) (list x1 x2)) l2)) l1)))

(define (jit-command-cluster cluster)
  (let* ([name (car cluster)]
         [args (cadr cluster)]
         [arglen (length args)]
         [ops (cddr cluster)]
         [ops* (let loop ([ops ops] [r '()])
                 (cond [(null? ops) (reverse! r)]
                       [(and (pair? (cdr ops)) (eq? (caar ops) (caadr ops)))
                        (loop (cddr ops) (cons (list (car ops) (cadr ops)) r))]
                       [else (loop (cdr ops) (cons (list (car ops)) r))]))]
         [opsnum (length ops*)]
         [arg-i  0]
         [type-i 0]
         [kind?  #f])
    (define (argi! name)
      (set! arg-i (add1 arg-i))
      (format "~a~a" name arg-i))
    (define (typei!)
      (set! type-i (add1 type-i))
      (format "type~a" type-i))
    (define (floatp)
      (define t0 "0 /* always an integer register */")
      (define t1 "(type1>=JIT_TYPE_F)")
      (define t2 "(type2>=(JIT_TYPE_F<<8))")
      (cond [(= 0 type-i) t0]
            [(= 1 type-i) t1]
            ;; type1 refers to arg2 and type2 to arg1
            [(and (= 2 type-i) (= 1 arg-i)) t2]
            [(and (= 2 type-i) (= 2 arg-i)) t1]
            [else (error "something bad happened (weird t/r combination)")]))
    (~ "/* ========== "name" ========== */")
    (for-each (lambda (o*)
                (~ "case ((int)("(cadr (assq (caar o*) op-syms))")):"))
              ops*)
    (~ "  if (cmd_arg_num != "(length args)")" \\
       "    scheme_signal_error(errorstr_wrong_args_num, operator, "
                                (length args)", pc);")
    (set! arg-i 0)
    (for-each
     (lambda (arg)
       (~ "  /* process `"arg"' argument */")
       (case arg
         [(r)   (~ "  "(argi! "reg")
                   " = mzjit_get_register(SCHEME_CAR(pc),"(floatp)");")]
         [(i)   (~ "  imm = mzjit_get_imm(SCHEME_CAR(pc));")]
         [(r/i) (set! kind? #t)
                (~ "  if (SCHEME_REGP(SCHEME_CAR(pc))) {" \\
                   "    "(argi! "reg")
                         " = mzjit_get_register(SCHEME_CAR(pc),"(floatp)");" \\
                   "    kind = JIT_KIND_R;" \\
                   "  } else {" \\
                   "    imm = mzjit_get_imm(SCHEME_CAR(pc));" \\
                   "    kind = JIT_KIND_I;" \\
                   "  }")]
         [(t)   (~ "  "(typei!)" = (mzjit_get_type(SCHEME_CAR(pc)))"
                   (and (= 2 type-i) "<<8")";")]
         [(l)   (~ "  labelsym  = SCHEME_CAR(pc);" \\
                   "  labeladdr = mzjit_get_label(labelsym,bwd_labels);" \\
                   "  if (labeladdr != NULL) labelsym = NULL;"
                     " else labeladdr = jit_forward();")]
         [else (error 'arg "something bad happened (unknown arg type ~s)"
                      arg)])
       (~ "  pc = SCHEME_CDR(pc);"))
     args)
    (when (< 1 opsnum) (~ "  switch (operator_id) {"))
    (for-each
     (lambda (o*)
       (define switches '())
       (define switch-num '())
       (when (< 1 opsnum)
         (~ "  case ((int)("(cadr (assq (caar o*) op-syms))")):"))
       (when (<= 2 type-i) (push! 'type2 switches))
       (when (<= 1 type-i) (push! 'type1 switches))
       (when kind?         (push! 'kind switches))
       (set! switch-num (and (pair? switches) (seplist switches " | ")))
       (when switch-num (~ "    switch ("switch-num") {"))
       (for-each
        (lambda (o)
          (define op (pop! o))
          (define-values (K k)
            (case (and (pair? o) (car o))
              [(:i) (pop! o) (values "I" "i")]
              [(:r) (pop! o) (values "R" "r")]
              [else
               (if kind?
                 (error "something bad happened (r/i arg, but no :r or :i)")
                 (values #f #f))]))
          (define types o)
          (when (and (pair? types) (eq? '2types (car types)))
            (set! types (apply append
                               (map (lambda (ts) (apply cross-product ts))
                                    (cdr types)))))
          (for-each
           (lambda (t)
             (define case-num '())
             (define T (if (list? t) (map upcase t) (upcase t)))
             (unless (eq? (list? t) (not (not (memq 'type2 switches))))
               (error 'case-num "something bad happened: t=~s, switches=~s"
                      t switches))
             (when (memq 'type2 switches)
               (push! (list "(JIT_TYPE_"(cadr T)"<<8)") case-num))
             (when (memq 'type1 switches)
               (push! (list "JIT_TYPE_"(if (list? t) (car T) T)) case-num))
             (when (memq 'kind switches)
               (push! (list "JIT_KIND_"K) case-num))
             (set! arg-i 0)
             (~ (if (pair? case-num)
                  (list "    case ("(seplist case-num " | ")"):")
                  " ")
                ;; " fprintf(stderr,\"Emitting "op k"_"t"\\n\");"
                (when (eq? 'getarg op)
                  (list " in = jit_arg_" t "();"))
                (when (memq 'l args) " patch =")
                " jit_"op k
                (unless (eq? t '0types)
                  (list "_" (if (list? t) (seplist t "_") t)))
                "("
                (let loop ([as args] [r '()])
                  (cond [(null? as)
                         (when (eq? 'getarg op) (push! "in" r))
                         (and (pair? r) (seplist (reverse! r) ","))]
                        [(eq? 'r (car as))
                         (loop (cdr as) (cons (argi! "reg") r))]
                        [(eq? 'i (car as))
                         (loop (cdr as) (cons "imm" r))]
                        [(eq? 'r/i (car as))
                         (loop (cdr as)
                               (cons (if (equal? "i" k)
                                       (begin (argi! "imm") "imm")
                                       (argi! "reg"))
                                     r))]
                        [(eq? 'l (car as))
                         (loop (cdr as) (cons "labeladdr" r))]
                        [else (loop (cdr as) r)]))
                ");"
                (and (pair? case-num) " break;")))
           types))
        o*)
       (when switch-num
         (~ "    default: scheme_signal_error(errorstr_bad_command_format,"
                             "operator,command);"\\
            "    }"))
       (when (< 1 opsnum) (~ "    break;")))
     ops*)
    (when (< 1 opsnum) (~ "  }"))
    (~ "  break;")))

(define (jit-commands)
  (~ "switch (operator_id) {")
  (for-each jit-command-cluster operators)
  (~ "}"))

:}

Scheme_Object *op_alist;

#define SCHEME_REGP(x) \
  ((SCHEME_SYMBOLP(x))||((SCHEME_PAIRP(x))&&(SCHEME_SYMBOLP(SCHEME_CAR(x)))))

size_t mzjit_make(Scheme_Object *list, char *code, size_t len)
{
  char *current_location = 0;
  Scheme_Object *p = list, *command, *pc, *operator, *a;
  Scheme_Object *bwd_labels=scheme_null, *fwd_labels=scheme_null, *labelsym;
  int cmd_arg_num, operator_id;
  int type1, type2, kind, reg1=0, reg2=0, reg3=0, in;
  unsigned long imm=0;
  jit_insn *labeladdr, *patch=NULL;
  current_location = jit_set_ip(code).ptr;
  while (SCHEME_PAIRP(p)) {
    current_location = jit_get_ip().ptr;
    command = SCHEME_CAR(p);
    p = SCHEME_CDR(p);
    /* check the current block size */
    if ((((char*)current_location) - ((char*)code)) + MAX_INSTR_SIZE > len)
      return -1;
    if (SCHEME_SYMBOLP(command)) {
      mzjit_set_label(command, &bwd_labels, &fwd_labels);
      continue;
    }
    cmd_arg_num = scheme_proper_list_length(command) - 1;
    if ( cmd_arg_num < 0 )
      scheme_signal_error("jit-proc: got a bad command %V in %V",
                          command, list);
    operator = SCHEME_CAR(command);
    pc = SCHEME_CDR(command);
    a = assq(operator, op_alist);
    if (SCHEME_FALSEP(a))
      scheme_signal_error("jit-proc: unknown operator %V in %V",operator,list);
    operator_id = (int)(SCHEME_CDR(a));
    kind = type1 = type2 = 0;
    labelsym = NULL;
    {:(jit-commands):}
    if (labelsym != NULL) mzjit_set_fwd_label(labelsym, &fwd_labels, patch);
  }
  while (!SCHEME_NULLP(fwd_labels)) {
    if ( !SCHEME_FALSEP(SCHEME_CAAR(fwd_labels)) )
      scheme_signal_error("jit-proc: reference to undefined label `%V'",
                          SCHEME_CAAR(fwd_labels));
    fwd_labels = SCHEME_CDR(fwd_labels);
  }
  current_location = jit_get_ip().ptr;
  jit_flush_code(code, current_location);
  return current_location - code;
}

void free_jit_code(void *ignored, void *code)
{
  free(code);
}

static char   *mzjit_code_buffer = NULL;
static size_t  mzjit_code_len = 0;

{:(cdefine jit-proc 1 1):}
{
  char *code;
  Scheme_Object *r;
  size_t size = -1;
  if ( scheme_proper_list_length(argv[0]) <= 0 )
    scheme_wrong_type("jit-proc", "list", 0, argc, argv);
  /* generate into code */
  while (1) {
    size = mzjit_make(argv[0], mzjit_code_buffer, mzjit_code_len);
    if (size != -1) break;
    mzjit_code_len *= 2;
    mzjit_code_buffer = realloc(mzjit_code_buffer, mzjit_code_len);
  }
  code = malloc(size);
  /* generate into a fresh block */
  if ( mzjit_make(argv[0], code, size + MAX_INSTR_SIZE) == -1 )
    scheme_signal_error("mzjit_make failed on second pass");
  /* disassemble(stderr, code, ((char*)code)+size); */
  r = scheme_make_cptr(code, NULL);
  scheme_register_finalizer(r, free_jit_code, code, NULL, NULL);
  return r;
}

/*****************************************************************************/
/* Initialization */

/* This is called with the #%foreign module */
void scheme_init_lightning(Scheme_Env *menv)
{
  op_alist = scheme_null;
  MZ_REGISTER_STATIC(op_alist);
  mzjit_code_len = 1024;
  mzjit_code_buffer = malloc(mzjit_code_len);
  {:(map (lambda (op)
           (list "op_alist = scheme_make_pair(" \\
                 "             scheme_make_pair(" \\
                 "               scheme_intern_symbol(\""(car op)"\")," \\
                 "               "(cadr op)")," \\
                 "             op_alist);" \\))
         op-syms):}
  {:(map (lambda (sym)
           (list (cadr sym)" = scheme_intern_symbol(\""(car sym)"\");" \\
                 "MZ_REGISTER_STATIC("(cadr sym)");" \\))
         (reverse symbols)):}
  {:(map (lambda (x)
           (list "scheme_add_global(\""(car x)"\"," \\
                 "  scheme_make_prim_w_arity("(cadr x)", \""(car x)"\","
                        " "(caddr x)", "(cadddr x)"), menv);" \\))
      (reverse! cfunctions)):}
}

/*****************************************************************************/

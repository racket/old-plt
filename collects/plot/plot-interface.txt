MODULE: PLOT

A note on syntax : [(item value) ... ] represents a list of default options, over-ridable 
over-ridable by passing an associate list.


-----
DATA:
-----


2d-renderer is one of :
	    (points (list-of vector) [character])
|	    (line (number->number) [samples color width])
|	    (field (vector -> vector) [samples color width style])
|	    (contour (number number ->number) [samples color width levels])
|	    (shade (number number -> number) [samples levels])
|	    (error-bars (list-of (vector number number number)) [color symbol])
|	    (mix 2drenderer 2drenderer)
|	    (make-your-own (2d-view-snip% -> void))
purpose: a 2d-renderer takes a 2d graph and transforms it to display the data that it contains


plot: 2d-renderer (option value)+ -> VIEW

3d-renderer is one of:
	    (surface (number number -> number) [samples color width])
|	    (mix 3d-renderer 3d-renderer)
|	    (make-your-own (3d-view-snip% -> void))
purpose: a 3d-renderer takes a 3d graph and transforms it

plot3d: 3d-renderer (option value)+ -> VIEW


fit-lambda is 
	   (fit-lambda (x) (param+ ) body)
|	   (fit-lambda (x y) (param+ ) body)

guess-list is:
	(list-of (symbol number))

x-data y-data result-data is : (list-of number)

error-data is one of:
	   (list-of number)
	   null

fit-result is
	   (fit fit-lambda guess-list x-data [y-data] result-data error-data)



---------
FUNCTIONS
---------

--------
plotting 


plot  	; 2d-renderer (option value)* -> VIEW
	; Returns a view% specified by the options with the renderers applied to it
	x-min: number [-5]
	x-max: number [5]
	y-min: number [-5]
	y-max: number [5]
	x-label: string ["X axis"]
	y-label: string ["Y axis"]
	title: string ["a graph"]
		

plot3d	: 3d-renderer (option value)* -> 3d-view-snip%
	; Returns a 3d-view-snip% bounded by the options with the renderers applied to it
	x-min: number [-5]
	x-max: number [5]
	y-min: number [-5]
	y-max: number [5]
	z-min: number [-5]
	z-max: number [5]
	altitude: number - specifies altitude from which the box is viewed, in degrees [30]
	azimuth: number - specifies the rotation from which the box is viewed, in degrees [45]
	x-label: string ["X axis"]
	y-label: string ["Y axis"]
	z-label: string ["Z axis"]


--------
curve-fitting


fit			; fit-lambda guess-list x-data [y-data] result-data error-data -> [fit-result u void]
			; tries to fit the given fit-lambda to the given data. 
			; result is null if the curve did not succeed

fit-result-final-params	; fit-result -> guess-list
			; returns the result parameters for the curve fit

fit-result-function	; fit-result -> [(number -> number) u (number number -> number)]
			; returns the function that was used to make the fit with the 
			; parameters replaced by their values. useful to see the result of the fit


renderer creators:
------------------


common options:

samples: number - number of times a function is sampled on a graph
color: symbol - color for lines - one of:
	'(white black yellow green aqua pink wheat grey brown blue violet cyan turquoise magenta salmon red)
width: number - width (in pixels) for lines to be drawn


2d-renderer creators:
---------------------


points 	: (list-of vector) [character] -> 2d-renderer
	; given a list of points, creates a renderer for them
	character : integer - specifies the char number w/ which to plot points [9] (a Circled dot)	

line	: (number->number) [(samples 150) (color red) (width 1)] -> 2d-renderer
	; given a function of one variable, creates a renderer for it		
		

field 	: (vector -> vector) [(samples 15) (color black) (width  1) (style normalized)] -> 2d-renderer
	; given a vector valued function (R2->R2), creates a renderer for it
	style :
	scaled -> vector field with scaled vectors
	normalized -> all vectors same size, indicates direction 
  	real -> all vectors drawn to scale	

contour : (number number ->number) [(samples 50) (color black) (width 1) (levels 10)] -> 2d-renderer
        ; given a 3D function, creates a renderer that plots it on a 2d surface using contours
	levels : (number u (list-of number)) - specifies either the number of levels or 
		the particular levels to plot

shade 	: (number number -> number) [(samples 50) (levels 10)] -> 2d-renderer
	; given a 3D function, creates a renderer that plots it on a 2d surface using shades
	levels: number - specifies number of levels to plot (calculated at even distances from of function to min of function)

3d-renderer generators:
-----------------------

surface : (number number -> number) [(samples 50) (color black) (width 1)] -> 3d-renderer
	; given a 3d function, creates a renderer that plots it(showing the top only) on a 3d view


Math-tools
----------

derivative 	: (number -> number) [h .000001] -> (number -> number)		
		; creates a function that is the derivative of the function given
		h : number - represents the divisor to use in the definition of derivative

gradient	: (number number -> number) [h .000001] -> (vector -> vector)
		; creates a vector valued function that is the gradient of the given function
		h : as above

make-vec	: (number number -> number) (number number -> number) -> (vector -> vector)
		; creates a vector valued function from two scalar-valued functions
